{"version":3,"file":"static/js/3075.13723680.chunk.js","mappings":"iTAI2CA,EAAAA,U,qCCS3C,MAAMC,UAAkBD,EAAAA,UACpBE,WAAAA,CAAYC,GACRC,MAAMD,GAAM,KAShBE,kBAAoB,KAChB,MAAM,YAAEC,EAAW,iBAAEC,GAAqBC,KAAKL,MAAMM,KAC/CC,EAAeJ,EAAYK,OAAS,EAAIL,EAAYM,QAAQC,GAAYA,EAAQC,KAAOP,IAAoB,GACjH,OAAOG,EAAaC,OAAS,EAAID,EAAa,GAAKJ,EAAYK,OAAS,EAAIL,EAAY,GAAK,CAAC,CAAC,EAClG,KAODS,mBAAsBC,IAClB,MAAM,KAAEP,EAAI,aAAEQ,GAAiBT,KAAKL,MACpCc,EAAaR,EAAKK,GAAII,OAAOF,GAAS,cACtCR,KAAKW,SAAS,CAAEC,WAAYF,OAAOF,IAAU,EAChD,KAEDK,mBAAsBL,IAClB,MAAM,KAAEP,EAAI,aAAEQ,GAAiBT,KAAKL,MACpCc,EAAaR,EAAKK,GAAII,OAAOF,GAAS,UACtCR,KAAKW,SAAS,CAAEH,OAAQE,OAAOF,IAAU,EAC5C,KAEDM,eAAiB,CAACC,EAAKP,KACnB,MAAMQ,EAAO,CACTV,GAAIS,EAAIE,UACRC,KAAOH,EAAII,YAAaC,eAE5BC,aAAaC,QAAQ,SAAUP,EAAIT,IAC/BE,GAAQa,aAAaC,QAAQ,WAAW,GAC5CD,aAAaC,QAAQ,iBAAkB,eACvCC,EAAAA,EAAAA,IAAqBP,EAAMR,GAAQ,EAAK,EAtCxCR,KAAKwB,MAAQ,CACTZ,WAAYZ,KAAKL,MAAMM,KAAKW,WAC5BJ,OAAQR,KAAKL,MAAMM,KAAKO,OACxBT,iBAAkBC,KAAKH,oBAE/B,CAQA4B,iBAAAA,GACI,MAAM,KAAExB,GAASD,KAAKL,MACtBK,KAAKW,SAAS,CAAEH,OAAQP,EAAKO,OAAQI,WAAYX,EAAKW,YAC1D,CAyBAc,kBAAAA,CAAmBC,GACXA,EAAUC,gBAAkB5B,KAAKL,MAAMiC,gBACvC5B,KAAKW,SAAS,CAAEZ,iBAAkBC,KAAKH,qBAE/C,CAEAgC,MAAAA,GACI,MAAM,KAAE5B,EAAI,aAAE6B,EAAY,cAAEC,GAAkB/B,KAAKL,OAC7C,OAAEa,EAAM,WAAEI,EAAU,iBAAEb,GAAqBC,KAAKwB,OAChD,SAAEQ,EAAQ,UAAEf,EAAS,YAAEnB,EAAW,UAAEmC,GAAchC,EACxD,OACIiC,EAAAA,EAAAA,MAAA,MAAAC,SAAA,EACIC,EAAAA,EAAAA,KAAA,MAAAD,UACID,EAAAA,EAAAA,MAAA,OAAKG,UAAU,4BAA2BF,SAAA,EACtCC,EAAAA,EAAAA,KAAA,QAAMC,UAAU,0CAAyCF,UACrDC,EAAAA,EAAAA,KAAA,OAAKC,UAAU,kBAAkBC,KAAKC,EAAAA,EAAAA,IAAQ,oCAAmCC,EAAAA,EAAAA,IAAiBvC,EAAKgB,kBAAmBwB,OAAQ,GAAIC,MAAO,GAAIC,IAAI,QAEzJT,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACID,EAAAA,EAAAA,MAAA,KAAGG,UAAU,cAAaF,SAAA,EACtBD,EAAAA,EAAAA,MAAA,QAAMG,UAAU,wBAAuBF,SAAA,EAAES,EAAAA,EAAAA,IAAgB3C,EAAKiB,MAAO,OACpEjB,EAAK4C,YACFT,EAAAA,EAAAA,KAACU,EAAAA,EAAc,CAACC,UAAU,MAAMC,SAASZ,EAAAA,EAAAA,KAACa,EAAAA,EAAO,CAAAd,SAAElC,EAAKiD,UAAmBf,UACvEC,EAAAA,EAAAA,KAACe,EAAAA,GAAI,CAACd,UAAU,kBAAkBe,GAAuB,IAAnBnD,EAAKgB,UAAkBhB,EAAK4C,WAAa,yBAAyB5C,EAAKoD,YAAaC,OAAO,SAAQnB,UACrIC,EAAAA,EAAAA,KAACmB,EAAAA,GAAe,CAACC,KAAM,mCAG7B,SAEVpB,EAAAA,EAAAA,KAAA,SAAOC,UAAU,qBAAoBF,SAAElC,EAAKkB,uBAIxDiB,EAAAA,EAAAA,KAAA,MAAAD,UACID,EAAAA,EAAAA,MAAA,OAAKG,UAAU,4BAA2BF,SAAA,CACrC,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,IAAIsB,SAASzB,IAA0B,GAAbf,GAAkBnB,GAAeA,EAAYK,OAAS,GACxG+B,EAAAA,EAAAA,MAACwB,EAAAA,EAAQ,CAACC,MAAO,CAAEC,SAAU,KAAMzB,SAAA,EAC/BD,EAAAA,EAAAA,MAACwB,EAAAA,EAASG,OAAM,CAACC,QAAQ,YAAYC,KAAM,KAAM1B,UAAU,0DAAyDF,SAAA,EAChHD,EAAAA,EAAAA,MAAA,OAAKG,UAAU,wCAAuCF,SAAA,EAClDC,EAAAA,EAAAA,KAAC4B,EAAAA,EAAM,CAAC3B,UAAW,oDACf4B,UAAW,GACXC,YAAa,oBACbhD,KAAMnB,EAAiBoE,YAAaC,WAAYrE,EAAiBsE,eAAgBpD,UAAWA,KAChGmB,EAAAA,EAAAA,KAAA,OAAKC,UAAU,kBAAkBsB,MAAO,CAAEW,SAAU,KAAMnC,UACtDC,EAAAA,EAAAA,KAAA,KAAGC,UAAU,oCAAmCF,SAAEpC,EAAiBoE,mBAG5D,aAAblC,GAAyC,WAAbA,GAC1BG,EAAAA,EAAAA,KAACU,EAAAA,EAAc,CAACE,SAASZ,EAAAA,EAAAA,KAACa,EAAAA,EAAO,CAAAd,SAAC,+JAAqKA,UACnMC,EAAAA,EAAAA,KAAA,QAAMC,UAAU,sCAAqCF,UACjDC,EAAAA,EAAAA,KAACmB,EAAAA,GAAe,CAACC,KAAM,oBAG7B,SAGVpB,EAAAA,EAAAA,KAACsB,EAAAA,EAASa,KAAI,CAAClC,UAAU,QAAOF,SAC3BrC,EAAY0E,KAAInE,IACb,MAAM,GAAEC,EAAE,eAAE+D,EAAc,YAAEF,GAAgB9D,EAC5C,OAAO+B,EAAAA,EAAAA,KAACsB,EAAAA,EAASe,KAAI,CAAUC,QAASA,KAAMC,EAAAA,EAAAA,IAAgB,iBAAkB,cAAc,GAAQ5C,EAAczB,EAAIL,EAAKK,IAAM,CAAC,EAAE6B,UAClID,EAAAA,EAAAA,MAAA,OAAKG,UAAU,4BAA2BF,SAAA,EACtCC,EAAAA,EAAAA,KAAC4B,EAAAA,EAAM,CAAC3B,UAAW,oDACf4B,UAAW,GACXC,YAAa,oBACbhD,KAAMiD,EAAaC,WAAYC,EAAgBpD,UAAWA,KAC9DmB,EAAAA,EAAAA,KAAA,OAAKC,UAAU,kBAAkBsB,MAAO,CAAEW,SAAU,KAAMnC,UACtDC,EAAAA,EAAAA,KAAA,KAAGC,UAAU,oCAAmCF,SAAEgC,UAPnC7D,EAUX,SAI1B,MACN4B,EAAAA,EAAAA,MAAA,OAAKG,UAAU,cAAaF,SAAA,CACV,aAAbF,GACGG,EAAAA,EAAAA,KAACU,EAAAA,EAAc,CAACC,UAAU,MAAMC,SAASZ,EAAAA,EAAAA,KAACa,EAAAA,EAAO,CAAAd,SAAC,cAAoBA,UAClEC,EAAAA,EAAAA,KAACwC,EAAAA,EAAM,CAACd,QAAQ,OAAOC,KAAK,KAAK1B,UAAU,qBAAqBqC,QAASA,KAAMC,EAAAA,EAAAA,IAAgB,iBAAkB,iBAAiB,GAAO3E,KAAKc,eAAeb,GAAM,GAAQ,CAAC,EAAEkC,UAC1KC,EAAAA,EAAAA,KAACmB,EAAAA,GAAe,CAACsB,KAAM,QAASrB,KAAM,eAG5C,GACQ,WAAbvB,GACGG,EAAAA,EAAAA,KAACU,EAAAA,EAAc,CAACC,UAAU,MAAMC,SAASZ,EAAAA,EAAAA,KAACa,EAAAA,EAAO,CAAAd,SAAC,YAAkBA,UAChEC,EAAAA,EAAAA,KAACwC,EAAAA,EAAM,CAACd,QAAQ,OAAOC,KAAK,KAAK1B,UAAU,qBAAqBqC,QAASA,KAAMC,EAAAA,EAAAA,IAAgB,iBAAkB,iBAAiB,GAAQ3E,KAAKc,eAAeb,GAAM,GAAS,CAAC,EAAEkC,UAC5KC,EAAAA,EAAAA,KAACmB,EAAAA,GAAe,CAACsB,KAAM,QAASrB,KAAM,eAG5C,YAmClBtB,EAAAA,EAAAA,MAAA,MAAAC,SAAA,EACIC,EAAAA,EAAAA,KAAA,KAAGC,UAAU,wBAAwB,UAAQ,OAAMF,SAAElC,EAAK6E,UAAY7E,EAAK6E,UAAY,KACvF5C,EAAAA,EAAAA,MAAA,QAAMG,UAAU,qBAAoBF,SAAA,CAAC,YAAUlC,EAAK6E,UAAY,EAAI,QAAU,cAElF1C,EAAAA,EAAAA,KAAA,MAAAD,UACIC,EAAAA,EAAAA,KAAC2C,EAAAA,EAAKC,MAAK,CAACH,KAAK,SAASI,QAASrE,EAAY,UAAQ,aAAasE,SAAUA,KAAMP,EAAAA,EAAAA,IAAgB,iBAAkB,cAAc,GAAQ3E,KAAKO,oBAAoBK,GAAc,CAAC,OAExLwB,EAAAA,EAAAA,KAAA,MAAAD,UACIC,EAAAA,EAAAA,KAAC2C,EAAAA,EAAKC,MAAK,CAACH,KAAK,SAASI,QAASzE,EAAQ,UAAQ,SAAS0E,SAAUA,KAAMP,EAAAA,EAAAA,IAAgB,iBAAkB,cAAc,GAAQ3E,KAAKa,oBAAoBL,GAAU,CAAC,OAE5K4B,EAAAA,EAAAA,KAAA,MAAIC,UAAU,gBAAeF,UACzBC,EAAAA,EAAAA,KAAA,OAAKC,UAAU,gDAAgDqC,QAASA,KAAMC,EAAAA,EAAAA,IAAgB,iBAAkB,cAAc,GAAQ7C,EAAa7B,EAAKK,GAAIL,EAAKgB,WAAa,CAAC,EAAGkB,UAC9KC,EAAAA,EAAAA,KAACU,EAAAA,EAAc,CAACC,UAAU,MAAMC,SAASZ,EAAAA,EAAAA,KAACa,EAAAA,EAAO,CAAAd,SAAC,WAAiBA,UAC/DC,EAAAA,EAAAA,KAACwC,EAAAA,EAAM,CAACd,QAAQ,OAAOC,KAAK,KAAK,UAAQ,SAAS1B,UAAU,qBAAoBF,UAC5EC,EAAAA,EAAAA,KAACmB,EAAAA,GAAe,CAACsB,KAAK,QAAQrB,KAAM,wBAOhE,EAGJ,MAMA,GAAe2B,EAAAA,EAAAA,IAAQ,MANIC,IAChB,CACHC,UAAWA,IAAMD,GAASC,EAAAA,EAAAA,UAIlC,CAAiD5F,G,qGCjMjD,MAAM6F,EAAe,CACjB,CAAEpE,KAAM,OAAQ0C,SAAU,KAC1B,CAAE1C,KAAM,UAAW0C,SAAU,KAC7B,CAAE1C,KAAM,QAAS0C,SAAU,KAC3B,CAAE1C,KAAM,aAAc0C,SAAU,IAChC,CAAE1C,KAAM,SAAU0C,SAAU,IAC5B,CAAE1C,KAAM,UAAW0C,SAAU,GAAI2B,MAAO,aAGtCC,EAAU,IAAIC,iBAAiB,WACrC,MAAMC,UAAoBlG,EAAAA,UAAUE,WAAAA,GAAA,SAAAiG,WAAA,KAChCC,WAAa,IAAIC,gBAAkB,KACnCrE,MAAQ,CAAEsE,YAAa,EAAGC,SAAU,GAAIC,UAAW,EAAGC,SAAU,GAAIC,iBAAkB,KAAMtE,gBAAgB,GAAO,KAyBnHuE,gBAAmBC,IAAQpG,KAAKW,SAAS,CAAEoF,SAAUM,SAASD,EAAE9C,OAAOgD,OAAQR,YAAa,IAAK,IAAM9F,KAAKuG,gBAAe,EAAE,KAE7HC,SAAYC,IAASzG,KAAKW,SAAS,CAAEmF,YAAaW,IAAM,IAAMzG,KAAKuG,gBAAe,EAAE,KAEpFA,aAAe,KACX,MAAM,YAAEG,GAAgB1G,KAAKL,MACvBgH,EAAmB,OAAXD,QAAW,IAAXA,OAAW,EAAXA,EAAaC,MAC3B3G,KAAKW,SAAS,CAAEsF,SAAUU,EAAOX,UAAWY,KAAKC,MAAMF,GAASA,EAAMxG,OAAS,EAAIwG,EAAMxG,OAAS,GAAKH,KAAKwB,MAAMuE,WAAY,EACjI,KAGDtF,aAAe,CAACqG,EAAQtG,EAAQuG,KAC5B/G,KAAKL,MAAMqH,mBAAmBF,EAAQtG,EAAQuG,EAAQ/G,KAAKiH,qBAAqB,EACnF,KAGDlF,cAAgB,CAACzB,EAAIwG,KACjB9G,KAAKL,MAAMuH,6BAA6B5G,EAAIwG,EAAQ9G,KAAKiH,qBAAqB,EACjF,KACDA,qBAAwBE,IACpBnH,KAAKL,MAAMyH,gBACXpH,KAAKuG,eACM,WAAPY,GAAkBnH,KAAKW,SAAS,CAAEiB,gBAAiB5B,KAAKwB,MAAMI,gBAAiB,EACtF,KAEDE,aAAe,CAACgF,EAAQ7F,KACpBoG,IAAAA,KAAU,CACN7D,KAAM,UACN8D,MAAO,gBACPC,iBAAiB,EACjBC,kBAAkB,EAClBC,cAAc,EACdC,kBAAmB,MACnBC,uBAAwB,MACxBC,iBAAkB,KAClBC,sBAAuB,gBACxBC,MAAMC,IACDA,EAAOzB,OACPtG,KAAKL,MAAMqI,mBAAmBlB,EAAQ7F,EAAWjB,KAAKiI,oBAAoBhH,GAC9E,GACF,EACL,KAEDgH,oBAAuBhH,IACnBjB,KAAKL,MAAMyH,gBACXpH,KAAKuG,cAAc,EACtB,KAED2B,cAAgBC,UACZ,IACI,MAAM,UAAE9C,GAAcrF,KAAKL,MACrByI,EAAWC,KAAKC,MAAMC,EAAMC,OAC5B,KAAEC,GAASL,EACXnH,EAAYI,aAAaqH,QAAQ,aACjC7D,EAAOxD,aAAaqH,QAAQ,mBAC9BH,EAAMI,OAAOlF,SAAS,eAAiB8E,EAAMI,OAAOlF,SAAS,eACjD,cAARoB,GACI4D,SAAYG,EAAAA,EAAAA,IAAiBvC,SAASpF,GAAYwH,EAAMpD,EAGxE,CAAE,MAAOwD,GAET,GACF,KAQFC,cAAgB,KACZ,MAAM,YAAEhD,EAAW,UAAEE,GAAchG,KAAKwB,MAClCuH,EAAa,GAEnB,GAAI/C,GAAa,EACb,IAAK,IAAIgD,EAAI,EAAGA,GAAKhD,EAAWgD,IAC5BD,EAAWE,KAAKD,QAGhBlD,GAAe,EACfiD,EAAWE,KAAK,EAAG,EAAG,EAAG,EAAG,MAAOjD,GAC5BF,EAAcE,EAAY,EACjC+C,EAAWE,KAAK,EAAG,MAAOjD,EAAY,EAAGA,EAAY,EAAGA,EAAY,EAAGA,GAEvE+C,EAAWE,KAAK,EAAG,MAAOnD,EAAc,EAAGA,EAAaA,EAAc,EAAG,MAAOE,GAIxF,OAAO+C,CAAU,CACpB,CAjHDtH,iBAAAA,GACIyH,OAAOC,iBAAiB,UAAWnJ,KAAKkI,cAAe,CAAEkB,OAAQpJ,KAAK4F,WAAWwD,SACjF5D,EAAQ2D,iBAAiB,UAAWnJ,KAAKkI,eACzClI,KAAKL,MAAM0F,YACXrF,KAAKuG,cACT,CAEA7E,kBAAAA,CAAmBC,EAAW0H,GAAY,IAADC,EAAAC,EAAAC,EAAAC,EAAAC,EACrC,GAA2B,QAAvBJ,EAACtJ,KAAKL,MAAM+G,mBAAW,IAAA4C,GAAtBA,EAAwBK,SAAY3J,KAAKL,MAAMiK,aAAsC,QAAvBL,EAACvJ,KAAKL,MAAM+G,mBAAW,IAAA6C,GAAO,QAAPC,EAAtBD,EAAwB5C,aAAK,IAAA6C,GAA7BA,EAA+BrJ,QAM9F,GAA6C,IAAnB,QAAtBsJ,EAAAzJ,KAAKL,MAAM+G,mBAAW,IAAA+C,GAAO,QAAPC,EAAtBD,EAAwB9C,aAAK,IAAA+C,OAAP,EAAtBA,EAA+BvJ,QAAa,CAAC,IAAD0J,EACjD,MAAM,GAAEvJ,EAAE,UAAEW,GAAoC,QAAzB4I,EAAG7J,KAAKL,MAAM+G,mBAAW,IAAAmD,OAAA,EAAtBA,EAAwBlD,MAAM,GACxD,GAAU,GAANrG,GAAwB,GAAbW,EAAgB,CAC3B,MAAM6I,EAASzI,aAAaqH,QAAQ,UAChCoB,GAAQ9J,KAAKL,MAAMoK,SAAS,oBAAoBD,IACxD,CACJ,MAZ2G,CACvG,MAAMA,EAASzI,aAAaqH,QAAQ,UAChCoB,GACA9J,KAAKL,MAAMoK,SAAS,oBAAoBD,IAEhD,CAQJ,CAmEAE,oBAAAA,GACId,OAAOe,oBAAoB,UAAWjK,KAAKkI,cAAe,CAAEkB,OAAQpJ,KAAK4F,WAAWwD,SACpF5D,EAAQyE,oBAAoB,UAAWjK,KAAKkI,eAC5ClI,KAAK4F,WAAWsE,OACpB,CAyBArI,MAAAA,GACI,MAAM,YAAEiE,EAAW,SAAEC,EAAQ,UAAEC,EAAS,SAAEC,EAAQ,eAAErE,GAAmB5B,KAAKwB,OACtE,YAAEkF,EAAW,YAAEkD,EAAW,SAAEO,EAAQ,SAAEJ,GAAa/J,KAAKL,MAGxDyK,GAFapK,KAAK8I,iBAENhD,EAAc,GAAKC,GAChBE,EAAW,GAAIA,EAASoE,MAAMD,EAAUA,EAAWrE,GAExE,OAAO7D,EAAAA,EAAAA,MAAA,OAAKG,UAAU,oDAAmDF,SAAA,EAC7DC,EAAAA,EAAAA,KAAA,OAAKC,UAAU,YAAWF,UACtBC,EAAAA,EAAAA,KAACkI,EAAAA,EAAS,CAACC,OAAK,EAAApI,UACZC,EAAAA,EAAAA,KAAA,OAAKC,UAAU,YAAWF,UACtBC,EAAAA,EAAAA,KAAA,MAAIC,UAAU,eAAcF,SAAC,iBAI7CC,EAAAA,EAAAA,KAACkI,EAAAA,EAAS,CAACC,OAAK,EAAApI,UACZD,EAAAA,EAAAA,MAACsI,EAAAA,EAAI,CAAArI,SAAA,EACDD,EAAAA,EAAAA,MAACsI,EAAAA,EAAKC,OAAM,CAACpI,UAAU,mBAAkBF,SAAA,EACrCC,EAAAA,EAAAA,KAAA,MAAIC,UAAU,eAAcF,SAAC,kBAC7BC,EAAAA,EAAAA,KAAA,OAAKC,UAAU,WAAUF,SACvBuE,EAAYiD,SAAYC,EASK,KAR3BO,GAAYA,EAAShK,OAAS,GAC9B+B,EAAAA,EAAAA,MAAA,UAAQwC,QAASA,KAAMC,EAAAA,EAAAA,IAAgB,iBAAkB,cAAc,GAAQoF,EAAS,oBAAoB1I,aAAaqH,QAAQ,aAAe,CAAC,EAAGrG,UAAU,+CAA8CF,SAAA,EACxMC,EAAAA,EAAAA,KAACmB,EAAAA,GAAe,CAACC,KAAM,OAAQkH,UAAU,SAAS,eAItDxI,EAAAA,EAAAA,MAAC0C,EAAAA,EAAM,CAACb,KAAK,KAAK1B,UAAU,wBAAwBqC,QAASA,KAAMC,EAAAA,EAAAA,IAAgB,iBAAkB,iBAAiB,GAAQ3E,KAAKL,MAAMgL,oBAAmB,GAAQ,CAAC,EAAExI,SAAA,EACnKC,EAAAA,EAAAA,KAACmB,EAAAA,GAAe,CAACC,KAAM,OAAQkH,UAAU,SAAS,uBAI9DtI,EAAAA,EAAAA,KAACoI,EAAAA,EAAKI,KAAI,CAAAzI,UACNC,EAAAA,EAAAA,KAAA,OAAKC,UAAU,gFAAgFsB,MAAO,CAAEkH,UAAW,uBAAwB1I,SACrIuE,EAAYiD,SAAYC,GAuBtBxH,EAAAA,EAAAA,KAAA,OAAKuB,MAAO,CAAEkH,UAAW,uBAAwB1I,UAC7CC,EAAAA,EAAAA,KAAC0I,EAAAA,EAAM,MAvBXX,GAAYA,EAAShK,OAAS,GAC1BiC,EAAAA,EAAAA,KAAA,OAAKC,UAAU,mBAAmBsB,MAAO,CAAEkH,UAAW,uBAAwB1I,UAC1ED,EAAAA,EAAAA,MAAC6I,EAAAA,EAAK,CAAChH,KAAK,KAAK1B,UAAU,QAAOF,SAAA,EAC9BC,EAAAA,EAAAA,KAAA,SAAOC,UAAU,cAAaF,UAC1BC,EAAAA,EAAAA,KAAA,MAAAD,SAEQmD,EAAad,KAAI,CAACwG,EAAQhC,KAAM5G,EAAAA,EAAAA,KAAA,MAAYC,UAAW,wBAA6B,OAAN2I,QAAM,IAANA,OAAM,EAANA,EAAQzF,QAAS,KAAM5B,MAAO,CAAEC,SAAUoH,EAAOpH,UAAWzB,SAAE6I,EAAO9J,MAA1G8H,UAIrD5G,EAAAA,EAAAA,KAAA,SAAAD,SACgB,OAAXuE,QAAW,IAAXA,GAAAA,EAAaC,OAAoB,OAAXD,QAAW,IAAXA,GAAAA,EAAaC,MAAMxG,OAAoB,OAAXuG,QAAW,IAAXA,OAAW,EAAXA,EAAaC,MAAMnC,KAAKvE,GAClD,IAAR,OAAJA,QAAI,IAAJA,OAAI,EAAJA,EAAMK,KAA8B,IAAf,OAAJL,QAAI,IAAJA,OAAI,EAAJA,EAAMgB,YAAkBmB,EAAAA,EAAAA,KAAC3C,EAAS,CAACQ,KAAMA,EAAMQ,aAAcT,KAAKS,aAAcqB,aAAc9B,KAAK8B,aAAcC,cAAe/B,KAAK+B,cAAqCH,eAAgBA,GAAjC,MAAM3B,EAAKK,MAA2C,OACxO,aAKjB8B,EAAAA,EAAAA,KAAA,OAAKC,UAAU,WAAWsB,MAAO,CAAEkH,UAAW,uBAAwB1I,UAClEC,EAAAA,EAAAA,KAAC6I,EAAAA,EAAa,CAAC3D,MAAO,wCAAoC4D,KAAM,qGAAsG1H,KAAM,QAAS2H,OAAQ,CAAEpE,OAAQA,KAAMpC,EAAAA,EAAAA,IAAgB,iBAAkB,iBAAiB,GAAS3E,KAAKL,MAAMgL,oBAAmB,GAAQ,CAAC,EAAGS,KAAM,kBAAoBC,cAAc,iBA0DnY,EAIJ,MAsBA,GAAelG,EAAAA,EAAAA,KAtBU3D,IAAW,IAAD8J,EAAAC,EAAAC,EAC/B,MAAO,CAEH9E,YAAalF,EAAMkF,YACnBkD,YAAkB,OAALpI,QAAK,IAALA,GAAoB,QAAf8J,EAAL9J,EAAOiK,qBAAa,IAAAH,OAAf,EAALA,EAAsB1B,YACnCO,SAAe,OAAL3I,QAAK,IAALA,GAAoB,QAAf+J,EAAL/J,EAAOiK,qBAAa,IAAAF,GAAe,QAAfC,EAApBD,EAAsBG,qBAAa,IAAAF,OAA9B,EAALA,EAAqCrB,SAElD,IAGsB/E,IAChB,CACHC,UAAWA,IAAMD,GAASC,EAAAA,EAAAA,OAC1B2C,mBAAoBA,CAAClB,EAAQ7F,EAAW0K,IAAavG,GAAS4C,EAAAA,EAAAA,IAAmBlB,EAAQ7F,EAAW0K,IACpG3E,mBAAoBA,CAACF,EAAQtG,EAAQuG,EAAQ4E,IAAavG,GAAS4B,EAAAA,EAAAA,GAAmBF,EAAQtG,EAAQuG,EAAQ4E,IAC9GzE,6BAA8BA,CAAC7D,EAAWyD,EAAQ6E,IAAavG,GAAS8B,EAAAA,EAAAA,IAA6B7D,EAAWyD,EAAQ6E,IACxHvE,cAAeA,IAAMhC,GAASgC,EAAAA,EAAAA,OAC9BuD,mBAAqBnK,GAAW4E,EAAS,CAAEP,KAAM8F,EAAAA,IAAoBiB,QAASpL,IAC9EqL,sBAAwBF,GAAavG,GAASyG,EAAAA,EAAAA,IAAsBF,OAI5E,EAA4DG,EAAAA,EAAAA,GAAWpG,G","sources":["app/Layout/Main/Feeds/ManageFeed/Components/SelectAccount.js","app/Layout/Main/Feeds/ManageFeed/Components/FeedsList.js","app/Layout/Main/Feeds/ManageFeed/index.js"],"sourcesContent":["import React, { Component } from 'react'\r\n import Select from 'react-select'; \r\nimport { AUTHOR_IMAGE } from '../../../../../../utils';\r\n\r\nexport default class SelectAccount extends Component {\r\n\r\n    state = {selectedOption:null , allOptions:[] };\r\n     \r\n     componentDidMount(){\r\n         const {feed} = this.props \r\n         var option=[], fontDefault \r\n\r\n\r\n         feed && feed.accountList && feed.accountList.length && feed.accountList.map((account, index)=>{\r\n            if (account.id == feed.connectedAccount) {\r\n                fontDefault = { value: account.id, label: (<span  className=\"filter-option pull-left d-flex align-items-center\" key={account.id}><div  className=\"symbol symbol-30 random_color-2 symbol-circle mr-2 selectAcc\"style={{ backgroundImage: `url(${account.profilePicture.replace(/\\s/g, '')}),url(${AUTHOR_IMAGE(account.accountName, account.color)})` }}></div>{account.accountName}</span>) }\r\n              }\r\n\r\n              option.push({ value: account.id, label: (<span  className=\"filter-option pull-left d-flex align-items-center\"  key={index}><div  className=\"symbol symbol-30 random_color-2 symbol-circle mr-2 selectAcc\"style={{ backgroundImage: `url(${account.profilePicture.replace(/\\s/g, '')}),url(${AUTHOR_IMAGE(account.accountName, account.color)})` }}></div>{account.accountName}</span>) })\r\n         }) \r\n        this.setState({allOptions:option, selectedOption:fontDefault})\r\n     }\r\n\r\n    \r\n\r\n\r\n\r\n    handleChange = (e) => {\r\n        const { feed , changeAccount} = this.props\r\n         changeAccount(e.value, feed.id);\r\n         \r\n    }\r\n\r\n\r\n    render() {\r\n        const { selectedOption, allOptions } = this.state; \r\n        \r\n        return ( allOptions && allOptions.length && selectedOption && selectedOption.value ? \r\n        <Select  className=\"selectedOptionData\" defaultValue={selectedOption}  onChange={(e)=>this.handleChange(e)}  options={allOptions}  /> :'')\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport { Button, Image, Table, Form, OverlayTrigger, Tooltip, Dropdown } from 'react-bootstrap';\r\nimport Author from '../../../CommonComponents/Author/Author';\r\nimport { Link } from 'react-router-dom';\r\nimport SelectAccount from './SelectAccount'\r\nimport HTMLReactParser from 'html-react-parser';\r\nimport { connect } from 'react-redux'\r\nimport { GET_FEEDS } from '../../../../../../actions/manageFeedsAction'\r\nimport { showAddAccounntAlert } from '../../../../../../utils'\r\nimport { GET_NETWORK_ICON } from '../../../../../../utils';\r\nimport { baseUrl, FontAwesomeIcon } from '../../../../../../Assets/AssetsHelper';\r\nimport { checkPermission } from '../../../../../../actions/collaboratorActions';\r\n\r\nclass FeedsList extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            moderation: this.props.feed.moderation,\r\n            status: this.props.feed.status,\r\n            connectedAccount: this.getConnectAccount(),\r\n        }\r\n    }\r\n\r\n    getConnectAccount = () => {\r\n        const { accountList, connectedAccount } = this.props.feed;\r\n        const connectedAcc = accountList.length > 0 ? accountList.filter((account) => account.id === connectedAccount) : [];\r\n        return connectedAcc.length > 0 ? connectedAcc[0] : accountList.length > 0 ? accountList[0] : {}\r\n    }\r\n\r\n    componentDidMount() {\r\n        const { feed } = this.props\r\n        this.setState({ status: feed.status, moderation: feed.moderation })\r\n    }\r\n\r\n    onModerationSwitch = (status) => {\r\n        const { feed, changeStatus } = this.props\r\n        changeStatus(feed.id, Number(status), 'moderation')\r\n        this.setState({ moderation: Number(status) })\r\n    }\r\n\r\n    onFeedStatusSwitch = (status) => {\r\n        const { feed, changeStatus } = this.props\r\n        changeStatus(feed.id, Number(status), 'status')\r\n        this.setState({ status: Number(status) })\r\n    }\r\n\r\n    connectAccount = (obj, status) => {\r\n        const item = {\r\n            id: obj.networkId,\r\n            name: (obj.networkName).toLowerCase()\r\n        }\r\n        localStorage.setItem(\"feedId\", obj.id);\r\n        if (status) localStorage.setItem(\"refresh\", true);\r\n        localStorage.setItem(\"connectionType\", 'manageFeed');\r\n        showAddAccounntAlert(item, status, true)\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps.accountChanged != this.props.accountChanged) {\r\n            this.setState({ connectedAccount: this.getConnectAccount() })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { feed, onFeedDelete, changeAccount } = this.props\r\n        const { status, moderation, connectedAccount } = this.state\r\n        const { filterId, networkId, accountList, isBtntext } = feed\r\n        return (\r\n            <tr>\r\n                <td>\r\n                    <div className=\"d-flex align-items-center\">\r\n                        <span className=\"h-34px w-34px me-2 d-flex flex-shrink-0\">\r\n                            <img className=\"img-fluid h-100\" src={baseUrl(`media/icons/social-icons-square/${GET_NETWORK_ICON(feed.networkId)}.svg`)} height={43} width={43} alt=\"\" />\r\n                        </span>\r\n                        <div>\r\n                            <p className=\"mb-0 d-flex\">\r\n                                <span className=\"feed_name fw-semibold\">{HTMLReactParser(feed.name)}{\" \"}</span>\r\n                                {feed.socialLink ?\r\n                                    <OverlayTrigger placement=\"top\" overlay={<Tooltip>{feed.tooltip}</Tooltip>}>\r\n                                        <Link className=\"ms-2 text-muted\" to={feed.networkId !== 8 ? feed.socialLink : `https://vimeo.com/user${feed.accountId}`} target=\"_blank\">\r\n                                            <FontAwesomeIcon icon={'arrow-up-right-from-square'} />\r\n                                        </Link>\r\n                                    </OverlayTrigger>\r\n                                    : null}\r\n                            </p>\r\n                            <small className=\"mb-0 text-gray-600\">{feed.networkName}</small>\r\n                        </div>\r\n                    </div>\r\n                </td>\r\n                <td>\r\n                    <div className=\"d-flex align-items-center\">\r\n                        {[1, 2, 3, 4, 5, 8, 65, 67, 26].includes(filterId) && networkId != 2 && accountList && accountList.length > 0 ?\r\n                            <Dropdown style={{ minWidth: 220 }}>\r\n                                <Dropdown.Toggle variant=\"secondary\" size={'sm'} className=\"d-flex align-items-center w-100 justify-content-between\">\r\n                                    <div className=\"d-flex align-items-center flex-grow-1\">\r\n                                        <Author className={'symbol symbol-26 symbol-circle flex-shrink-0 me-2'}\r\n                                            imageSize={26}\r\n                                            symbolClass={'symbol-label fs-8'}\r\n                                            name={connectedAccount.accountName} profileUrl={connectedAccount.profilePicture} networkId={networkId} />\r\n                                        <div className=\"overflow-hidden\" style={{ maxWidth: 130 }}>\r\n                                            <p className=\"fw-medium mb-0 text-ellipsis fs-9\">{connectedAccount.accountName}</p>\r\n                                        </div>\r\n                                    </div>\r\n                                    {(isBtntext == \"Reconnect\" || isBtntext == \"Connect\") ?\r\n                                        <OverlayTrigger overlay={<Tooltip>Feed disconnected as the social media account's user name got changed since your last connection with Tagbox. Kindly click on the button below to connect.</Tooltip>}>\r\n                                            <span className='me-1 fs-5 text-danger h-14px w-14px'>\r\n                                                <FontAwesomeIcon icon={'circle-info'} />\r\n                                            </span>\r\n                                        </OverlayTrigger>\r\n                                        : null}\r\n                                </Dropdown.Toggle>\r\n\r\n                                <Dropdown.Menu className=\"w-100\">\r\n                                    {accountList.map(account => {\r\n                                        const { id, profilePicture, accountName } = account;\r\n                                        return <Dropdown.Item key={id} onClick={() => checkPermission('networkManager', 'manageFeed', true) ? changeAccount(id, feed.id) : {}}>\r\n                                            <div className=\"d-flex align-items-center\">\r\n                                                <Author className={'symbol symbol-26 symbol-circle flex-shrink-0 me-2'}\r\n                                                    imageSize={26}\r\n                                                    symbolClass={'symbol-label fs-8'}\r\n                                                    name={accountName} profileUrl={profilePicture} networkId={networkId} />\r\n                                                <div className=\"overflow-hidden\" style={{ maxWidth: 130 }}>\r\n                                                    <p className=\"fw-medium mb-0 text-ellipsis fs-9\">{accountName}</p>\r\n                                                </div>\r\n                                            </div>\r\n                                        </Dropdown.Item>\r\n                                    })}\r\n                                </Dropdown.Menu>\r\n                            </Dropdown>\r\n                            : '--'}\r\n                        <div className=\"d-flex ms-3\">\r\n                            {isBtntext == \"Reconnect\" ?\r\n                                <OverlayTrigger placement=\"top\" overlay={<Tooltip>Reconnect</Tooltip>}>\r\n                                    <Button variant='icon' size='sm' className='btn-active-primary' onClick={() => checkPermission('networkManager', 'manageAccount', true) ?this.connectAccount(feed, true) : {}}>\r\n                                        <FontAwesomeIcon type={'solid'} icon={'rotate'} />\r\n                                    </Button>\r\n                                </OverlayTrigger>\r\n                                : ''}\r\n                            {isBtntext == \"Connect\" ?\r\n                                <OverlayTrigger placement=\"top\" overlay={<Tooltip>Connect</Tooltip>}>\r\n                                    <Button variant='icon' size='sm' className=\"btn-active-primary\" onClick={() => checkPermission('networkManager', 'manageAccount', true) ? this.connectAccount(feed, false) : {}}>\r\n                                        <FontAwesomeIcon type={'solid'} icon={'rotate'} />\r\n                                    </Button>\r\n                                </OverlayTrigger>\r\n                                : ''}\r\n                        </div>\r\n                    </div>\r\n                </td>\r\n                {/* <td>\r\n                    <div className=\"d-flex align-items-center\">\r\n\r\n                            {feed && feed.accountList && feed.accountList.length ?\r\n                            feed.filterId && [1, 2, 3, 4, 5, 8, 65, 67, 26].includes(feed.filterId) && feed.networkId != 2 ?\r\n                                feed.accountList.filter(x => x.id == feed.connectedAccount) ? <>\r\n\r\n                                    <SelectAccount changeAccount={changeAccount} feed={feed} key={feed.id} />\r\n                                </>\r\n                                    : ''\r\n                                : ''\r\n                            : ''}\r\n                        \r\n                        <div className=\"d-flex ms-3\">\r\n                            {feed.isBtntext == \"Reconnect\" ?\r\n                                <OverlayTrigger placement=\"top\" overlay={<Tooltip>Reconnect</Tooltip>}>\r\n                                    <button type=\"button\" className=\"btn btn-icon btn-active-primary p-0 w-32px h-32px\" onClick={() => this.connectAccount(feed, true)}>\r\n                                        <FontAwesomeIcon icon={'arrow-rotate'} />\r\n                                    </button>\r\n                                </OverlayTrigger>\r\n                                : ''}\r\n                            {feed.isBtntext == \"Connect\" ?\r\n                                <OverlayTrigger placement=\"top\" overlay={<Tooltip>Connect</Tooltip>}>\r\n                                    <button type=\"button\" className=\"btn btn-icon btn-active-primary p-0 w-32px h-32px\" onClick={() => this.connectAccount(feed, false)}>\r\n                                        <FontAwesomeIcon icon={'arrow-rotate'} />\r\n                                    </button>\r\n                                </OverlayTrigger>\r\n                                : ''}\r\n                        </div>\r\n                    </div>\r\n                </td> */}\r\n                <td>\r\n                    <p className=\"fs-8 fw-semibold mb-0\" data-id=\"post\">{feed.postCount ? feed.postCount : 0}</p>\r\n                    <span className=\"fs-8 text-gray-600\">Approved {feed.postCount > 1 ? 'Posts' : 'Post'}</span>\r\n                </td>\r\n                <td>\r\n                    <Form.Check type=\"switch\" checked={moderation} data-id=\"moderation\" onChange={() => checkPermission('networkManager', 'manageFeed', true) ? this.onModerationSwitch(!moderation) : {}} />\r\n                </td>\r\n                <td>\r\n                    <Form.Check type=\"switch\" checked={status} data-id=\"status\" onChange={() => checkPermission('networkManager', 'manageFeed', true) ? this.onFeedStatusSwitch(!status) : {}} />\r\n                </td>\r\n                <td className=\"pr-0 text-end\">\r\n                    <div className=\"d-flex align-items-center justify-content-end\" onClick={() => checkPermission('networkManager', 'manageFeed', true) ? onFeedDelete(feed.id, feed.networkId) : {} }>\r\n                        <OverlayTrigger placement=\"top\" overlay={<Tooltip>Delete</Tooltip>}>\r\n                            <Button variant='icon' size='sm' data-id=\"delete\" className=\"btn-active-primary\">\r\n                                <FontAwesomeIcon type=\"solid\" icon={'trash-can'} />\r\n                            </Button>\r\n                        </OverlayTrigger>\r\n                    </div>\r\n                </td>\r\n            </tr>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        GET_FEEDS: () => dispatch(GET_FEEDS()),\r\n    }\r\n}\r\n\r\nexport default connect(null, mapDispatchToProps)(FeedsList);\r\n\r\n","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { Container, Table, Card, Button } from 'react-bootstrap';\r\nimport { ACTION_DELETE_FEED, ACTION_FEED_STATUS, ACTION_UPDATE_SOCIAL_ACCOUNT, GET_FEEDS } from '../../../../../actions/manageFeedsAction';\r\nimport FeedsList from './Components/FeedsList';\r\nimport { Loader } from '../../CommonComponents/Loader';\r\nimport Swal from 'sweetalert2'\r\nimport { addAccountFromId } from '../../../../../utils/addAccount';\r\nimport { getModeration } from '../../../../../actions/moderationActions';\r\nimport { FontAwesomeIcon } from '../../../../../Assets/AssetsHelper';\r\nimport { Link } from 'react-router-dom';\r\nimport withRouter from '../../../../routes/WithRouter';\r\nimport EmptyWithIcon from '../../CommonComponents/Empty/EmptyWithIcon';\r\nimport { TOGGLE_ADD_GALLERY } from '../../../../../reducer/keys';\r\nimport { SNAPUP_DETAILS_ACTION } from '../../../../../actions/addFeedActions';\r\nimport { checkPermission } from '../../../../../actions/collaboratorActions';\r\n\r\nconst tableHeaders = [\r\n    { name: \"Name\", minWidth: 150 },\r\n    { name: \"Account\", minWidth: 150 },\r\n    { name: \"Posts\", minWidth: 120 },\r\n    { name: \"Moderation\", minWidth: 50 },\r\n    { name: \"Status\", minWidth: 50 },\r\n    { name: \"Actions\", minWidth: 70, align: 'text-end' }\r\n];\r\n\r\nconst channel = new BroadcastChannel('connect');\r\nclass Managefeeds extends Component {\r\n    controller = new AbortController();\r\n    state = { currentPage: 1, showPost: 30, totalPage: 1, allFeeds: [], currentPageFeeds: null, accountChanged: false }\r\n\r\n    componentDidMount() {\r\n        window.addEventListener(\"message\", this.handleMessage, { signal: this.controller.signal });\r\n        channel.addEventListener(\"message\", this.handleMessage);\r\n        this.props.GET_FEEDS();\r\n        this.countAllPage()\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        if (!this.props.manageFeeds?.loading && !this.props.wallsLoader && !this.props.manageFeeds?.feeds?.length) {\r\n            const wallId = localStorage.getItem('wallId');\r\n            if (wallId) {\r\n                this.props.navigate(`/content/addfeed/${wallId}`);\r\n            }\r\n        }\r\n        else if (this.props.manageFeeds?.feeds?.length == 1) {\r\n            const { id, networkId } = this.props.manageFeeds?.feeds[0]\r\n            if (id == 0 && networkId == 0) {\r\n                const wallId = localStorage.getItem('wallId');\r\n                if (wallId) this.props.navigate(`/content/addfeed/${wallId}`);\r\n            }\r\n        }\r\n    }\r\n\r\n    changeTotalPost = (e) => { this.setState({ showPost: parseInt(e.target.value), currentPage: 1 }, () => this.countAllPage()) }\r\n\r\n    nextPrev = (no) => { this.setState({ currentPage: no }, () => this.countAllPage()) }\r\n\r\n    countAllPage = () => {\r\n        const { manageFeeds } = this.props;\r\n        const feeds = manageFeeds?.feeds\r\n        this.setState({ allFeeds: feeds, totalPage: Math.ceil((feeds && feeds.length > 0 ? feeds.length : 0) / this.state.showPost) });\r\n    }\r\n\r\n\r\n    changeStatus = (feedId, status, action) => {\r\n        this.props.ACTION_FEED_STATUS(feedId, status, action, this.onSuccessUpdateRedux)\r\n    }\r\n\r\n\r\n    changeAccount = (id, feedId) => {\r\n        this.props.ACTION_UPDATE_SOCIAL_ACCOUNT(id, feedId, this.onSuccessUpdateRedux)\r\n    }\r\n    onSuccessUpdateRedux = (val) => {\r\n        this.props.getModeration();\r\n        this.countAllPage()\r\n        if (val == 'account') this.setState({ accountChanged: !this.state.accountChanged })\r\n    }\r\n\r\n    onFeedDelete = (feedId, networkId) => {\r\n        Swal.fire({\r\n            icon: 'warning',\r\n            title: 'Are you sure?',\r\n            showCloseButton: true,\r\n            showCancelButton: true,\r\n            focusConfirm: true,\r\n            confirmButtonText: 'Yes',\r\n            confirmButtonAriaLabel: 'Yes',\r\n            cancelButtonText: 'No',\r\n            cancelButtonAriaLabel: 'Thumbs down'\r\n        }).then((result) => {\r\n            if (result.value) {\r\n                this.props.ACTION_DELETE_FEED(feedId, networkId, this.onDeleteUpdateRedux(networkId))\r\n            }\r\n        });\r\n    }\r\n\r\n    onDeleteUpdateRedux = (networkId) => {\r\n        this.props.getModeration();\r\n        this.countAllPage()\r\n    }\r\n\r\n    handleMessage = async (event) => {\r\n        try {\r\n            const { GET_FEEDS } = this.props;\r\n            const response = JSON.parse(event.data);\r\n            const { code } = response;\r\n            const networkId = localStorage.getItem('networkId');\r\n            const type = localStorage.getItem('connectionType');\r\n            if (event.origin.includes(\"tagshop.ai\") || event.origin.includes(\"localhost\")) {\r\n                if (type == 'manageFeed') {\r\n                    if (code) await addAccountFromId(parseInt(networkId), code, GET_FEEDS);\r\n                }\r\n            }\r\n        } catch (error) {\r\n\r\n        }\r\n    };\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener(\"message\", this.handleMessage, { signal: this.controller.signal });\r\n        channel.removeEventListener(\"message\", this.handleMessage);\r\n        this.controller.abort()\r\n    }\r\n\r\n    getPagination = () => {\r\n        const { currentPage, totalPage } = this.state;\r\n        const pagination = [];\r\n\r\n        if (totalPage <= 5) {\r\n            for (let i = 1; i <= totalPage; i++) {\r\n                pagination.push(i);\r\n            }\r\n        } else {\r\n            if (currentPage <= 3) {\r\n                pagination.push(1, 2, 3, 4, '...', totalPage);\r\n            } else if (currentPage > totalPage - 3) {\r\n                pagination.push(1, '...', totalPage - 3, totalPage - 2, totalPage - 1, totalPage);\r\n            } else {\r\n                pagination.push(1, '...', currentPage - 1, currentPage, currentPage + 1, '...', totalPage);\r\n            }\r\n        }\r\n\r\n        return pagination;\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        const { currentPage, showPost, totalPage, allFeeds, accountChanged } = this.state;\r\n        const { manageFeeds, wallsLoader, allWalls, navigate } = this.props;\r\n        const pagination = this.getPagination();\r\n\r\n        const startIdx = (currentPage - 1) * showPost;\r\n        const currentFeeds = allFeeds > 0 ? allFeeds.slice(startIdx, startIdx + showPost) : [];\r\n\r\n        return <div className='d-flex flex-column flex-column-fluid full-content'>\r\n                    <div className=\"subheader\">\r\n                        <Container fluid>\r\n                            <div className='f-between'>\r\n                                <h1 className=\"me-2 h4 my-3\">Feeds</h1>\r\n                            </div>\r\n                        </Container>\r\n                </div>\r\n                <Container fluid>\r\n                    <Card>\r\n                        <Card.Header className='f-between d-flex'>\r\n                            <h2 className=\"me-2 h4 my-3\">Manage Feeds</h2>\r\n                            <div className=\"f-center\">\r\n                            {!manageFeeds.loading && !wallsLoader ?\r\n                                allWalls && allWalls.length > 0 ?\r\n                                <button onClick={() => checkPermission('networkManager', 'manageFeed', true) ? navigate(`/content/addfeed/${localStorage.getItem('wallId')}`) : {}} className=\"btn btn-primary btn-sm text-nowrap btn-min-w\">\r\n                                    <FontAwesomeIcon icon={'plus'} iconClass=\"me-1\" />\r\n                                    Add Feed\r\n                                </button>\r\n                                :\r\n                                <Button size='sm' className='text-nowrap btn-min-w' onClick={() => checkPermission('contentGallery', 'createGallery', true) ? this.props.TOGGLE_ADD_GALLERY(true) : {}}>\r\n                                    <FontAwesomeIcon icon={'plus'} iconClass=\"me-1\" />\r\n                                    Add Gallery</Button> : null}\r\n                            </div>\r\n                        </Card.Header>\r\n                        <Card.Body>\r\n                            <div className=\"mb-xl-5 mb-4 d-flex flex-column justify-content-between p-3 position-relative\" style={{ minHeight: 'calc(100vh - 260px)' }}>\r\n                                {!manageFeeds.loading && !wallsLoader ?\r\n                                    allWalls && allWalls.length > 0 ?\r\n                                        <div className='table-responsive' style={{ minHeight: 'calc(100vh - 285px)' }}>\r\n                                            <Table size='lg' className='pb-10'>\r\n                                                <thead className=\"thead-light\">\r\n                                                    <tr>\r\n                                                        {\r\n                                                            tableHeaders.map((header, i) => <th key={i} className={`fw-bold text-nowrap ${header?.align || ''}`} style={{ minWidth: header.minWidth }}>{header.name}</th>)\r\n                                                        }\r\n                                                    </tr>\r\n                                                </thead>\r\n                                                <tbody>\r\n                                                    {manageFeeds?.feeds && manageFeeds?.feeds.length ? manageFeeds?.feeds.map((feed) => {\r\n                                                        return !(feed?.id == 0 && feed?.networkId == 0) ? <FeedsList feed={feed} changeStatus={this.changeStatus} onFeedDelete={this.onFeedDelete} changeAccount={this.changeAccount} key={`tr_${feed.id}`} accountChanged={accountChanged} /> : null\r\n                                                    }) : null}\r\n                                                </tbody>\r\n                                            </Table>\r\n                                        </div>\r\n                                        :\r\n                                        <div className=\"f-center\" style={{ minHeight: 'calc(100vh - 225px)' }}>\r\n                                            <EmptyWithIcon title={'Create a Gallery, to add feed! ⌛'} desc={'Oops! Looks like you have deleted your gallery, create one by simply clicking on the button below.'} icon={'media'} button={{ action: () => checkPermission('contentGallery', 'createGallery', true)  ? this.props.TOGGLE_ADD_GALLERY(true) : {}, text: 'Create Gallery' }} isFullScreen={false} />\r\n                                        </div>\r\n                                    :\r\n                                    <div style={{ minHeight: 'calc(100vh - 500px)' }}>\r\n                                        <Loader />\r\n                                    </div>\r\n                                }\r\n                            </div>\r\n                        </Card.Body>\r\n                        {/* <Card.Footer>\r\n                            <div className='d-flex justify-content-between align-items-center'>\r\n                                <div className=\"my-2 text-muted\">\r\n                                    Showing {startIdx + 1} to {startIdx + currentFeeds.length} of {manageFeeds?.feeds ? manageFeeds?.feeds.length : 0} entries\r\n                                </div>\r\n                                <div className=\"f-center\">\r\n                                    <span className='f-center text-muted fw-medium my-1'>Show\r\n                                        <Form.Select className='mx-2' onChange={e => this.changeTotalPost(e)}>\r\n                                            <option value=\"5\" selected={showPost === 5}>5</option>\r\n                                            <option value=\"10\" selected={showPost === 10}>10</option>\r\n                                            <option value=\"15\" selected={showPost === 15}>15</option>\r\n                                            <option value=\"20\" selected={showPost === 20}>20</option>\r\n                                            <option value=\"30\" selected={showPost === 30}>30</option>\r\n                                            <option value=\"40\" selected={showPost === 40}>40</option>\r\n                                        </Form.Select>\r\n                                        entries\r\n                                    </span>\r\n                                    \r\n                                    {totalPage > 1 && (\r\n                                        <ul className=\"pagination pagination-sm my-1 ms-2\">\r\n                                            <li className=\"page-item\">\r\n                                                <span className={`page-link ${currentPage == 1 ? ' disabled' : ' cursor-pointer'}`} onClick={() => { this.nextPrev(currentPage - 1) }}>\r\n                                                    <FontAwesomeIcon icon={'angle-left'} />\r\n                                                </span>\r\n                                            </li>\r\n                                            {pagination.map((page, i) => (\r\n                                                page === '...' ? (\r\n                                                    <li className=\"page-item\" key={i}>\r\n                                                        <span className=\"page-link\">...</span>\r\n                                                    </li>\r\n                                                    ) : (\r\n                                                    <li key={i} className={`page-item ${currentPage === page ? 'active' : ''}`} onClick={() => this.setState({ currentPage: page }, () => this.countAllPage())}>\r\n                                                        <span className=\"page-link\">{page}</span>\r\n                                                    </li>\r\n                                                    )\r\n                                            ))}\r\n                                            <li className=\"page-item\">\r\n                                                <span className={`page-link ${currentPage === totalPage ? ' disabled' : ' cursor-pointer'}`} onClick={() => { this.nextPrev(currentPage + 1) }}>\r\n                                                    <FontAwesomeIcon icon={'angle-right'} />\r\n                                                </span>\r\n                                            </li>\r\n                                        </ul>\r\n                                    )}\r\n                                </div>\r\n                            </div>\r\n                        </Card.Footer> */}\r\n                    </Card>\r\n                </Container>\r\n            </div>\r\n    }\r\n}\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n\r\n        manageFeeds: state.manageFeeds,\r\n        wallsLoader: state?.dashboardData?.wallsLoader,\r\n        allWalls: state?.dashboardData?.dashboarddata?.allWalls,\r\n\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        GET_FEEDS: () => dispatch(GET_FEEDS()),\r\n        ACTION_DELETE_FEED: (feedId, networkId, callback) => dispatch(ACTION_DELETE_FEED(feedId, networkId, callback)),\r\n        ACTION_FEED_STATUS: (feedId, status, action, callback) => dispatch(ACTION_FEED_STATUS(feedId, status, action, callback)),\r\n        ACTION_UPDATE_SOCIAL_ACCOUNT: (accountId, feedId, callback) => dispatch(ACTION_UPDATE_SOCIAL_ACCOUNT(accountId, feedId, callback)),\r\n        getModeration: () => dispatch(getModeration()),\r\n        TOGGLE_ADD_GALLERY: (status) => dispatch({ type: TOGGLE_ADD_GALLERY, payload: status }),\r\n        SNAPUP_DETAILS_ACTION: (callback) => dispatch(SNAPUP_DETAILS_ACTION(callback)),\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(Managefeeds))"],"names":["Component","FeedsList","constructor","props","super","getConnectAccount","accountList","connectedAccount","this","feed","connectedAcc","length","filter","account","id","onModerationSwitch","status","changeStatus","Number","setState","moderation","onFeedStatusSwitch","connectAccount","obj","item","networkId","name","networkName","toLowerCase","localStorage","setItem","showAddAccounntAlert","state","componentDidMount","componentDidUpdate","prevProps","accountChanged","render","onFeedDelete","changeAccount","filterId","isBtntext","_jsxs","children","_jsx","className","src","baseUrl","GET_NETWORK_ICON","height","width","alt","HTMLReactParser","socialLink","OverlayTrigger","placement","overlay","Tooltip","tooltip","Link","to","accountId","target","FontAwesomeIcon","icon","includes","Dropdown","style","minWidth","Toggle","variant","size","Author","imageSize","symbolClass","accountName","profileUrl","profilePicture","maxWidth","Menu","map","Item","onClick","checkPermission","Button","type","postCount","Form","Check","checked","onChange","connect","dispatch","GET_FEEDS","tableHeaders","align","channel","BroadcastChannel","Managefeeds","arguments","controller","AbortController","currentPage","showPost","totalPage","allFeeds","currentPageFeeds","changeTotalPost","e","parseInt","value","countAllPage","nextPrev","no","manageFeeds","feeds","Math","ceil","feedId","action","ACTION_FEED_STATUS","onSuccessUpdateRedux","ACTION_UPDATE_SOCIAL_ACCOUNT","val","getModeration","Swal","title","showCloseButton","showCancelButton","focusConfirm","confirmButtonText","confirmButtonAriaLabel","cancelButtonText","cancelButtonAriaLabel","then","result","ACTION_DELETE_FEED","onDeleteUpdateRedux","handleMessage","async","response","JSON","parse","event","data","code","getItem","origin","addAccountFromId","error","getPagination","pagination","i","push","window","addEventListener","signal","prevState","_this$props$manageFee","_this$props$manageFee2","_this$props$manageFee3","_this$props$manageFee4","_this$props$manageFee5","loading","wallsLoader","_this$props$manageFee6","wallId","navigate","componentWillUnmount","removeEventListener","abort","allWalls","startIdx","slice","Container","fluid","Card","Header","iconClass","TOGGLE_ADD_GALLERY","Body","minHeight","Loader","Table","header","EmptyWithIcon","desc","button","text","isFullScreen","_state$dashboardData","_state$dashboardData2","_state$dashboardData3","dashboardData","dashboarddata","callback","payload","SNAPUP_DETAILS_ACTION","withRouter"],"sourceRoot":""}