{"version":3,"file":"static/js/4631.ae973206.chunk.js","mappings":"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","sources":["../node_modules/src/.internal/core/elements/Grip.ts","../node_modules/src/.internal/charts/Chart.ts","../node_modules/src/.internal/charts/elements/Bullet.ts","../node_modules/src/.internal/charts/Legend.ts","../node_modules/src/.internal/charts/series/Series.ts","../node_modules/src/.internal/charts/types/SerialChart.ts","../node_modules/src/.internal/plugins/WordCloud/WordCloudSeries.ts","../node_modules/src/.internal/plugins/WordCloud/WordCloud.ts","../node_modules/src/.internal/themes/animated.ts"],"sourcesContent":["/**\r\n * Grip module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Button, IButtonProperties, IButtonAdapters, IButtonEvents } from \"./Button\";\r\nimport { Sprite } from \"../Sprite\";\r\nimport { Align } from \"../defs/Align\";\r\nimport { VerticalAlign } from \"../defs/VerticalAlign\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport { IDisposer } from \"../../core/utils/Disposer\";\r\nimport { registry } from \"../Registry\";\r\nimport { Optional } from \"../utils/Type\";\r\nimport { percent } from \"../utils/Percent\";\r\nimport * as $path from \"../rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Grip]].\r\n */\r\nexport interface IGripProperties extends IButtonProperties {\r\n\tposition: Align | VerticalAlign;\r\n\tautoHideDelay: number;\r\n}\r\n\r\n/**\r\n * Defines events for [[Grip]] for [[Grip]].\r\n */\r\nexport interface IGripEvents extends IButtonEvents { }\r\n\r\n/**\r\n * Defines adapters for [[Grip]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IGripAdapters extends IButtonAdapters, IGripProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a grip element that can be used for scrolling or other things.\r\n *\r\n * @see {@link IGripEvents} for a list of available events\r\n * @see {@link IGripAdapters} for a list of available Adapters\r\n * @since 4.4.0\r\n */\r\nexport class Grip extends Button {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IGripProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IGripAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IGripEvents;\r\n\r\n\t\t/**\r\n\t * Disposer for grip autohide timeout.\r\n\t */\r\n\tprotected _autoHideTimeout: Optional<IDisposer>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"Grip\";\r\n\r\n\t\tconst cs = new InterfaceColorSet();\r\n\r\n\t\t// Set defaults\r\n\t\tthis.layout = \"absolute\";\r\n\r\n\r\n\t\tthis.padding(10, 10, 10, 10);\r\n\t\tthis.margin(3, 3, 3, 3);\r\n\t\tthis.background.fillOpacity = 0.3;\r\n\t\tthis.background.cornerRadius(10, 10, 10, 10);\r\n\r\n\t\t// Create an icon\r\n\t\tlet icon: Sprite = new Sprite();\r\n\t\ticon.element = this.paper.add(\"path\");\r\n\r\n\t\tlet path = $path.moveTo({ x: -6, y: 0 });\r\n\t\tpath += $path.lineTo({ x: 6, y: 0 });\r\n\t\tpath += $path.moveTo({ x: -8, y: -6 });\r\n\t\tpath += $path.lineTo({ x: 0, y: -12 });\r\n\t\tpath += $path.lineTo({ x: 8, y: -6 });\r\n\t\tpath += $path.moveTo({ x: -8, y: 6 });\r\n\t\tpath += $path.lineTo({ x: 0, y: 12 });\r\n\t\tpath += $path.lineTo({ x: 8, y: 6 });\r\n\t\ticon.path = path;\r\n\t\ticon.strokeWidth = 2;\r\n\t\ticon.fillOpacity = 0;\r\n\r\n\t\ticon.pixelPerfect = true;\r\n\t\ticon.padding(0, 4, 0, 4);\r\n\t\ticon.stroke = cs.getFor(\"text\");\r\n\t\ticon.strokeOpacity = 0.7;\r\n\t\ticon.align = \"center\";\r\n\t\ticon.valign = \"middle\";\r\n\t\tthis.icon = icon;\r\n\r\n\t\tthis.label.dispose();\r\n\t\tthis.label = undefined;\r\n\r\n\t\t// Set default position\r\n\t\tthis.position = \"right\";\r\n\r\n\t\t// Set up autohide\r\n\t\tthis.autoHideDelay = 3000;\r\n\t\tthis.events.on(\"shown\", (ev) => {\r\n\t\t\tif (this._autoHideTimeout) {\r\n\t\t\t\tthis._autoHideTimeout.dispose();\r\n\t\t\t}\r\n\t\t\tif (this.autoHideDelay) {\r\n\t\t\t\tthis._autoHideTimeout = this.setTimeout(() => {\r\n\t\t\t\t\tthis.hide();\r\n\t\t\t\t}, this.autoHideDelay);\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tthis.events.on(\"down\", (ev) => {\r\n\t\t\tif (this._autoHideTimeout) {\r\n\t\t\t\tthis._autoHideTimeout.dispose();\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tthis.events.on(\"out\", (ev) => {\r\n\t\t\tif (this.autoHideDelay) {\r\n\t\t\t\tthis._autoHideTimeout = this.setTimeout(() => {\r\n\t\t\t\t\tthis.hide();\r\n\t\t\t\t}, this.autoHideDelay);\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets position of the grip.\r\n\t *\r\n\t * Available options: \"left\", \"right\" (default), \"top\", \"bottom\".\r\n\t *\r\n\t * @param  value  Position\r\n\t */\r\n\tpublic set position(value: Align | VerticalAlign) {\r\n\t\tif (this.setPropertyValue(\"position\", value)) {\r\n\t\t\tswitch(value) {\r\n\t\t\t\tcase \"left\":\r\n\t\t\t\t\tthis.align = \"left\";\r\n\t\t\t\t\tthis.valign = \"middle\";\r\n\t\t\t\t\tthis.horizontalCenter = \"left\";\r\n\t\t\t\t\tthis.verticalCenter = \"middle\";\r\n\t\t\t\t\tthis.icon.rotation = 0;\r\n\t\t\t\t\tthis.width = undefined;\r\n\t\t\t\t\tthis.height = percent(30);\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"right\":\r\n\t\t\t\t\tthis.align = \"right\";\r\n\t\t\t\t\tthis.valign = \"middle\";\r\n\t\t\t\t\tthis.horizontalCenter = \"right\";\r\n\t\t\t\t\tthis.verticalCenter = \"middle\";\r\n\t\t\t\t\tthis.icon.rotation = 0;\r\n\t\t\t\t\tthis.width = undefined;\r\n\t\t\t\t\tthis.height = percent(30);\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"top\":\r\n\t\t\t\t\tthis.align = \"center\";\r\n\t\t\t\t\tthis.valign = \"top\";\r\n\t\t\t\t\tthis.horizontalCenter = \"middle\";\r\n\t\t\t\t\tthis.verticalCenter = \"top\";\r\n\t\t\t\t\tthis.icon.rotation = 90;\r\n\t\t\t\t\tthis.width = percent(30);\r\n\t\t\t\t\tthis.height = undefined;\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"bottom\":\r\n\t\t\t\t\tthis.align = \"center\";\r\n\t\t\t\t\tthis.valign = \"bottom\";\r\n\t\t\t\t\tthis.horizontalCenter = \"middle\";\r\n\t\t\t\t\tthis.verticalCenter = \"bottom\";\r\n\t\t\t\t\tthis.icon.rotation = 90;\r\n\t\t\t\t\tthis.width = percent(30);\r\n\t\t\t\t\tthis.height = undefined;\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tthis.align = \"center\";\r\n\t\t\t\t\tthis.valign = \"middle\";\r\n\t\t\t\t\tthis.horizontalCenter = \"middle\";\r\n\t\t\t\t\tthis.verticalCenter = \"middle\";\r\n\t\t\t\t\tthis.icon.rotation = 90;\r\n\t\t\t\t\tthis.width = percent(30);\r\n\t\t\t\t\tthis.height = undefined;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @return Position\r\n\t */\r\n\tpublic get position(): Align | VerticalAlign {\r\n\t\treturn this.getPropertyValue(\"position\");\r\n\t}\r\n\r\n\t/**\r\n\t * Number of milliseconds to show grip until it is hidden automatically.\r\n\t *\r\n\t * @default 3000\r\n\t * @param  value  Delay\r\n\t */\r\n\tpublic set autoHideDelay(value: number) {\r\n\t\tthis.setPropertyValue(\"autoHideDelay\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Delay\r\n\t */\r\n\tpublic get autoHideDelay(): number {\r\n\t\treturn this.getPropertyValue(\"autoHideDelay\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Grip\"] = Grip;\r\n","/**\r\n * [[Chart]] class provides base functionality for all chart types to inherit.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { registry } from \"../core/Registry\";\r\nimport { Component, IComponentProperties, IComponentDataFields, IComponentEvents, IComponentAdapters } from \"../core/Component\";\r\nimport { MutableValueDisposer, Disposer } from \"../core/utils/Disposer\";\r\nimport { ListTemplate, IListEvents, ListDisposer } from \"../core/utils/List\";\r\nimport { Container } from \"../core/Container\";\r\nimport { Label } from \"../core/elements/Label\";\r\nimport { Grip } from \"../core/elements/Grip\";\r\nimport { Legend } from \"../charts/Legend\";\r\nimport { DataItem } from \"../core/DataItem\";\r\nimport { percent } from \"../core/utils/Percent\";\r\nimport * as $iter from \"../core/utils/Iterator\";\r\nimport * as $type from \"../core/utils/Type\";\r\nimport { defaultRules, ResponsiveBreakpoints } from \"../core/utils/Responsive\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[Chart]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class ChartDataItem extends DataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: Chart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ChartDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[Chart]].\r\n */\r\nexport interface IChartDataFields extends IComponentDataFields { }\r\n\r\n/**\r\n * Defines properties for [[Chart]].\r\n */\r\nexport interface IChartProperties extends IComponentProperties { }\r\n\r\n/**\r\n * Defines events for [[Chart]].\r\n */\r\nexport interface IChartEvents extends IComponentEvents { }\r\n\r\n/**\r\n * Defines adapters for [[Chart]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IChartAdapters extends IComponentAdapters, IChartProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A base class for all Charts.\r\n *\r\n * @see {@link IChartEvents} for a list of available Events\r\n * @see {@link IChartAdapters} for a list of available Adapters\r\n */\r\nexport class Chart extends Component {\r\n\r\n\t/**\r\n\t * Available data fields.\r\n\t */\r\n\tpublic _dataFields: IChartDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IChartProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IChartAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IChartEvents;\r\n\r\n\t/**\r\n\t * A List of chart titles.\r\n\t */\r\n\tpublic titles: ListTemplate<Label>;\r\n\r\n\t/**\r\n\t * Container that holds the chart itself.\r\n\t */\r\n\tpublic chartContainer: Container;\r\n\r\n\t/**\r\n\t * A reference to a container that holds both the chart and the legend.\r\n\t */\r\n\tpublic chartAndLegendContainer: Container;\r\n\r\n\t/**\r\n\t * A reference to chart's [[Legend]].\r\n\t * @ignore\r\n\t */\r\n\tprotected _legend = new MutableValueDisposer<Legend>();\r\n\r\n\t/**\r\n\t * Instance of the grip element.\r\n\t */\r\n\tprotected _dragGrip: $type.Optional<Grip>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\r\n\t\tif (this.constructor === Chart) {\r\n\t\t\tthrow new Error(\"'Chart' cannot be instantiated directly. Please use a specific chart type.\");\r\n\t\t}\r\n\t\tthis.className = \"Chart\";\r\n\r\n\t\t// Create a list of titles\r\n\t\tconst template = new Label();\r\n\t\tthis.titles = new ListTemplate<Label>(template);\r\n\t\tthis._disposers.push(new ListDisposer(this.titles));\r\n\t\tthis._disposers.push(template);\r\n\r\n\t\t// Chart component is also a container. it holds _chartAndLegendCont and titles\r\n\t\tthis.width = percent(100);\r\n\t\tthis.height = percent(100);\r\n\t\tthis.layout = \"vertical\";\r\n\r\n\t\t// Chart and legend\r\n\t\tlet chartAndLegendContainer: Container = this.createChild(Container);\r\n\t\tchartAndLegendContainer.shouldClone = false;\r\n\t\tchartAndLegendContainer.layout = \"vertical\";\r\n\t\tchartAndLegendContainer.width = percent(100);\r\n\t\tchartAndLegendContainer.height = percent(100);\r\n\t\tthis.chartAndLegendContainer = chartAndLegendContainer;\r\n\r\n\t\t// Chart container holds all the elements of a chart, extept titles and legend\r\n\t\tlet chartContainer = chartAndLegendContainer.createChild(Container);\r\n\t\tchartContainer.shouldClone = false;\r\n\t\tchartContainer.width = percent(100);\r\n\t\tchartContainer.height = percent(100);\r\n\t\tthis.chartContainer = chartContainer;\r\n\r\n\t\tthis.showOnInit = true;\r\n\r\n\t\tthis._disposers.push(this._legend);\r\n\r\n\t\t// Add title list events to apply certain formatting options and to make\r\n\t\t// the chart reference them as accessible screen reader labels\r\n\t\tthis.titles.events.on(\"inserted\", (label) => {\r\n\t\t\tthis.processTitle(label);\r\n\t\t\tthis.updateReaderTitleReferences();\r\n\t\t}, this, false);\r\n\t\tthis.titles.events.on(\"removed\", (label) => {\r\n\t\t\tthis.updateReaderTitleReferences();\r\n\t\t}, this, false);\r\n\r\n\t\t// Accessibility\r\n\t\t// It seems we can't set focusable on the whole chart because it seems to\r\n\t\t// mess up the whole focus event system - getting a focus on an inside\r\n\t\t// object also trigger focus on parent\r\n\t\t//this.focusable = true;\r\n\t\tthis.role = \"region\";\r\n\r\n\t\tthis.defaultState.transitionDuration = 1;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Chart\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Initiates drawing of the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic draw(): void {\r\n\t\tthis.fixLayout();\r\n\t\tsuper.draw();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates legend's hierarchy based on the position.\r\n\t */\r\n\tprotected fixLayout(): void {\r\n\t\tlet legend = this.legend;\r\n\t\tif (legend) {\r\n\t\t\tlet chartAndLegendContainer = this.chartAndLegendContainer;\r\n\t\t\tlet chartContainer = this.chartContainer;\r\n\t\t\tchartContainer.x = undefined;\r\n\t\t\tchartContainer.y = undefined;\r\n\t\t\tif (legend.position != \"absolute\") {\r\n\t\t\t\tlegend.x = undefined;\r\n\t\t\t\tlegend.y = undefined;\r\n\t\t\t}\r\n\r\n\t\t\tswitch (legend.position) {\r\n\t\t\t\tcase \"left\":\r\n\t\t\t\t\tchartAndLegendContainer.layout = \"horizontal\";\r\n\t\t\t\t\tlegend.toBack();\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"right\":\r\n\t\t\t\t\tchartAndLegendContainer.layout = \"horizontal\";\r\n\t\t\t\t\tlegend.toFront();\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"top\":\r\n\t\t\t\t\tchartAndLegendContainer.layout = \"vertical\";\r\n\t\t\t\t\tlegend.toBack();\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"bottom\":\r\n\t\t\t\t\tchartAndLegendContainer.layout = \"vertical\";\r\n\t\t\t\t\tlegend.toFront();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"absolute\":\r\n\t\t\t\t\tlegend.isMeasured = false;\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Setups the legend to use the chart's data.\r\n\t */\r\n\tprotected feedLegend(): void {\r\n\r\n\t\t// Nothing here. This method is provided only as a \"placeholder\" for\r\n\t\t// extending classes to override\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Adds a new title to the chart when it is inserted into chart's titles\r\n\t * list.\r\n\t * @param event  An event object which is triggered when inserting into titles list\r\n\t * @return Label object\r\n\t */\r\n\tprotected processTitle(event: IListEvents<Label>[\"inserted\"]): Label {\r\n\t\tlet title: Label = event.newValue;\r\n\t\ttitle.parent = this;\r\n\t\ttitle.toBack();\r\n\t\ttitle.shouldClone = false;\r\n\t\ttitle.align = \"center\";\r\n\r\n\t\t// Need to explicitly apply the `id` attribute so it can be referenced by\r\n\t\t// `aria-labelledby`\r\n\t\ttitle.uidAttr();\r\n\t\treturn title;\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if chart has any title elements. If it does, we will use them in an\r\n\t * `aria-labelledby` attribute so that screen readers can use them to properly\r\n\t * describe the chart when it is focused or hovered.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateReaderTitleReferences(): void {\r\n\t\tif (this.titles.length) {\r\n\t\t\tlet titleIds: Array<string> = [];\r\n\t\t\t$iter.each(this.titles.iterator(), (title) => {\r\n\t\t\t\ttitleIds.push(title.uid);\r\n\t\t\t});\r\n\t\t\tthis.setSVGAttribute({ \"aria-labelledby\": titleIds.join(\" \") });\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.removeSVGAttribute(\"aria-labelledby\");\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Holds the instance of chart's [[Leged]].\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/concepts/legend/} for more information about legends\r\n\t * @param Legend\r\n\t */\r\n\tpublic set legend(legend: Legend) {\r\n\t\tthis.setLegend(legend);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Legend\r\n\t */\r\n\tpublic get legend(): Legend {\r\n\t\treturn this._legend.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Prepares the legend instance for use in this chart.\r\n\t *\r\n\t * @param legend  Legend\r\n\t */\r\n\tprotected setLegend(legend: Legend) {\r\n\t\tif (this._legend.get() !== legend) {\r\n\t\t\tif (legend) {\r\n\t\t\t\t// Set legend options\r\n\t\t\t\tlegend.parent = this.chartAndLegendContainer;\r\n\r\n\t\t\t\tthis._legend.set(legend, legend.events.on(\"propertychanged\", (event) => {\r\n\t\t\t\t\tif (event.property == \"position\") {\r\n\t\t\t\t\t\tthis.fixLayout();\r\n\t\t\t\t\t}\r\n\t\t\t\t}, undefined, false));\r\n\r\n\t\t\t\tlegend.addDisposer(new Disposer(() => {\r\n\t\t\t\t\tthis.legend = undefined;\r\n\t\t\t\t}))\r\n\r\n\t\t\t} else {\r\n\t\t\t\tthis._legend.reset();\r\n\t\t\t}\r\n\r\n\t\t\tthis.feedLegend();\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Destroys this object and all related data.\r\n\t */\r\n\tpublic dispose() {\r\n\t\t// otherwise there might be some errors when disposing chart which was just inited\r\n\t\tif (this.legend) {\r\n\t\t\tthis.legend.dispose();\r\n\t\t}\r\n\t\tsuper.dispose();\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Set up legend\r\n\t\t\tif ($type.hasValue(config.legend) && !$type.hasValue(config.legend.type)) {\r\n\t\t\t\tconfig.legend.type = \"Legend\";\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all properties from another instance of [[Series]].\r\n\t *\r\n\t * @param source  Source series\r\n\t */\r\n\tpublic copyFrom(source: this) {\r\n\t\tthis.titles.copyFrom(source.titles);\r\n\t\tthis.chartContainer.copyFrom(source.chartContainer);\r\n\t\tif (source.legend) {\r\n\t\t\tthis.legend = source.legend.clone();\r\n\t\t\tthis.legend.removeChildren();\r\n\t\t}\r\n\t\tsuper.copyFrom(source);\r\n\t}\r\n\r\n\t/**\r\n\t * An instance of [[Grip]] which serves as a grip point which appears on\r\n\t * touch and allows scrolling whole page even if chart is occupying the\r\n\t * whole of the screen and would otherwise prevent scrolling.\r\n\t *\r\n\t * @since 4.4.0\r\n\t * @see {@link https://www.amcharts.com/docs/v4/concepts/touch/} For more information.\r\n\t * @param  value  Grip\r\n\t */\r\n\tpublic set dragGrip(value: Grip) {\r\n\t\tthis._dragGrip = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Grip\r\n\t */\r\n\tpublic get dragGrip(): Grip {\r\n\t\tif (!this._dragGrip) {\r\n\t\t\tlet grip = this.tooltipContainer.createChild(Grip);\r\n\t\t\tgrip.align = \"right\";\r\n\t\t\tgrip.valign = \"middle\";\r\n\t\t\tgrip.hide(0);\r\n\r\n\t\t\tgrip.events.on(\"down\", (ev) => {\r\n\t\t\t\tif (ev.touch) {\r\n\t\t\t\t\tthis.interactionsEnabled = false;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tgrip.events.on(\"up\", (ev) => {\r\n\t\t\t\tthis.interactionsEnabled = true;\r\n\t\t\t});\r\n\r\n\t\t\tthis.events.on(\"down\", (ev) => {\r\n\t\t\t\tif (ev.touch) {\r\n\t\t\t\t\tgrip.show();\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tthis._dragGrip = grip;\r\n\t\t}\r\n\t\treturn this._dragGrip;\r\n\t}\r\n\r\n\tpublic set focusable(value: boolean) {\r\n\t\tthis.parent.focusable = value;\r\n\t}\r\n\r\n\tpublic get focusable(): boolean {\r\n\t\treturn this.parent.focusable;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Chart\"] = Chart;\r\n\r\n\r\n\r\n/**\r\n * Add default responsive rules\r\n */\r\n\r\n/**\r\n * Reduce horizontal margins\r\n */\r\ndefaultRules.push({\r\n\trelevant: ResponsiveBreakpoints.widthXS,\r\n\tstate: function(target, stateId) {\r\n\t\tif (target instanceof Chart) {\r\n\t\t\tlet state = target.states.create(stateId);\r\n\t\t\tif (target.pixelPaddingLeft > 10) {\r\n\t\t\t\tstate.properties.paddingLeft = 10;\r\n\t\t\t}\r\n\t\t\tif (target.pixelPaddingRight > 10) {\r\n\t\t\t\tstate.properties.paddingRight = 10;\r\n\t\t\t}\r\n\t\t\treturn state;\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\t}\r\n});\r\n\r\n/**\r\n * Reduce vertical margins\r\n */\r\ndefaultRules.push({\r\n\trelevant: ResponsiveBreakpoints.heightXS,\r\n\tstate: function(target, stateId) {\r\n\t\tif (target instanceof Chart) {\r\n\t\t\tlet state = target.states.create(stateId);\r\n\t\t\tif (target.pixelPaddingTop > 10) {\r\n\t\t\t\tstate.properties.paddingTop = 10;\r\n\t\t\t}\r\n\t\t\tif (target.pixelPaddingBottom > 10) {\r\n\t\t\t\tstate.properties.paddingBottom = 10;\r\n\t\t\t}\r\n\t\t\treturn state;\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\t}\r\n});\r\n\r\n/**\r\n * Remove horizontal padding\r\n */\r\ndefaultRules.push({\r\n\trelevant: ResponsiveBreakpoints.widthXXS,\r\n\tstate: function(target, stateId) {\r\n\t\tif (target instanceof Chart) {\r\n\t\t\tlet state = target.states.create(stateId);\r\n\t\t\tstate.properties.paddingLeft = 0;\r\n\t\t\tstate.properties.paddingRight = 0;\r\n\t\t\treturn state;\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\t}\r\n});\r\n\r\n/**\r\n * Remove vertical padding\r\n */\r\ndefaultRules.push({\r\n\trelevant: ResponsiveBreakpoints.heightXXS,\r\n\tstate: function(target, stateId) {\r\n\t\tif (target instanceof Chart) {\r\n\t\t\tlet state = target.states.create(stateId);\r\n\t\t\tstate.properties.paddingTop = 0;\r\n\t\t\tstate.properties.paddingBottom = 0;\r\n\t\t\treturn state;\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\t}\r\n});\r\n","/**\r\n * Module that defines everything related to building bullets.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { defaultRules, ResponsiveBreakpoints } from \"../../core/utils/Responsive\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Bullet]].\r\n */\r\nexport interface IBulletProperties extends IContainerProperties {\r\n\r\n\t/**\r\n\t * Relative horizontal location within cell. (0-1)\r\n\t */\r\n\tlocationX?: number;\r\n\r\n\t/**\r\n\t * Relative vertical location within cell. (0-1)\r\n\t */\r\n\tlocationY?: number;\r\n\r\n\t/**\r\n\t * Specifies if bullet needs to be redrawn if the underlying data changes.\r\n\t */\r\n\tisDynamic?: boolean;\r\n\r\n\t/**\r\n\t * [string description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\txField?: string;\r\n\r\n\t/**\r\n\t * [string description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tyField?: string;\r\n\r\n\t/**\r\n\t * Defines if this bullet should be copied to legend marker\r\n\t */\r\n\tcopyToLegendMarker?: boolean;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[Bullet]].\r\n */\r\nexport interface IBulletEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[Bullet]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IBulletAdapters extends IContainerAdapters, IBulletProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Class used to creates bullets.\r\n *\r\n * @see {@link IBulletEvents} for a list of available events\r\n * @see {@link IBulletAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nexport class Bullet extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IBulletProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IBulletAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IBulletEvents;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"Bullet\";\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.tooltipX = 0;\r\n\t\tthis.tooltipY = 0;\r\n\t\tthis.layout = \"none\";\r\n\r\n\t\tthis.applyOnClones = true;\r\n\r\n\t\tthis.copyToLegendMarker = true;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Relative horizontal location within cell. (0-1)\r\n\t *\r\n\t * @param value  Location (0-1)\r\n\t */\r\n\tpublic set locationX(value: number) {\r\n\t\tif(this.setPropertyValue(\"locationX\", value)){\r\n\t\t\tlet dataItem = this.dataItem\r\n\t\t\tif(dataItem && dataItem.component){\r\n\t\t\t\tdataItem.component.invalidate();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Location (0-1)\r\n\t */\r\n\tpublic get locationX(): number {\r\n\t\treturn this.getPropertyValue(\"locationX\");\r\n\t}\r\n\r\n\t/**\r\n\t * Relative vertical location within cell. (0-1)\r\n\t *\r\n\t * @param value  Location (0-1)\r\n\t */\r\n\tpublic set locationY(value: number) {\r\n\t\tif(this.setPropertyValue(\"locationY\", value)){\r\n\t\t\tlet dataItem = this.dataItem\r\n\t\t\tif(dataItem && dataItem.component){\r\n\t\t\t\tdataItem.component.invalidate();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Location (0-1)\r\n\t */\r\n\tpublic get locationY(): number {\r\n\t\treturn this.getPropertyValue(\"locationY\");\r\n\t}\r\n\r\n\t/**\r\n\t * [xField description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param value  [description]\r\n\t */\r\n\tpublic set xField(value: string) {\r\n\t\tthis.setPropertyValue(\"xField\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return [description]\r\n\t */\r\n\tpublic get xField(): string {\r\n\t\treturn this.getPropertyValue(\"xField\");\r\n\t}\r\n\r\n\t/**\r\n\t * [yField description]\r\n\t *\r\n\t * Description\r\n\t * @param value  [description]\r\n\t */\r\n\tpublic set yField(value: string) {\r\n\t\tthis.setPropertyValue(\"yField\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return [description]\r\n\t */\r\n\tpublic get yField(): string {\r\n\t\treturn this.getPropertyValue(\"yField\");\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates if the bullet is \"dynamic\".\r\n\t *\r\n\t * In most cases the bullets remain the same, even if the underlying data\r\n\t * changes.\r\n\t *\r\n\t * However, in cases where bullet also displays a label, or its size depends\r\n\t * on data, it also needs to be redrawn when the underlying data changes.\r\n\t *\r\n\t * Only those bullets that have set `isDynamic = true` will be redrawn each\r\n\t * time data changes. Regular bullets will be reused as they are.\r\n\t *\r\n\t * @default false\r\n\t * @param value  Redraw on data change?\r\n\t */\r\n\tpublic set isDynamic(value: boolean) {\r\n\t\tthis.setPropertyValue(\"isDynamic\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Redraw on data change?\r\n\t */\r\n\tpublic get isDynamic(): boolean {\r\n\t\treturn this.getPropertyValue(\"isDynamic\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Indicates if the bullet should be copied to legend marker\r\n\t *\r\n\t * @default false\r\n\t * @param value  Redraw on data change?\r\n\t */\r\n\tpublic set copyToLegendMarker(value: boolean) {\r\n\t\tthis.setPropertyValue(\"copyToLegendMarker\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Redraw on data change?\r\n\t */\r\n\tpublic get copyToLegendMarker(): boolean {\r\n\t\treturn this.getPropertyValue(\"copyToLegendMarker\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Bullet\"] = Bullet;\r\n\r\n\r\n/**\r\n * Add default responsive rules\r\n */\r\n\r\n/**\r\n * Hide bullets\r\n */\r\ndefaultRules.push({\r\n\trelevant: ResponsiveBreakpoints.isXS,\r\n\tstate: function(target, stateId) {\r\n\t\tif (target instanceof Bullet) {\r\n\t\t\tlet state = target.states.create(stateId);\r\n\t\t\tstate.properties.disabled = true;\r\n\t\t\treturn state;\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\t}\r\n});\r\n","/**\r\n * Legend-related functionality.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Component, IComponentProperties, IComponentDataFields, IComponentAdapters, IComponentEvents } from \"../core/Component\";\r\nimport { DataItem, IDataItemEvents } from \"../core/DataItem\";\r\nimport { ListTemplate, ListDisposer } from \"../core/utils/List\";\r\nimport { RoundedRectangle } from \"../core/elements/RoundedRectangle\";\r\nimport { Container } from \"../core/Container\";\r\nimport { Label } from \"../core/elements/Label\";\r\nimport { Optional } from \"../core/utils/Type\";\r\nimport { Preloader } from \"../core/elements/Preloader\";\r\nimport { keyboard } from \"../core/utils/Keyboard\";\r\nimport { registry } from \"../core/Registry\";\r\nimport { getInteraction } from \"../core/interaction/Interaction\";\r\nimport { percent, Percent } from \"../core/utils/Percent\";\r\nimport { InterfaceColorSet } from \"../core/utils/InterfaceColorSet\";\r\nimport { Color } from \"../core/utils/Color\";\r\nimport { RadialGradient } from \"../core/rendering/fills/RadialGradient\";\r\nimport { LinearGradient } from \"../core/rendering/fills/LinearGradient\";\r\nimport { Pattern } from \"../core/rendering/fills/Pattern\";\r\nimport * as $utils from \"../core/utils/Utils\";\r\nimport * as $type from \"../core/utils/Type\";\r\nimport * as $math from \"../core/utils/Math\";\r\nimport { Sprite, ISpriteEvents, AMEvent } from \"../core/Sprite\";\r\nimport { Disposer, IDisposer } from \"../core/utils/Disposer\";\r\nimport { MouseCursorStyle } from \"../core/interaction/Mouse\";\r\nimport { defaultRules, ResponsiveBreakpoints } from \"../core/utils/Responsive\";\r\nimport { Scrollbar } from \"../core/elements/Scrollbar\";\r\n\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[Legend]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class LegendDataItem extends DataItem {\r\n\r\n\t/**\r\n\t * A container data item's elements will be placed in.\r\n\t */\r\n\tprotected _itemContainer: Container;\r\n\r\n\t/**\r\n\t * A [[Label]] element for the item label.\r\n\t */\r\n\tprotected _label: Label;\r\n\r\n\t/**\r\n\t * A [[Container]] for legend item marker.\r\n\t */\r\n\tprotected _marker: Container;\r\n\r\n\t/**\r\n\t * A [[Label]] element for the value label.\r\n\t */\r\n\tprotected _valueLabel: Label;\r\n\r\n\t/**\r\n\t * A data context for legend item.\r\n\t */\r\n\tpublic dataContext: any;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: Legend;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic childrenCreated: boolean = false;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic colorOrig: $type.Optional<Color | Pattern | LinearGradient | RadialGradient>;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"LegendDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * A legend item's [[Label]] element.\r\n\t *\r\n\t * @return Label\r\n\t */\r\n\tpublic get label(): Label {\r\n\t\tif (!this._label) {\r\n\t\t\tlet label = this.component.labels.create();\r\n\t\t\tthis._label = label;\r\n\t\t\tthis.addSprite(label);\r\n\t\t\tthis._disposers.push(label);\r\n\t\t\tlabel.parent = this.itemContainer;\r\n\r\n\t\t\tthis._disposers.push(new Disposer(() => {\r\n\t\t\t\tif ($type.hasValue(this.component)) {\r\n\t\t\t\t\tthis.component.labels.removeValue(label);\r\n\t\t\t\t}\r\n\t\t\t}));\r\n\t\t}\r\n\t\treturn this._label;\r\n\t}\r\n\r\n\t/**\r\n\t * Main color of legend data item.\r\n\t *\r\n\t * This is set by the target element this legend item represents, like\r\n\t * a Series or a Slice.\r\n\t *\r\n\t * It can be used to derive a color in legend's sub-items, like label:\r\n\t *\r\n\t * ```TypeScript\r\n\t * chart.legend.labels.template.text = \"[{color}]{name}[/]\";\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * chart.legend.labels.template.text = \"[{color}]{name}[/]\";\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"legend\": {\r\n\t *     // ...\r\n\t *     \"labels\": {\r\n\t *       \"text\": \"[{color}]{name}[/]\"\r\n\t *     }\r\n\t *   }\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/concepts/legend/#Legend_labels} For more information about configuring legend labels.\r\n\t * @param value  Main color\r\n\t */\r\n\tpublic set color(value: $type.Optional<Color | Pattern | LinearGradient | RadialGradient>) {\r\n\t\tthis.setProperty(\"color\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Main color\r\n\t */\r\n\tpublic get color(): $type.Optional<Color | Pattern | LinearGradient | RadialGradient> {\r\n\t\treturn this.properties.color;\r\n\t}\r\n\r\n\t/**\r\n\t * A legend item's [[Label]] element for \"value label\".\r\n\t *\r\n\t * @return Label\r\n\t */\r\n\tpublic get valueLabel(): Label {\r\n\t\tif (!this._valueLabel) {\r\n\t\t\tlet valueLabel = this.component.valueLabels.create();\r\n\t\t\tthis._valueLabel = valueLabel;\r\n\r\n\t\t\tthis.addSprite(valueLabel);\r\n\t\t\tthis._disposers.push(valueLabel);\r\n\t\t\tvalueLabel.parent = this.itemContainer;\r\n\r\n\t\t\tthis._disposers.push(new Disposer(() => {\r\n\t\t\t\tif ($type.hasValue(this.component)) {\r\n\t\t\t\t\tthis.component.valueLabels.removeValue(valueLabel);\r\n\t\t\t\t}\r\n\t\t\t}));\r\n\t\t}\r\n\t\treturn this._valueLabel;\r\n\t}\r\n\r\n\t/**\r\n\t * A reference to the main [[Container]] that holds legend item's elements:\r\n\t * marker and labels.\r\n\t *\r\n\t * @return Item container\r\n\t */\r\n\tpublic get itemContainer(): Container {\r\n\t\tif (!this._itemContainer) {\r\n\r\n\t\t\tlet component = this.component;\r\n\r\n\t\t\tlet itemContainer = component.itemContainers.create();\r\n\t\t\titemContainer.parent = component;\r\n\r\n\t\t\tthis._itemContainer = itemContainer;\r\n\t\t\tthis.addSprite(itemContainer);\r\n\t\t\tthis._disposers.push(itemContainer);\r\n\r\n\t\t\t// Add click/tap event to toggle item\r\n\t\t\tif (itemContainer.togglable) {\r\n\t\t\t\titemContainer.events.on(\"toggled\", (ev) => {\r\n\t\t\t\t\tcomponent.toggleDataItem(<this>ev.target.dataItem);\r\n\t\t\t\t}, undefined, false);\r\n\t\t\t}\r\n\r\n\t\t\t// Add focus event so that we can track which object is currently in focus\r\n\t\t\t// for keyboard toggling\r\n\t\t\tif (itemContainer.focusable) {\r\n\t\t\t\titemContainer.events.on(\"hit\", (ev) => {\r\n\t\t\t\t\t// We need this here in order to reset focused item when it is clicked\r\n\t\t\t\t\t// normally so that it is not toggled by ENTER afterwards\r\n\t\t\t\t\tcomponent.focusedItem = undefined;\r\n\t\t\t\t}, undefined, false);\r\n\t\t\t\titemContainer.events.on(\"focus\", (ev) => {\r\n\t\t\t\t\tcomponent.focusedItem = <this>ev.target.dataItem;\r\n\t\t\t\t}, undefined, false);\r\n\t\t\t\titemContainer.events.on(\"blur\", (ev) => {\r\n\t\t\t\t\tcomponent.focusedItem = undefined;\r\n\t\t\t\t}, undefined, false);\r\n\t\t\t}\r\n\r\n\t\t\tthis._disposers.push(new Disposer(() => {\r\n\t\t\t\tif ($type.hasValue(this.component)) {\r\n\t\t\t\t\tthis.component.itemContainers.removeValue(itemContainer);\r\n\t\t\t\t}\r\n\t\t\t}));\r\n\r\n\t\t\tif (this.dataContext.uidAttr) {\r\n\t\t\t\titemContainer.readerControls = this.dataContext.uidAttr();\r\n\t\t\t\titemContainer.readerLabelledBy = this.dataContext.uidAttr();\r\n\t\t\t}\r\n\r\n\t\t\tlet sprite = <any>this.dataContext;\r\n\t\t\tif ((sprite instanceof DataItem || sprite instanceof Sprite) && !sprite.isDisposed()) {\r\n\t\t\t\tconst visibilitychanged = function(ev: AMEvent<Sprite | DataItem, ISpriteEvents & IDataItemEvents>[\"visibilitychanged\"]) {\r\n\t\t\t\t\titemContainer.readerChecked = ev.visible;\r\n\t\t\t\t\titemContainer.events.disableType(\"toggled\");\r\n\t\t\t\t\titemContainer.isActive = !ev.visible;\r\n\t\t\t\t\titemContainer.events.enableType(\"toggled\");\r\n\t\t\t\t};\r\n\r\n\t\t\t\tsprite.addDisposer(new Disposer(() => {\r\n\t\t\t\t\tif (this.component) {\r\n\t\t\t\t\t\tthis.component.dataItems.remove(this);\r\n\t\t\t\t\t}\r\n\t\t\t\t}))\r\n\r\n\t\t\t\tif (sprite instanceof Sprite) {\r\n\t\t\t\t\titemContainer.addDisposer(\r\n\t\t\t\t\t\tsprite.events.on(\"visibilitychanged\", visibilitychanged, undefined, false)\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t\titemContainer.addDisposer(\r\n\t\t\t\t\t\tsprite.events.on(\"hidden\", (ev) => {\r\n\t\t\t\t\t\t\titemContainer.readerChecked = false;\r\n\t\t\t\t\t\t\titemContainer.events.disableType(\"toggled\");\r\n\t\t\t\t\t\t\titemContainer.isActive = true;\r\n\t\t\t\t\t\t\titemContainer.events.enableType(\"toggled\");\r\n\t\t\t\t\t\t}, undefined, false)\r\n\t\t\t\t\t)\r\n\t\t\t\t\titemContainer.addDisposer(\r\n\t\t\t\t\t\tsprite.events.on(\"shown\", (ev) => {\r\n\t\t\t\t\t\t\titemContainer.readerChecked = true;\r\n\t\t\t\t\t\t\titemContainer.events.disableType(\"toggled\");\r\n\t\t\t\t\t\t\titemContainer.isActive = false;\r\n\t\t\t\t\t\t\titemContainer.events.enableType(\"toggled\");\r\n\t\t\t\t\t\t}, undefined, false)\r\n\t\t\t\t\t)\r\n\r\n\t\t\t\t} else {\r\n\t\t\t\t\titemContainer.addDisposer(\r\n\t\t\t\t\t\tsprite.events.on(\"visibilitychanged\", visibilitychanged, undefined, false)\r\n\t\t\t\t\t);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this._itemContainer;\r\n\t}\r\n\r\n\t/**\r\n\t * A [[Container]] that holds legend item's marker element.\r\n\t *\r\n\t * @return Marker\r\n\t */\r\n\tpublic get marker(): Container {\r\n\t\tif (!this._marker) {\r\n\t\t\tlet marker = this.component.markers.create();\r\n\t\t\tthis._marker = marker;\r\n\t\t\tmarker.parent = this.itemContainer;\r\n\t\t\tthis.addSprite(marker);\r\n\t\t\tthis._disposers.push(marker);\r\n\r\n\t\t\tthis._disposers.push(new Disposer(() => {\r\n\t\t\t\tif ($type.hasValue(this.component)) {\r\n\t\t\t\t\tthis.component.markers.removeValue(marker);\r\n\t\t\t\t}\r\n\t\t\t}));\r\n\t\t}\r\n\t\treturn this._marker;\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a class that carries legend settings.\r\n *\r\n * A legend might change its settings dynamically. Legend can also be shared\r\n * by several elements, requiring different settings.\r\n *\r\n * Having legend's settings in a separate object is a good way to \"hot swap\"\r\n * a set of settings for the legend.\r\n */\r\nexport class LegendSettings {\r\n\r\n\t/**\r\n\t * [valueText description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tpublic valueText: string;\r\n\r\n\t/**\r\n\t * [labelText description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tpublic labelText: string;\r\n\r\n\t/**\r\n\t * A text template for the value part of the legend item.\r\n\t */\r\n\tpublic itemValueText: string;\r\n\r\n\t/**\r\n\t * A text template for the label part of the legend item.\r\n\t */\r\n\tpublic itemLabelText: string;\r\n\r\n\t/**\r\n\t * Should marker be created for each legend item.\r\n\t */\r\n\tpublic createMarker: boolean = true;\r\n}\r\n\r\n/**\r\n * Represents types available for Legend position. Not all charts will pay attention to this, like MapChart. You'll need to use legend.align and legend.valign properties to position legend on MapChart.\r\n */\r\nexport type LegendPosition = \"left\" | \"right\" | \"top\" | \"bottom\" | \"absolute\";\r\n\r\n/**\r\n * Defines data fields for [[Legend]].\r\n */\r\nexport interface ILegendDataFields extends IComponentDataFields {\r\n\r\n\t/**\r\n\t * A field name in the data item which holds name of the legend item.\r\n\t */\r\n\tname?: string;\r\n\r\n\t/**\r\n\t * A field name in data item which holds boolean value whether item should\r\n\t * be displayed in legend or not.\r\n\t */\r\n\tvisible?: string;\r\n}\r\n\r\n/**\r\n * Defines properties for [[Legend]].\r\n */\r\nexport interface ILegendProperties extends IComponentProperties {\r\n\r\n\t/**\r\n\t * Should legend use default marker?\r\n\t *\r\n\t * If set to `false`, the legend will try to mirror the look of the actual\r\n\t * item, like series.\r\n\t *\r\n\t * @default true\r\n\t */\r\n\tuseDefaultMarker?: boolean;\r\n\r\n\t/**\r\n\t * Position of the legend.\r\n\t *\r\n\t * Options: \"left\", \"right\", \"top\", \"bottom\" (default), or \"absolute\".\r\n\t *\r\n\t * @default \"bottom\"\r\n\t */\r\n\tposition?: LegendPosition;\r\n\r\n\t/**\r\n\t * If set to `true` the Legend will display a scrollbar if its contents do\r\n\t * not fit into its `maxHeight`.\r\n\t *\r\n\t * @default false\r\n\t * @since 4.8.0\r\n\t */\r\n\tscrollable?: boolean;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[Legend]].\r\n */\r\nexport interface ILegendEvents extends IComponentEvents { }\r\n\r\n/**\r\n * Defines adapters for [[Legend]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ILegendAdapters extends IComponentAdapters, ILegendProperties { }\r\n\r\nexport interface ILegendItemEvents {\r\n\tpropertychanged: {\r\n\t\t/**\r\n\t\t * Property key.\r\n\t\t */\r\n\t\tproperty: string;\r\n\t};\r\n}\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * [[Legend]] class is used to create legend for the chart.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v4/concepts/legend/} for Legend documentation\r\n * @see {@link ILegendEvents} for a list of available events\r\n * @see {@link ILegendAdapters} for a list of available Adapters\r\n */\r\nexport class Legend extends Component {\r\n\r\n\t/**\r\n\t * Defines the type of the data fields.\r\n\t */\r\n\tpublic _dataFields: ILegendDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ILegendProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ILegendAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ILegendEvents;\r\n\r\n\t/**\r\n\t * Defines data item type.\r\n\t */\r\n\tpublic _dataItem: LegendDataItem;\r\n\r\n\t/**\r\n\t * List of legend Item containers. Legend item containers contain marker, title label and value label.\r\n\t */\r\n\tpublic itemContainers: ListTemplate<Container>;\r\n\r\n\t/**\r\n\t * List of legend item labels.\r\n\t */\r\n\tpublic labels: ListTemplate<Label>;\r\n\r\n\t/**\r\n\t * List of legend item markers.\r\n\t */\r\n\tpublic markers: ListTemplate<Container>;\r\n\r\n\t/**\r\n\t * List of legend item value labels.\r\n\t */\r\n\tpublic valueLabels: ListTemplate<Label>;\r\n\r\n\t/**\r\n\t * Currently focused legend item (for toggling via keyboard)\r\n\t */\r\n\tpublic focusedItem: Optional<this[\"_dataItem\"]>;\r\n\r\n\r\n\tpublic scrollbar: Scrollbar;\r\n\r\n\tprotected _mouseWheelDisposer: IDisposer;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"Legend\";\r\n\r\n\t\t// Set defaults\r\n\t\tthis.layout = \"grid\";\r\n\t\tthis.setPropertyValue(\"useDefaultMarker\", false);\r\n\t\tthis.setPropertyValue(\"scrollable\", false);\r\n\t\tthis.setPropertyValue(\"contentAlign\", \"center\");\r\n\r\n\t\t// Create a template container and list for legend items\r\n\t\tlet itemContainer: Container = new Container();\r\n\t\titemContainer.applyOnClones = true;\r\n\t\titemContainer.padding(8, 0, 8, 0);\r\n\t\titemContainer.margin(0, 10, 0, 10);\r\n\t\titemContainer.layout = \"horizontal\";\r\n\t\titemContainer.clickable = true;\r\n\t\titemContainer.focusable = true;\r\n\t\titemContainer.role = \"switch\";\r\n\t\titemContainer.togglable = true;\r\n\t\titemContainer.cursorOverStyle = MouseCursorStyle.pointer;\r\n\t\titemContainer.background.fillOpacity = 0; // creates hit area\r\n\r\n\t\t// Create container list using item template we just created\r\n\t\tthis.itemContainers = new ListTemplate<Container>(itemContainer);\r\n\t\tthis._disposers.push(new ListDisposer(this.itemContainers));\r\n\t\tthis._disposers.push(this.itemContainers.template);\r\n\r\n\t\t// Set up global keyboard events for toggling elements\r\n\t\tthis._disposers.push(getInteraction().body.events.on(\"keyup\", (ev) => {\r\n\t\t\tif (keyboard.isKey(ev.event, \"enter\") && this.focusedItem) {\r\n\t\t\t\tconst focusedItem = this.focusedItem;\r\n\t\t\t\tconst target = focusedItem.itemContainer;\r\n\t\t\t\tif (target.togglable) {\r\n\t\t\t\t\tthis.toggleDataItem(focusedItem);\r\n\t\t\t\t}\r\n\t\t\t\telse if (target.clickable && target.events.isEnabled(\"hit\")) {\r\n\t\t\t\t\ttarget.dispatchImmediately(\"hit\", { event: ev });\r\n\r\n\t\t\t\t\t// We need this here because \"hit\" event resets `this.focusedItem`\r\n\t\t\t\t\t// And we need it here\r\n\t\t\t\t\tthis.focusedItem = focusedItem;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}, this));\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\t// Create a template container and list for the a marker\r\n\t\tlet marker: Container = new Container();\r\n\t\tmarker.width = 23;\r\n\t\tmarker.height = 23;\r\n\t\tmarker.interactionsEnabled = false;\r\n\t\tmarker.applyOnClones = true;\r\n\t\tmarker.setStateOnChildren = true;\r\n\t\tmarker.background.fillOpacity = 0;\r\n\t\tmarker.background.strokeOpacity = 0;\r\n\t\tmarker.propertyFields.fill = \"fill\";\r\n\t\tmarker.valign = \"middle\";\r\n\r\n\t\tlet disabledColor = interfaceColors.getFor(\"disabledBackground\");\r\n\r\n\t\tmarker.events.on(\"childadded\", (event) => {\r\n\t\t\tlet child = event.newValue;\r\n\t\t\tlet activeState = child.states.create(\"active\");\r\n\t\t\tactiveState.properties.stroke = disabledColor;\r\n\t\t\tactiveState.properties.fill = disabledColor;\r\n\t\t});\r\n\r\n\t\tthis.markers = new ListTemplate<Container>(marker);\r\n\t\tthis._disposers.push(new ListDisposer(this.markers));\r\n\t\tthis._disposers.push(this.markers.template);\r\n\r\n\t\t// Create a legend background element\r\n\t\tlet rectangle: RoundedRectangle = marker.createChild(RoundedRectangle);\r\n\t\trectangle.width = percent(100);\r\n\t\trectangle.height = percent(100);\r\n\t\trectangle.applyOnClones = true;\r\n\t\trectangle.propertyFields.fill = \"fill\"; //othrwise old edge doesn't like as the same pattern is set both on parent and child https://codepen.io/team/amcharts/pen/72d7a98f3fb811d3118795220ff63182\r\n\t\trectangle.strokeOpacity = 0;\r\n\r\n\t\t// Create a template container and list for item labels\r\n\t\tlet label: Label = new Label();\r\n\t\tlabel.text = \"{name}\";\r\n\t\tlabel.margin(0, 5, 0, 5);\r\n\t\tlabel.valign = \"middle\";\r\n\t\tlabel.applyOnClones = true;\r\n\t\tlabel.states.create(\"active\").properties.fill = interfaceColors.getFor(\"disabledBackground\");\r\n\t\tthis.labels = new ListTemplate<Label>(label);\r\n\t\tthis._disposers.push(new ListDisposer(this.labels));\r\n\t\tthis._disposers.push(this.labels.template);\r\n\t\tlabel.interactionsEnabled = false;\r\n\t\tlabel.truncate = true;\r\n\t\tlabel.fullWords = false;\r\n\r\n\t\t// Create a template container and list for item value labels\r\n\t\tlet valueLabel: Label = new Label();\r\n\t\tvalueLabel.margin(0, 5, 0, 0);\r\n\t\tvalueLabel.valign = \"middle\";\r\n\t\tvalueLabel.width = 50; // to avoid rearranging legend entries when value changes.\r\n\t\tvalueLabel.align = \"right\";\r\n\t\tvalueLabel.textAlign = \"end\";\r\n\t\tvalueLabel.applyOnClones = true;\r\n\t\tvalueLabel.states.create(\"active\").properties.fill = interfaceColors.getFor(\"disabledBackground\");\r\n\t\tvalueLabel.interactionsEnabled = false;\r\n\r\n\t\tthis.valueLabels = new ListTemplate<Label>(valueLabel);\r\n\t\tthis._disposers.push(new ListDisposer(this.valueLabels));\r\n\t\tthis._disposers.push(this.valueLabels.template);\r\n\r\n\t\tthis.position = \"bottom\"; // don't use setPropertyValue here!\r\n\r\n\t\t// Create a state for disabled legend items\r\n\t\titemContainer.states.create(\"active\");\r\n\t\titemContainer.setStateOnChildren = true;\r\n\r\n\t\t// Apply accessibility settings\r\n\t\tthis.role = \"group\";\r\n\r\n\t\tthis.events.on(\"layoutvalidated\", this.handleScrollbar, this, false);\r\n\t\tthis.events.on(\"parentset\", () => {\r\n\t\t\tconst parent = this.parent;\r\n\t\t\tif (parent) {\r\n\t\t\t\tthis._disposers.push(parent.events.on(\"maxsizechanged\", () => {\r\n\t\t\t\t\tif (this.scrollable) {\r\n\t\t\t\t\t\tthis.setTimeout(() => {\r\n\t\t\t\t\t\t\tthis.updateMasks();\r\n\t\t\t\t\t\t\tthis.handleScrollbar();\r\n\t\t\t\t\t\t\tthis._handleWheelReal(1);\r\n\t\t\t\t\t\t}, 100)\r\n\t\t\t\t\t}\r\n\t\t\t\t}))\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Legend\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new LegendDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * [validateDataElements description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tprotected validateDataElements() {\r\n\t\tif (this.scrollbar) {\r\n\t\t\tthis.scrollbar.start = 0;\r\n\t\t\tthis.scrollbar.end = 1;\r\n\t\t}\r\n\t\tsuper.validateDataElements();\r\n\t}\r\n\r\n\t/**\r\n\t * [validateDataElement description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem Data item\r\n\t * @todo Description\r\n\t * @todo Figure out how to update appearance of legend item without losing focus\r\n\t * @todo Update legend marker appearance as apperance of related series changes\r\n\t */\r\n\tpublic validateDataElement(dataItem: this[\"_dataItem\"]): void {\r\n\t\tsuper.validateDataElement(dataItem);\r\n\t\t// Get data item (legend item's) container\r\n\t\tlet container = dataItem.itemContainer;\r\n\r\n\t\tlet marker = dataItem.marker;\r\n\r\n\t\t$utils.used(dataItem.label);\r\n\t\tlet valueLabel = dataItem.valueLabel;\r\n\r\n\t\t// Set parent and update current state\r\n\t\tcontainer.readerChecked = dataItem.dataContext.visible;\r\n\r\n\t\t// Tell series its legend data item\r\n\t\tdataItem.dataContext.legendDataItem = dataItem;\r\n\r\n\t\tlet tempMaxWidth = dataItem.label.maxWidth;\r\n\t\tif (!(dataItem.label.width instanceof Percent)) {\r\n\t\t\tdataItem.label.width = undefined;\r\n\t\t}\r\n\r\n\t\tif (tempMaxWidth > 0) {\r\n\t\t\tdataItem.label.maxWidth = tempMaxWidth;\r\n\t\t}\r\n\t\tif (valueLabel.align == \"right\") {\r\n\t\t\tvalueLabel.width = undefined;\r\n\t\t}\r\n\r\n\t\tlet legendSettings = dataItem.dataContext.legendSettings;\r\n\r\n\t\t// If we are not using default markers, create a unique legend marker based\r\n\t\t// on the data item type\r\n\t\tlet dataContext = dataItem.dataContext;\r\n\r\n\t\tif (dataContext.createLegendMarker && (!this.useDefaultMarker || !(dataContext instanceof Sprite))) {\r\n\t\t\tif (!dataItem.childrenCreated) {\r\n\t\t\t\tdataContext.createLegendMarker(marker);\r\n\t\t\t\tdataItem.childrenCreated = true;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.markers.template.propertyFields.fill = undefined;\r\n\t\t}\r\n\r\n\t\tif (dataContext.updateLegendValue) {\r\n\t\t\tdataContext.updateLegendValue(); // this solves issue with external legend, as legend is created after chart updates legend values\r\n\t\t}\r\n\r\n\t\tif (dataContext.component && dataContext.component.updateLegendValue) {\r\n\t\t\tdataContext.component.updateLegendValue(dataContext);\r\n\t\t}\r\n\r\n\t\tif (valueLabel.invalid) {\r\n\t\t\tvalueLabel.validate();\r\n\t\t}\r\n\r\n\t\tif (valueLabel.text == \"\" || valueLabel.text == undefined) {\r\n\t\t\tvalueLabel.__disabled = true;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tvalueLabel.__disabled = false;\r\n\t\t}\r\n\r\n\t\tif (legendSettings && (legendSettings.itemValueText != undefined || legendSettings.valueText != undefined)) {\r\n\t\t\tvalueLabel.__disabled = false;\r\n\t\t}\r\n\r\n\t\tlet visible = dataItem.dataContext.visible;\r\n\r\n\t\tif (visible === undefined) {\r\n\t\t\tvisible = true;\r\n\t\t}\r\n\t\tvisible = $type.toBoolean(visible);\r\n\t\tdataItem.dataContext.visible = visible;\r\n\r\n\t\tcontainer.events.disableType(\"toggled\");\r\n\r\n\t\tcontainer.isActive = !visible;\r\n\t\tif (container.isActive) {\r\n\t\t\tcontainer.setState(\"active\", 0);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tcontainer.setState(\"default\", 0);\r\n\t\t}\r\n\t\tcontainer.events.enableType(\"toggled\");\r\n\t}\r\n\r\n\r\n\tpublic afterDraw() {\r\n\t\tlet maxWidth = this.getPropertyValue(\"maxWidth\");\r\n\t\tlet maxLabelWidth = 0;\r\n\t\tthis.labels.each((label) => {\r\n\t\t\tif (label.invalid) {\r\n\t\t\t\tlabel.maxWidth = undefined;\r\n\t\t\t\tlabel.validate();\r\n\t\t\t}\r\n\t\t\tif (label.measuredWidth + label.pixelMarginLeft + label.pixelMarginRight > maxLabelWidth) {\r\n\t\t\t\tmaxLabelWidth = label.measuredWidth + label.pixelMarginLeft + label.pixelMarginRight;\r\n\t\t\t}\r\n\r\n\t\t})\r\n\r\n\t\tlet maxValueLabelWidth = 0;\r\n\t\tthis.valueLabels.each((label) => {\r\n\t\t\tif (label.invalid) {\r\n\t\t\t\tlabel.validate();\r\n\t\t\t}\r\n\t\t\tif (label.measuredWidth + label.pixelMarginLeft + label.pixelMarginRight > maxValueLabelWidth) {\r\n\t\t\t\tmaxValueLabelWidth = label.measuredWidth + label.pixelMarginLeft + label.pixelMarginRight;\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\tlet maxMarkerWidth = 0;\r\n\t\tthis.markers.each((marker) => {\r\n\t\t\tif (marker.invalid) {\r\n\t\t\t\tmarker.validate();\r\n\t\t\t}\r\n\t\t\tif (marker.measuredWidth + marker.pixelMarginLeft + marker.pixelMarginRight > maxMarkerWidth) {\r\n\t\t\t\tmaxMarkerWidth = marker.measuredWidth + marker.pixelMarginLeft + marker.pixelMarginRight;\r\n\t\t\t}\r\n\t\t})\r\n\t\tlet itemContainer = this.itemContainers.template;\r\n\t\tlet margin = itemContainer.pixelMarginRight + itemContainer.pixelMarginLeft;\r\n\t\tlet maxAdjustedLabelWidth: number;\r\n\t\tlet trueMaxWidth = maxLabelWidth + maxValueLabelWidth + maxMarkerWidth;\r\n\t\tif (!$type.isNumber(maxWidth)) {\r\n\t\t\tmaxAdjustedLabelWidth = maxLabelWidth;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tmaxWidth = maxWidth - margin;\r\n\t\t\tif (maxWidth > trueMaxWidth) {\r\n\t\t\t\tmaxWidth = trueMaxWidth;\r\n\t\t\t}\r\n\t\t\tmaxAdjustedLabelWidth = maxWidth - maxMarkerWidth - maxValueLabelWidth;\r\n\t\t}\r\n\r\n\t\tthis.labels.each((label) => {\r\n\t\t\tif (this.valueLabels.template.align == \"right\" || label.measuredWidth > maxAdjustedLabelWidth) {\r\n\t\t\t\tif (!(label.width instanceof Percent)) {\r\n\t\t\t\t\tlabel.width = Math.min(label.maxWidth, maxAdjustedLabelWidth - label.pixelMarginLeft - label.pixelMarginRight);\r\n\t\t\t\t\tlabel.maxWidth = label.width;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t})\r\n\t\tif (this.valueLabels.template.align == \"right\") {\r\n\t\t\tthis.valueLabels.each((valueLabel) => {\r\n\t\t\t\tvalueLabel.width = maxValueLabelWidth - valueLabel.pixelMarginRight - valueLabel.pixelMarginLeft;\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\tsuper.afterDraw();\r\n\t}\r\n\r\n\r\n\tprotected handleScrollbar() {\r\n\t\tlet scrollbar = this.scrollbar;\r\n\t\tif (this.scrollable && scrollbar) {\r\n\t\t\tconst measuredHeight = this.maxHeight;\r\n\t\t\tscrollbar.height = measuredHeight;\r\n\t\t\tscrollbar.x = this.measuredWidth - scrollbar.pixelWidth - scrollbar.pixelMarginLeft;\r\n\r\n\t\t\tif (this.contentHeight > measuredHeight) {\r\n\t\t\t\tscrollbar.visible = true;\r\n\t\t\t\tscrollbar.thumb.height = scrollbar.height * measuredHeight / this.contentHeight;\r\n\t\t\t\tthis.paddingRight = scrollbar.pixelWidth + scrollbar.pixelMarginLeft + scrollbar.pixelMarginRight;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tscrollbar.thumb.height = scrollbar.height * measuredHeight / this.contentHeight;\r\n\t\t\t\tthis.paddingRight = scrollbar.pixelWidth + scrollbar.pixelMarginLeft + scrollbar.pixelMarginRight;\r\n\t\t\t\tscrollbar.visible = false;\r\n\t\t\t\tscrollbar.start = 0;\r\n\t\t\t\tscrollbar.end = 1;\r\n\t\t\t}\r\n\r\n\t\t\tscrollbar.handleThumbPosition();\r\n\r\n\t\t\tthis.updateMasks();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Position of the legend.\r\n\t *\r\n\t * Options: \"left\", \"right\", \"top\", \"bottom\" (default), or \"absolute\".\r\n\t *\r\n\t * IMPORTANT: [[MapChart]] will ignore this setting, as it is using different\r\n\t * layout structure than other charts.\r\n\t *\r\n\t * To position legend in [[MapChart]] set legend's `align` (`\"left\"` or\r\n\t * `\"right\"`) and `valign` (`\"top\"` or `\"bottom\"`) properties instead.\r\n\t *\r\n\t * @default \"bottom\"\r\n\t * @param value  Position\r\n\t */\r\n\tpublic set position(value: LegendPosition) {\r\n\t\tif (this.setPropertyValue(\"position\", value)) {\r\n\t\t\tif (value == \"left\" || value == \"right\") {\r\n\t\t\t\tthis.margin(10, 5, 10, 10);\r\n\t\t\t\tthis.valign = \"middle\";\r\n\t\t\t\tthis.contentAlign = \"none\";\r\n\t\t\t\tthis.valueLabels.template.align = \"right\";\r\n\r\n\t\t\t\tif (!$type.isNumber(this.maxColumns)) {\r\n\t\t\t\t\tthis.maxColumns = 1;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.width = undefined;\r\n\t\t\t\tthis.maxWidth = 220;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.maxColumns = undefined;\r\n\t\t\t\tthis.width = percent(100);\r\n\t\t\t\tthis.valueLabels.template.align = \"left\";\r\n\t\t\t}\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Position\r\n\t */\r\n\tpublic get position(): LegendPosition {\r\n\t\treturn this.getPropertyValue(\"position\");\r\n\t}\r\n\r\n\t/**\r\n\t * Should legend try to mirror the look of the related item when building\r\n\t * the marker for legend item?\r\n\t *\r\n\t * If set to `false` it will try to make the marker look like its related\r\n\t * item.\r\n\t *\r\n\t * E.g. if an item is for a Line Series, it will display a line of the\r\n\t * same thickness, color, and will use the same bullets if series have them.\r\n\t *\r\n\t * If set to `true`, all markers will be shown as squares, regardless of te\r\n\t * series type.\r\n\t *\r\n\t * @default false\r\n\t * @param value Use default marker?\r\n\t */\r\n\tpublic set useDefaultMarker(value: boolean) {\r\n\t\tthis.setPropertyValue(\"useDefaultMarker\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Use default marker?\r\n\t */\r\n\tpublic get useDefaultMarker(): boolean {\r\n\t\treturn this.getPropertyValue(\"useDefaultMarker\");\r\n\t}\r\n\r\n\t/**\r\n\t * If set to `true` the Legend will display a scrollbar if its contents do\r\n\t * not fit into its `maxHeight`.\r\n\t *\r\n\t * Please note that `maxHeight` is automatically set for Legend when its\r\n\t * `position` is set to `\"left\"` or `\"right\"`.\r\n\t *\r\n\t * @default false\r\n\t * @since 4.8.0\r\n\t * @param  value  Legend Scrollable?\r\n\t */\r\n\tpublic set scrollable(value: boolean) {\r\n\t\tif (this.setPropertyValue(\"scrollable\", value, true)) {\r\n\t\t\tif (value) {\r\n\t\t\t\tlet scrollbar = this.createChild(Scrollbar);\r\n\t\t\t\tthis.scrollbar = scrollbar;\r\n\t\t\t\tscrollbar.isMeasured = false;\r\n\t\t\t\tscrollbar.orientation = \"vertical\";\r\n\t\t\t\tscrollbar.endGrip.__disabled = true;\r\n\t\t\t\tscrollbar.startGrip.__disabled = true;\r\n\t\t\t\tscrollbar.visible = false;\r\n\t\t\t\tscrollbar.marginLeft = 5;\r\n\r\n\t\t\t\tthis._mouseWheelDisposer = this.events.on(\"wheel\", this.handleWheel, this, false);\r\n\t\t\t\tthis._disposers.push(this._mouseWheelDisposer);\r\n\r\n\t\t\t\tthis._disposers.push(scrollbar.events.on(\"rangechanged\", this.updateMasks, this, false));\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif (this._mouseWheelDisposer) {\r\n\t\t\t\t\tthis._mouseWheelDisposer.dispose();\r\n\t\t\t\t\tif (this.scrollbar) {\r\n\t\t\t\t\t\tthis.scrollbar.dispose();\r\n\t\t\t\t\t\tthis.scrollbar = undefined;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Handles mouse wheel scrolling of legend.\r\n\t *\r\n\t * @param  event  Event\r\n\t */\r\n\tprotected handleWheel(event: AMEvent<Sprite, ISpriteEvents>[\"wheel\"]): void {\r\n\t\tthis._handleWheelReal(event.shift.y)\r\n\t}\r\n\r\n\tprotected _handleWheelReal(shift: number) {\r\n\t\tlet scrollbar = this.scrollbar\r\n\t\tif (scrollbar) {\r\n\t\t\tlet ds = (shift / 1000 * this.measuredHeight / this.contentHeight);\r\n\t\t\tlet delta = scrollbar.end - scrollbar.start;\r\n\t\t\tif (shift > 0) {\r\n\t\t\t\tscrollbar.start = $math.max(0, scrollbar.start - ds);\r\n\t\t\t\tscrollbar.end = scrollbar.start + delta;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tscrollbar.end = $math.min(1, scrollbar.end - ds);\r\n\t\t\t\tscrollbar.start = scrollbar.end - delta;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected updateMasks(): void {\r\n\t\tif (this.scrollbar) {\r\n\t\t\tthis.itemContainers.each((itemContainer) => {\r\n\t\t\t\titemContainer.dy = -this.scrollbar.thumb.pixelY * this.contentHeight / this.maxHeight;\r\n\t\t\t\titemContainer.maskRectangle = { x: 0, y: -itemContainer.dy, width: this.measuredWidth, height: this.maxHeight }\r\n\t\t\t})\r\n\t\t}\r\n\t\tthis.invalidatePosition();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Legend Scrollable?\r\n\t */\r\n\tpublic get scrollable(): boolean {\r\n\t\treturn this.getPropertyValue(\"scrollable\");\r\n\t}\r\n\r\n\t/**\r\n\t * Toggles a legend item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param item Legend item\r\n\t * @todo Maybe do it with togglable instead\r\n\t */\r\n\tpublic toggleDataItem(item: this[\"_dataItem\"]): void {\r\n\t\tlet dataContext = item.dataContext;\r\n\r\n\t\tif (!dataContext.visible || dataContext.isHiding || (dataContext instanceof Sprite && dataContext.isHidden)) {\r\n\t\t\titem.color = item.colorOrig;\r\n\r\n\t\t\tdataContext.appeared = true;\r\n\t\t\titem.itemContainer.isActive = false;\r\n\r\n\t\t\tif (dataContext.hidden === true) {\r\n\t\t\t\tdataContext.hidden = false;\r\n\t\t\t}\r\n\r\n\t\t\tif (dataContext.show) {\r\n\t\t\t\tdataContext.show();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tdataContext.visible = true;\r\n\t\t\t}\r\n\r\n\t\t\tthis.svgContainer.readerAlert(this.language.translate(\"%1 shown\", this.language.locale, item.label.readerTitle));\r\n\r\n\t\t}\r\n\t\telse {\r\n\t\t\titem.itemContainer.isActive = true;\r\n\t\t\tdataContext.appeared = true;\r\n\r\n\t\t\tif (dataContext.hide) {\r\n\t\t\t\tdataContext.hide();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tdataContext.visible = false;\r\n\t\t\t}\r\n\r\n\t\t\tthis.svgContainer.readerAlert(this.language.translate(\"%1 hidden\", this.language.locale, item.label.readerTitle));\r\n\t\t\titem.color = new InterfaceColorSet().getFor(\"disabledBackground\");\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Override preloader method so that legend does not accidentally show its\r\n\t * own preloader.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return Always `undefined`\r\n\t */\r\n\tpublic get preloader(): Optional<Preloader> {\r\n\t\treturn;\r\n\t}\r\n\r\n\t/**\r\n\t * [handleDataItemPropertyChange description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic handleDataItemPropertyChange(dataItem?: this[\"_dataItem\"], name?: string): void {\r\n\t\tdataItem.valueLabel.invalidate();\r\n\t\tdataItem.label.invalidate();\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Legend\"] = Legend;\r\n\r\n\r\n/**\r\n * Add default responsive rules\r\n */\r\n\r\n/**\r\n * Move legend to below the chart if chart is narrow\r\n */\r\ndefaultRules.push({\r\n\trelevant: ResponsiveBreakpoints.widthXS,\r\n\tstate: function(target, stateId) {\r\n\t\tif (target instanceof Legend && (target.position == \"left\" || target.position == \"right\")) {\r\n\t\t\tlet state = target.states.create(stateId);\r\n\t\t\tstate.properties.position = \"bottom\";\r\n\t\t\treturn state;\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\t}\r\n});\r\n\r\n/**\r\n * Move legend to the right if chart is very short\r\n */\r\ndefaultRules.push({\r\n\trelevant: ResponsiveBreakpoints.heightXS,\r\n\tstate: function(target, stateId) {\r\n\t\tif (target instanceof Legend && (target.position == \"top\" || target.position == \"bottom\")) {\r\n\t\t\tlet state = target.states.create(stateId);\r\n\t\t\tstate.properties.position = \"right\";\r\n\t\t\treturn state;\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\t}\r\n});\r\n\r\n/**\r\n * Disable legend altogether on small charts\r\n */\r\ndefaultRules.push({\r\n\trelevant: ResponsiveBreakpoints.isXS,\r\n\tstate: function(target, stateId) {\r\n\t\tif (target instanceof Legend) {\r\n\t\t\tlet state = target.states.create(stateId);\r\n\t\t\tstate.properties.disabled = true;\r\n\t\t\treturn state;\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\t}\r\n});\r\n","/**\r\n * Functionality for any series-based elements, like Line Series (graphs),\r\n * Pie slice lists, etc.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Component, IComponentProperties, IComponentDataFields, IComponentAdapters, IComponentEvents } from \"../../core/Component\";\r\nimport { AxisDataItem } from \"../axes/Axis\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { List, ListTemplate, IListEvents, ListDisposer } from \"../../core/utils/List\";\r\nimport { Dictionary, DictionaryDisposer } from \"../../core/utils/Dictionary\";\r\nimport { DataItem } from \"../../core/DataItem\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { SerialChart } from \"../types/SerialChart\";\r\nimport { Label } from \"../../core/elements/Label\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { Tooltip } from \"../../core/elements/Tooltip\";\r\nimport { Bullet } from \"../elements/Bullet\";\r\nimport { LegendDataItem, LegendSettings } from \"../Legend\";\r\nimport { options } from \"../../core/Options\";\r\nimport { Ordering } from \"../../core/utils/Order\";\r\nimport { Color } from \"../../core/utils/Color\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $ease from \"../../core/utils/Ease\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $array from \"../../core/utils/Array\";\r\nimport * as $colors from \"../../core/utils/Colors\";\r\n\r\nexport interface IHeatRule {\r\n\ttarget: Sprite;\r\n\tproperty: string;\r\n\tmin: any;\r\n\tmax: any;\r\n\tdataField?: string;\r\n\tminValue?: number;\r\n\tmaxValue?: number;\r\n\tlogarithmic?: boolean;\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[Series]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class SeriesDataItem extends DataItem {\r\n\r\n\t/**\r\n\t * Related item's width in pixels.\r\n\t *\r\n\t * This is passed to bullets so that we'd know if the bullet (LabelBullet)\r\n\t * fits to max width/height.\r\n\t *\r\n\t * At the moment this is only used by column series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic itemWidth: number;\r\n\r\n\t/**\r\n\t * Related item's height in pixels.\r\n\t *\r\n\t * This is passed to bullets so that we'd know if the bullet (LabelBullet)\r\n\t * fits to max width/height.\r\n\t *\r\n\t * At the moment this is only used by column series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic itemHeight: number;\r\n\r\n\t/**\r\n\t * A dictionary of data items bullets, where key is uid of a bullet template.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _bullets: Dictionary<string, Sprite>;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: Series;\r\n\r\n\t/**\r\n\t * A dictionary of data items bullets, where key is uid of a bullet template.\r\n\t */\r\n\tpublic get bullets(): Dictionary<string, Sprite> {\r\n\t\tif (!this._bullets) {\r\n\t\t\tthis._bullets = new Dictionary<string, Sprite>();\r\n\t\t\tthis._disposers.push(new DictionaryDisposer(this._bullets));\r\n\t\t}\r\n\t\treturn this._bullets;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"SeriesDataItem\";\r\n\t\t//@todo Should we make `bullets` list disposable?\r\n\t\t//this._disposers.push(new DictionaryDisposer(this.bullets));\r\n\r\n\t\tthis.values.value = {};\r\n\t\tthis.values.value = {};\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Destroys this object and all related data.\r\n\t */\r\n\tpublic dispose() {\r\n\t\tthis.bullets.clear();\r\n\t\tsuper.dispose();\r\n\t}\r\n\r\n\t/**\r\n\t * data items's numeric value.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set value(value: number) {\r\n\t\tthis.setValue(\"value\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get value(): number {\r\n\t\treturn this.values.value.value;\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[Series]].\r\n */\r\nexport interface ISeriesDataFields extends IComponentDataFields {\r\n\t/**\r\n\t * Name of the field in data that holds numeric value.\r\n\t */\r\n\tvalue?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds boolean flag if item should be hidden.\r\n\t */\r\n\thidden?: string;\r\n}\r\n\r\n/**\r\n * Defines properties for [[Series]].\r\n */\r\nexport interface ISeriesProperties extends IComponentProperties {\r\n\r\n\t/**\r\n\t * Minimal distance between data points in pixels.\r\n\t *\r\n\t * If distance gets smaller than this, bullets are turned off to avoid\r\n\t * overlapping.\r\n\t *\r\n\t * `0` (zero) disables this behavior.\r\n\t *\r\n\t * @default 0\r\n\t */\r\n\tminBulletDistance?: number;\r\n\r\n\t/**\r\n\t * Should series be hidden in chart's legend?\r\n\t */\r\n\thiddenInLegend?: boolean;\r\n\r\n\t/**\r\n\t * Series' name.\r\n\t */\r\n\tname?: string;\r\n}\r\n\r\n/**\r\n * Defines events for [[Series]].\r\n */\r\nexport interface ISeriesEvents extends IComponentEvents {\r\n\r\n\t/**\r\n\t * @todo Description\r\n\t */\r\n\tselectionextremeschanged: {};\r\n\r\n\t/**\r\n\t * @todo Description\r\n\t */\r\n\textremeschanged: {};\r\n\r\n\t/**\r\n\t * @todo Description\r\n\t */\r\n\tdataitemchanged: {\r\n\t\tdataItem: DataItem\r\n\t};\r\n\r\n}\r\n\r\n/**\r\n * Defines adapters for [[Series]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ISeriesAdapters extends IComponentAdapters, ISeriesProperties {\r\n\t/**\r\n\t * Applied to the name used by screen readers.\r\n\t */\r\n\titemReaderText: string\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines base class for any kind of serial data.\r\n *\r\n * @see {@link ISeriesEvents} for a list of available Events\r\n * @see {@link ISeriesAdapters} for a list of available Adapters\r\n * @todo Separate axis-related stuff to some other class so that MapSeries would not have unrelated stuff\r\n */\r\nexport class Series extends Component {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t */\r\n\tpublic _dataFields: ISeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ISeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ISeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ISeriesEvents;\r\n\r\n\t/**\r\n\t * Defines a type of data item used for the series.\r\n\t */\r\n\tpublic _dataItem: SeriesDataItem;\r\n\r\n\t/**\r\n\t * A reference to the legend data item related to this series.\r\n\t */\r\n\tprotected _legendDataItem: LegendDataItem;\r\n\r\n\t/**\r\n\t * Should this series excluded from the axis scale calculations?\r\n\t *\r\n\t * @default false\r\n\t */\r\n\tprotected _ignoreMinMax: boolean = false;\r\n\r\n\t/**\r\n\t * Container series' elements are placed in.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic mainContainer: Container;\r\n\r\n\t/**\r\n\t * Should series' bullets?\r\n\t *\r\n\t * @default true\r\n\t */\r\n\tprotected _showBullets: boolean = true;\r\n\r\n\t/**\r\n\t * List of series' bullets.\r\n\t */\r\n\tprotected _bullets: ListTemplate<Sprite>;\r\n\r\n\t/**\r\n\t * Container bullets are placed in.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic bulletsContainer: Container;\r\n\r\n\t/**\r\n\t * A chart series belongs to.\r\n\t */\r\n\tpublic _chart: SerialChart;\r\n\r\n\t/**\r\n\t * A container axis ranges are placed in.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic rangesContainer: Container;\r\n\r\n\t/**\r\n\t * A list of axis ranges for this series.\r\n\t */\r\n\tpublic axisRanges: List<AxisDataItem>;\r\n\r\n\t/**\r\n\t * Settings for the appearance of the related legend items.\r\n\t */\r\n\tpublic legendSettings: LegendSettings = new LegendSettings();\r\n\r\n\t/**\r\n\t * Lowest overal values by type.\r\n\t */\r\n\tprotected _tmin = new Dictionary<string, number>();\r\n\r\n\t/**\r\n\t * Highest overal values by type.\r\n\t */\r\n\tprotected _tmax = new Dictionary<string, number>();\r\n\r\n\t/**\r\n\t * Lowest values in current selection by type.\r\n\t */\r\n\tprotected _smin = new Dictionary<string, number>();\r\n\r\n\t/**\r\n\t * Highest values in current selection by type.\r\n\t */\r\n\tprotected _smax = new Dictionary<string, number>();\r\n\r\n\t/**\r\n\t * [dataItemsByAxis description]\r\n\t *\r\n\t * Both by category and date.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic dataItemsByAxis = new Dictionary<string, Dictionary<string, this[\"_dataItem\"]>>();\r\n\r\n\t/**\r\n\t * Normally series items are focusable using keyboard, so that people can\r\n\t * select them with a TAB key. However, if there are a lot of data points on\r\n\t * screen it might be long and useless to tab through all o fthem.\r\n\t *\r\n\t * This is where `skipFocusThreshold` comes in. If there are more items than\r\n\t * the value set here, we will not make those focusable and rather let screen\r\n\t * reader software rely on the series summary, or authors provide alternative\r\n\t * detailed information display, such as HTML table.\r\n\t *\r\n\t * Different series might have different threshold defaults.\r\n\t */\r\n\tpublic skipFocusThreshold: number = 20;\r\n\r\n\t/**\r\n\t * Holds a default screen reader text for series data items. It will be used\r\n\t * to generate information for screen readers. If not set, the series will\r\n\t * try to deduce reader text from `tooltipText` or `tooltipHTML`. If those\r\n\t * are not set either, a default reader text will be used which is relevant\r\n\t * for each Series type.\r\n\t */\r\n\tprotected _itemReaderText: string;\r\n\r\n\r\n\t/**\r\n\t * Used to indicate if `itemReaderText` was changed \"from the outside\".\r\n\t */\r\n\tprotected _itemReaderTextChanged: boolean = false;\r\n\r\n\t/*\r\n\t\tpublic heatMapfillRule: (fill:Color, column: Sprite) => any = function(fill:Color, sprite: Sprite) {\r\n\t\t\tlet dataItem: SeriesDataItem = <SeriesDataItem>sprite.dataItem;\r\n\r\n\t\t\tif (dataItem && dataItem.value) {\r\n\t\t\t\tlet series = dataItem.component;\r\n\t\t\t\tif($type.hasValue(series.minColor) &&  $type.hasValue(series.maxColor) && $type.isNumber(series.minValue) && $type.isNumber(series.maxValue)){\r\n\t\t\t\t\tlet percent = (dataItem.values.value.workingValue - series.minValue) / (series.maxValue - series.minValue);\r\n\t\t\t\t\treturn new Color($colors.interpolate(series.minColor.rgb, series.maxColor.rgb, percent));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t*/\r\n\r\n\tprotected _heatRules: List<IHeatRule>;\r\n\r\n\t/**\r\n\t * Most of the series use absolute values. However sometimes various\r\n\t * calculated percent values are need, e.g. item's percent representation\r\n\t * across all values in series, etc.\r\n\t *\r\n\t * It's a resource-intensive operation, so it is disabled by default.\r\n\t *\r\n\t * If you need percents to be calculated, e.g. for showing them in tooltips,\r\n\t * or creating 100% stacks, this setting needs to be set to `true`.\r\n\t *\r\n\t * NOTE: `PieChart`, which relies on slice percentages, has this\r\n\t * automatically set to `true`.\r\n\t *\r\n\t * @default false\r\n\t */\r\n\tpublic calculatePercent: boolean = false;\r\n\r\n\t/**\r\n\t * When `calculatePercent` is enabled and data item's percent value is\r\n\t * calculated, last item's real value is used instead of its working value.\r\n\t *\r\n\t * This is done for the animations when last item in series (e.g. slice in\r\n\t * a `PieSeries`) is hidden or shown. (if we would use real value, the\r\n\t * calculated percent would always be 100%).\r\n\t *\r\n\t * Sometimes there is a need (e.g. for drill-down Sunburst) to disable this\r\n\t * hack by setting `usePercentHack` to `false`.\r\n\t *\r\n\t * @since 4.9.13\r\n\t * @default true\r\n\t */\r\n\tpublic usePercentHack: boolean = true;\r\n\r\n\t/**\r\n\t * Specifies if series should be automatically disposed when removing from\r\n\t * chart's `series` list.\r\n\t *\r\n\t * @default true\r\n\t */\r\n\tpublic autoDispose: boolean = true;\r\n\r\n\t/**\r\n\t * When chart/series' data is processed, all kinds of derivative values are\r\n\t * calculated. E.g. sum, min, max, change, etc. This is a potentially\r\n\t * time-consuming operation, especially prominent in data-heavy charts.\r\n\t *\r\n\t * If your chart does not need those values, and you have a lot of data,\r\n\t * setting this to `true` might give a dramatic increase in initial chart\r\n\t * load speed.\r\n\t *\r\n\t * Please note, regular column and line series usage scenarios do not\r\n\t * require derivative values. Those come into play only when you do advanced\r\n\t * functionality like coloring segments of charts in different colors\r\n\t * depending on change between open and close values, have stacked series, or\r\n\t * display any of the derived values, like percent, in tooltips or bullets.\r\n\t *\r\n\t * @default false\r\n\t */\r\n\tpublic simplifiedProcessing: boolean = false;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tif (this.constructor === Series) {\r\n\t\t\tthrow new Error(\"'Series' cannot be instantiated directly. Please use a specific series type.\");\r\n\t\t}\r\n\r\n\t\tthis.className = \"Series\";\r\n\t\tthis.isMeasured = false;\r\n\r\n\t\tthis.layout = \"none\";\r\n\t\tthis.shouldClone = false;\r\n\t\tthis.setPropertyValue(\"hidden\", false);\r\n\r\n\t\tthis.axisRanges = new List<AxisDataItem>();\r\n\t\tthis.axisRanges.events.on(\"inserted\", this.processAxisRange, this, false);\r\n\r\n\t\tthis.minBulletDistance = 0; // otherwise we'll have a lot of cases when people won't see bullets and think it's a bug\r\n\t\tthis.mainContainer = this.createChild(Container);\r\n\t\tthis.mainContainer.shouldClone = false;\r\n\t\tthis.mainContainer.mask = this.createChild(Sprite);\r\n\r\n\t\tthis._disposers.push(this.mainContainer);\r\n\r\n\t\t// all bullets should go on top of lines/fills. So we add a separate container for bullets and later set it's parent to chart.bulletsContainer\r\n\t\tlet bulletsContainer = this.mainContainer.createChild(Container);\r\n\t\tthis._shouldBeReady.push(bulletsContainer);\r\n\t\tbulletsContainer.shouldClone = false;\r\n\t\tbulletsContainer.layout = \"none\";\r\n\t\tbulletsContainer.virtualParent = this;\r\n\t\tthis._disposers.push(bulletsContainer);\r\n\t\tthis.bulletsContainer = bulletsContainer;\r\n\r\n\t\tthis.tooltip = new Tooltip();\r\n\t\tthis.tooltip.virtualParent = this;\r\n\t\tthis._disposers.push(this.tooltip);\r\n\r\n\t\tthis.hiddenState.transitionEasing = $ease.cubicIn;\r\n\r\n\t\t// this data item holds sums, averages, etc\r\n\t\tthis.dataItem = this.createDataItem();\r\n\t\tthis._disposers.push(this.dataItem);\r\n\t\tthis.dataItem.component = this;\r\n\r\n\t\t// Apply accessibility\r\n\t\tthis.role = \"group\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * We need this here so that class names can be applied to bullets container.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic applyTheme(): void {\r\n\t\tsuper.applyTheme();\r\n\t\tif (options.autoSetClassName && this.bulletsContainer) {\r\n\t\t\tthis.bulletsContainer.className = this.className + \"-bullets\";\r\n\t\t\tthis.bulletsContainer.setClassName();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Series\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new SeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Chart series is used on.\r\n\t *\r\n\t * @param value  Chart\r\n\t */\r\n\tpublic set chart(value: this[\"_chart\"]) {\r\n\t\tthis._chart = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Chart\r\n\t */\r\n\tpublic get chart(): this[\"_chart\"] {\r\n\t\treturn this._chart;\r\n\t}\r\n\r\n\t/**\r\n\t * Positions bullet.\r\n\t *\r\n\t * @param bullet  Sprite\r\n\t */\r\n\tpublic positionBullet(bullet: Sprite): void {\r\n\r\n\t\t// Placeholder method for extending classes to override.\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Decorates newly created bullet after it has been instert into the list.\r\n\t *\r\n\t * @param event  List event\r\n\t * @todo investigate why itemReaderText is undefined\r\n\t */\r\n\tprotected processBullet(event: IListEvents<Sprite>[\"inserted\"]) {\r\n\t\tlet bullet: Sprite = event.newValue;\r\n\t\tbullet.isTemplate = true;\r\n\t\t// Add accessibility options to bullet\r\n\t\t// If there are relatively few bullets, make them focusable\r\n\t\tthis.events.once(\"datavalidated\", (ev) => {\r\n\t\t\tif (this.itemsFocusable()) {\r\n\t\t\t\tbullet.focusable = true;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tthis.invalidate();\r\n\t}\r\n\r\n\t/**\r\n\t * removes bullets\r\n\t *\r\n\t * @param event  List event\r\n\t */\r\n\tprotected removeBullet(event: IListEvents<Sprite>[\"removed\"]) {\r\n\t\tlet bullet: Sprite = event.oldValue;\r\n\r\n\t\tthis.dataItems.each((dataItem) => {\r\n\t\t\tlet eachBullet = dataItem.bullets.getKey(bullet.uid);\r\n\t\t\tif (eachBullet) {\r\n\t\t\t\teachBullet.dispose();\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\tthis.invalidate();\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data items.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateDataItems() {\r\n\t\tsuper.validateDataItems();\r\n\t\tthis.processValues(false);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns first value for the specific key in the series.\r\n\t *\r\n\t * @param key  Key\r\n\t * @return Value\r\n\t * @todo Description\r\n\t * @todo Convert to propert object property iterator\r\n\t */\r\n\tprotected getFirstValue(key: string, startIndex: number): number {\r\n\t\t// find first\r\n\t\t/*\r\n\t\treturn $iter.findMap(this.dataItems.iterator(), (dataItem) => {\r\n\t\t\tfor (let key in dataItem.values) {\r\n\t\t\t\tif ($object.hasKey(dataItem.values, key)) {\r\n\t\t\t\t\tlet value: number = dataItem.values[key].workingValue;\r\n\t\t\t\t\tif ($type.isNumber(value)) {\r\n\t\t\t\t\t\treturn value;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn null;\r\n\t\t});*/\r\n\r\n\t\t//if (startIndex > 0 && startIndex < this.dataItems.length - 1) {\r\n\t\t//startIndex++;\r\n\t\t//}\r\n\t\tfor (let i = startIndex; i >= 0; i--) {\r\n\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\tlet value: number = dataItem.getActualWorkingValue(key);\r\n\t\t\tif ($type.isNumber(value)) {\r\n\t\t\t\treturn value;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns first value for the specific key in the series.\r\n\t *\r\n\t * @param key  Key\r\n\t * @return Value\r\n\t * @todo Description\r\n\t * @todo Convert to propert object property iterator\r\n\t */\r\n\tprotected getAbsoluteFirstValue(key: string): number {\r\n\t\tfor (let i = 0; i < this.dataItems.length; i++) {\r\n\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\tlet value: number = dataItem.values[key].value;\r\n\t\t\tif ($type.isNumber(value)) {\r\n\t\t\t\treturn value;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n\t/**\r\n\t * [rangeChangeUpdate description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected rangeChangeUpdate() {\r\n\t\tsuper.rangeChangeUpdate();\r\n\t\tthis.processValues(true);\r\n\t}\r\n\r\n\t/**\r\n\t * [processValues description]\r\n\t *\r\n\t * @todo Description\r\n\t * @todo Convert to propert object property iterator\r\n\t * @param dataItems [description]\r\n\t */\r\n\tprotected processValues(working: boolean) {\r\n\t\tif (!this.simplifiedProcessing) {\r\n\t\t\tlet dataItems = this.dataItems;\r\n\r\n\t\t\tlet count: { [index: string]: number } = {};\r\n\t\t\tlet sum: { [index: string]: number } = {};\r\n\t\t\tlet absoluteSum: { [index: string]: number } = {};\r\n\t\t\tlet low: { [index: string]: number } = {};\r\n\t\t\tlet high: { [index: string]: number } = {};\r\n\t\t\tlet open: { [index: string]: number } = {};\r\n\t\t\tlet close: { [index: string]: number } = {};\r\n\t\t\tlet previous: { [index: string]: number } = {};\r\n\t\t\tlet first: { [index: string]: number } = {};\r\n\t\t\tlet absoluteFirst: { [index: string]: number } = {};\r\n\r\n\t\t\t//let duration: number = 0; // todo: check if series uses selection.change or selection.change.percent and set duration to interpolationduration\r\n\r\n\t\t\tlet startIndex: number = $math.max(0, this.startIndex);\r\n\t\t\tstartIndex = $math.min(startIndex, this.dataItems.length);\r\n\r\n\t\t\tlet endIndex: number = $math.min(this.endIndex, this.dataItems.length);\r\n\r\n\t\t\tif (!$type.isNumber(startIndex)) {\r\n\t\t\t\tstartIndex = 0;\r\n\t\t\t}\r\n\r\n\t\t\tif (!$type.isNumber(endIndex)) {\r\n\t\t\t\tendIndex = this.dataItems.length;\r\n\t\t\t}\r\n\r\n\t\t\tif (startIndex > 0) {\r\n\t\t\t\tlet dataItem = dataItems.getIndex(startIndex - 1);\r\n\r\n\t\t\t\t$object.each(dataItem.values, (key, values) => {\r\n\t\t\t\t\tlet value: number = dataItem.getActualWorkingValue(key);\r\n\r\n\t\t\t\t\tif ($type.isNumber(value)) {\r\n\t\t\t\t\t\t// save previous\r\n\t\t\t\t\t\tprevious[key] = value;\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tfor (let i = startIndex; i < endIndex; i++) {\r\n\t\t\t\tlet dataItem = dataItems.getIndex(i);\r\n\r\n\t\t\t\t$object.each(dataItem.values, (key, values) => {\r\n\t\t\t\t\tlet value: number = dataItem.getActualWorkingValue(key);\r\n\r\n\t\t\t\t\t//if (i >= startIndex && i <= endIndex) { // do not add to count, sum etc if it is not within start/end index\r\n\t\t\t\t\tif ($type.isNumber(value)) {\r\n\r\n\t\t\t\t\t\t// count values\r\n\t\t\t\t\t\tif (!$type.isNumber(count[key])) {\r\n\t\t\t\t\t\t\tcount[key] = 0;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tcount[key]++;\r\n\r\n\t\t\t\t\t\t// sum values\r\n\t\t\t\t\t\tif (!$type.isNumber(sum[key])) {\r\n\t\t\t\t\t\t\tsum[key] = 0;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tsum[key] += value;\r\n\r\n\t\t\t\t\t\t// absolute sum values\r\n\t\t\t\t\t\tif (!$type.isNumber(absoluteSum[key])) {\r\n\t\t\t\t\t\t\tabsoluteSum[key] = 0;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tabsoluteSum[key] += Math.abs(value);\r\n\r\n\t\t\t\t\t\t// open\r\n\t\t\t\t\t\tif (!$type.isNumber(open[key])) {\r\n\t\t\t\t\t\t\topen[key] = value;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// close\r\n\t\t\t\t\t\tclose[key] = value;\r\n\r\n\t\t\t\t\t\t// low\r\n\t\t\t\t\t\tif (!$type.isNumber(low[key])) {\r\n\t\t\t\t\t\t\tlow[key] = value;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tif (low[key] > value) {\r\n\t\t\t\t\t\t\t\tlow[key] = value;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// high\r\n\t\t\t\t\t\tif (!$type.isNumber(high[key])) {\r\n\t\t\t\t\t\t\thigh[key] = value;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tif (high[key] < value) {\r\n\t\t\t\t\t\t\t\thigh[key] = value;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (!$type.isNumber(first[key])) {\r\n\t\t\t\t\t\t\tfirst[key] = this.getFirstValue(key, startIndex);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (!$type.isNumber(absoluteFirst[key])) {\r\n\t\t\t\t\t\t\tabsoluteFirst[key] = this.getAbsoluteFirstValue(key);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// change\r\n\t\t\t\t\t\tdataItem.setCalculatedValue(key, value - first[key], \"change\");\r\n\t\t\t\t\t\t// change from start percent\r\n\t\t\t\t\t\t// will fail if first value is 0\r\n\t\t\t\t\t\tdataItem.setCalculatedValue(key, (value - first[key]) / first[key] * 100, \"changePercent\");\r\n\r\n\t\t\t\t\t\tdataItem.setCalculatedValue(key, (value - absoluteFirst[key]), \"startChange\");\r\n\r\n\t\t\t\t\t\tdataItem.setCalculatedValue(key, (value - absoluteFirst[key]) / absoluteFirst[key] * 100, \"startChangePercent\");\r\n\r\n\t\t\t\t\t\t// previous change\r\n\t\t\t\t\t\tlet prevValue: number = previous[key];\r\n\t\t\t\t\t\tif (!$type.isNumber(prevValue)) {\r\n\t\t\t\t\t\t\tprevValue = value;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tdataItem.setCalculatedValue(key, value - prevValue, \"previousChange\");\r\n\t\t\t\t\t\t// previous change percent\r\n\t\t\t\t\t\tdataItem.setCalculatedValue(key, (value - prevValue) / prevValue * 100, \"previousChangePercent\");\r\n\r\n\t\t\t\t\t\t// save previous\r\n\t\t\t\t\t\tprevious[key] = value;\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tif (this.calculatePercent) {\r\n\t\t\t\tfor (let i = startIndex; i < endIndex; i++) {\r\n\t\t\t\t\tlet dataItem = dataItems.getIndex(i);\r\n\r\n\t\t\t\t\t$object.each(dataItem.values, (key) => {\r\n\t\t\t\t\t\tlet ksum: number = absoluteSum[key];\r\n\r\n\t\t\t\t\t\tlet value: number = dataItem.getActualWorkingValue(key);\r\n\r\n\t\t\t\t\t\tif ($type.isNumber(value)) {\r\n\t\t\t\t\t\t\tif (ksum > 0) {\r\n\t\t\t\t\t\t\t\tif (this.usePercentHack) {\r\n\t\t\t\t\t\t\t\t\t// this hack is made in order to make it possible to animate single slice to 0\r\n\t\t\t\t\t\t\t\t\t// if there is only one slice left, percent value is always 100%, so it won't animate\r\n\t\t\t\t\t\t\t\t\t// so we use real value of a slice instead of current value\r\n\t\t\t\t\t\t\t\t\tif (value == ksum) {\r\n\t\t\t\t\t\t\t\t\t\tksum = dataItem.values[key].value;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\tlet percent = value / ksum * 100;\r\n\r\n\t\t\t\t\t\t\t\tdataItem.setCalculatedValue(key, percent, \"percent\");\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\tdataItem.setCalculatedValue(key, 0, \"percent\");\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\r\n\t\t\t// calculate one before first (cant do that in cycle, as we don't know open yet\r\n\t\t\t// when drawing line chart we should draw line to the invisible data point to the left, otherwise the line will always look like it starts from the selected point\r\n\t\t\t// so we do startIndex - 1\r\n\t\t\tif (startIndex > 0) {\r\n\t\t\t\tlet zeroItem: this[\"_dataItem\"] = dataItems.getIndex(startIndex - 1);\r\n\r\n\t\t\t\t$object.each(zeroItem.values, (key) => {\r\n\t\t\t\t\tlet value = zeroItem.values[key].value;\r\n\t\t\t\t\t// change\r\n\t\t\t\t\tzeroItem.setCalculatedValue(key, value - open[key], \"change\");\r\n\t\t\t\t\t// change percent\r\n\t\t\t\t\tzeroItem.setCalculatedValue(key, (value - open[key]) / open[key] * 100, \"changePercent\");\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\t// we save various data like sum, average to dataPoint of the series\r\n\t\t\tlet dataItem: DataItem = this.dataItem;\r\n\t\t\t$object.each(dataItem.values, (key) => {\r\n\t\t\t\tdataItem.setCalculatedValue(key, sum[key], \"sum\");\r\n\t\t\t\tdataItem.setCalculatedValue(key, absoluteSum[key], \"absoluteSum\");\r\n\t\t\t\tdataItem.setCalculatedValue(key, sum[key] / count[key], \"average\");\r\n\t\t\t\tdataItem.setCalculatedValue(key, open[key], \"open\");\r\n\t\t\t\tdataItem.setCalculatedValue(key, close[key], \"close\");\r\n\t\t\t\tdataItem.setCalculatedValue(key, low[key], \"low\");\r\n\t\t\t\tdataItem.setCalculatedValue(key, high[key], \"high\");\r\n\t\t\t\tdataItem.setCalculatedValue(key, count[key], \"count\");\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\r\n\t\tif ($utils.isIE()) {\r\n\t\t\tthis.filters.clear();\r\n\t\t}\r\n\r\n\t\t$iter.each(this.axisRanges.iterator(), (axisRange) => {\r\n\t\t\t//axisRange.contents.disposeChildren(); // not good for columns, as they are reused\r\n\t\t\t//\t\t\taxisRange.appendChildren();\r\n\t\t\taxisRange.validate();\r\n\t\t});\r\n\r\n\t\tsuper.validate();\r\n\t\tlet bulletsContainer = this.bulletsContainer;\r\n\t\tbulletsContainer.fill = this.fill;\r\n\t\tbulletsContainer.stroke = this.stroke;\r\n\t\tbulletsContainer.x = this.pixelX;\r\n\t\tbulletsContainer.y = this.pixelY;\r\n\r\n\t\tif (this.bulletsContainer.children.length > 0) {\r\n\t\t\tif (this._showBullets) {\r\n\r\n\t\t\t\tfor (let i = 0; i < this.startIndex; i++) {\r\n\t\t\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\t\t\tif (dataItem) {\r\n\t\t\t\t\t\tdataItem.bullets.each((key, bullet) => {\r\n\t\t\t\t\t\t\tbullet.__disabled = true;\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfor (let i = this.dataItems.length - 1; i > this.endIndex; i--) {\r\n\t\t\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\t\t\tif (dataItem) {\r\n\t\t\t\t\t\tdataItem.bullets.each((key, bullet) => {\r\n\t\t\t\t\t\t\tbullet.__disabled = true;\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.bulletsContainer.children.each((bullet) => {\r\n\t\t\t\t\tbullet.__disabled = true;\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.updateTooltipBounds();\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic updateTooltipBounds() {\r\n\t\tif (this.topParent) {\r\n\t\t\tlet x = 0;\r\n\t\t\tlet y = 0;\r\n\t\t\tlet w = this.topParent.maxWidth;\r\n\t\t\tlet h = this.topParent.maxHeight;\r\n\t\t\tlet rect = { x: x, y: y, width: w, height: h };\r\n\r\n\t\t\tthis.tooltip.setBounds(rect);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\tprotected shouldCreateBullet(dataItem: this[\"_dataItem\"], bulletTemplate: Sprite): boolean {\r\n\t\treturn true;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Validates data item's element, effectively redrawing it.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic validateDataElement(dataItem: this[\"_dataItem\"]): void {\r\n\t\tsuper.validateDataElement(dataItem);\r\n\r\n\t\tif (this._showBullets) {\r\n\t\t\tif (!this.isHidden) {\r\n\t\t\t\tthis.bulletsContainer.visible = true;\r\n\t\t\t}\r\n\t\t\tthis.bullets.each((bulletTemplate) => {\r\n\t\t\t\t// always better to use the same, this helps to avoid redrawing\r\n\t\t\t\tlet bullet: Sprite = <Sprite>dataItem.bullets.getKey(bulletTemplate.uid);\r\n\r\n\t\t\t\tif (this.shouldCreateBullet(dataItem, bulletTemplate)) {\r\n\t\t\t\t\tif (!bullet) {\r\n\r\n\t\t\t\t\t\tlet disabledField = bulletTemplate.propertyFields.disabled;\r\n\t\t\t\t\t\tlet dataContext = <any>dataItem.dataContext;\r\n\t\t\t\t\t\tif (disabledField && dataContext && dataContext[disabledField] === false) {\r\n\t\t\t\t\t\t\tbulletTemplate.applyOnClones = false;\r\n\t\t\t\t\t\t\tbulletTemplate.disabled = false;\r\n\t\t\t\t\t\t\tbullet = bulletTemplate.clone();\r\n\t\t\t\t\t\t\tbulletTemplate.disabled = true;\r\n\t\t\t\t\t\t\tbulletTemplate.applyOnClones = true;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tbullet = bulletTemplate.clone();\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tbullet.shouldClone = false;\r\n\t\t\t\t\t\tdataItem.addSprite(bullet);\r\n\r\n\t\t\t\t\t\tif (!this.visible || this.isHiding) {\r\n\t\t\t\t\t\t\tbullet.hide(0);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tlet currentDataItem: this[\"_dataItem\"] = <this[\"_dataItem\"]>bullet.dataItem;\r\n\t\t\t\t\tif (currentDataItem != dataItem) {\r\n\t\t\t\t\t\t// set to undefined in order not to reuse\r\n\t\t\t\t\t\tif (currentDataItem) {\r\n\t\t\t\t\t\t\tcurrentDataItem.bullets.setKey(bulletTemplate.uid, undefined);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tlet readerText = this.itemReaderText;\r\n\r\n\t\t\t\t\t\tif (bullet instanceof Bullet) {\r\n\t\t\t\t\t\t\tif (!readerText) {\r\n\t\t\t\t\t\t\t\treaderText = (\"{\" + bullet.xField + \"}: {\" + bullet.yField + \"}\");\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif (bullet.isDynamic) {\r\n\t\t\t\t\t\t\t\tdataItem.events.on(\"workingvaluechanged\", bullet.deepInvalidate, bullet, false);\r\n\t\t\t\t\t\t\t\t//dataItem.events.on(\"calculatedvaluechanged\", bullet.deepInvalidate, bullet, false);\r\n\t\t\t\t\t\t\t\tthis.dataItem.events.on(\"workingvaluechanged\", bullet.deepInvalidate, bullet, false);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tbullet.deepInvalidate();\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// Add accessibility to bullet\r\n\t\t\t\t\t\tif (bullet.focusable) {\r\n\t\t\t\t\t\t\tbullet.events.on(\"focus\", (ev) => {\r\n\t\t\t\t\t\t\t\tbullet.readerTitle = this.populateString(readerText, bullet.dataItem);\r\n\t\t\t\t\t\t\t}, undefined, false);\r\n\t\t\t\t\t\t\tbullet.events.on(\"blur\", (ev) => {\r\n\t\t\t\t\t\t\t\tbullet.readerTitle = \"\";\r\n\t\t\t\t\t\t\t}, undefined, false);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (bullet.hoverable) {\r\n\t\t\t\t\t\t\tbullet.events.on(\"over\", (ev) => {\r\n\t\t\t\t\t\t\t\tbullet.readerTitle = this.populateString(readerText, bullet.dataItem);\r\n\t\t\t\t\t\t\t}, undefined, false);\r\n\t\t\t\t\t\t\tbullet.events.on(\"out\", (ev) => {\r\n\t\t\t\t\t\t\t\tbullet.readerTitle = \"\";\r\n\t\t\t\t\t\t\t}, undefined, false);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tbullet.parent = this.bulletsContainer;\r\n\t\t\t\t\tdataItem.bullets.setKey(bulletTemplate.uid, bullet);\r\n\r\n\t\t\t\t\t// pass max w/h so we'd know if we should show/hide somethings\r\n\t\t\t\t\tbullet.maxWidth = dataItem.itemWidth;\r\n\t\t\t\t\tbullet.maxHeight = dataItem.itemHeight;\r\n\t\t\t\t\tbullet.__disabled = false;\r\n\r\n\t\t\t\t\tthis.positionBullet(bullet);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tif (bullet) {\r\n\t\t\t\t\t\tbullet.__disabled = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.bulletsContainer.visible = false;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [handleDataItemWorkingValueChange description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic handleDataItemWorkingValueChange(dataItem?: this[\"_dataItem\"], name?: string): void {\r\n\t\tif (!this.dataRangeInvalid) {\r\n\t\t\tthis.invalidateProcessedData();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Should this series excluded from the axis scale calculations?\r\n\t *\r\n\t * @default false\r\n\t * @param value  Exclude from calculations?\r\n\t */\r\n\tpublic set ignoreMinMax(value: boolean) {\r\n\t\tthis._ignoreMinMax = value;\r\n\t\tthis.invalidateDataItems();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Exclude from calculations?\r\n\t */\r\n\tpublic get ignoreMinMax(): boolean {\r\n\t\treturn this._ignoreMinMax;\r\n\t}\r\n\r\n\t/**\r\n\t * Create a mask for the series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic createMask(): void {\r\n\r\n\t\t// A placeholder method for extending classes to override.\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Process axis range after it has been added to the list.\r\n\t *\r\n\t * @param event  Event\r\n\t */\r\n\tprotected processAxisRange(event: IListEvents<AxisDataItem>[\"inserted\"]): void {\r\n\t\t// create container if not existing\r\n\t\tif (!this.rangesContainer) {\r\n\t\t\tthis.rangesContainer = this.createChild(Container);\r\n\t\t\tthis.rangesContainer.shouldClone = false;\r\n\t\t\tthis.rangesContainer.isMeasured = false;\r\n\t\t}\r\n\r\n\t\tlet axisRange: AxisDataItem = event.newValue;\r\n\t\tif (axisRange) {\r\n\t\t\taxisRange.contents.parent = this.rangesContainer;\r\n\t\t\taxisRange.isRange = true;\r\n\t\t\taxisRange.events.on(\"valuechanged\", this.invalidateDataItems, this, false);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [getAxisField description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param axis  [description]\r\n\t * @return [description]\r\n\t */\r\n\tpublic getAxisField(axis: Axis): string {\r\n\t\treturn;\r\n\t}\r\n\r\n\t/**\r\n\t * Shows the tooltip at specific position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param xPosition  X\r\n\t * @param yPosition  Y\r\n\t */\r\n\tpublic showTooltipAtPosition(xPosition: number, yPosition: number): void {\r\n\r\n\t\t// Placeholder method for extending classes to override.\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Minimal distance between data points in pixels.\r\n\t *\r\n\t * If distance gets smaller than this, bullets are turned off to avoid\r\n\t * overlapping.\r\n\t *\r\n\t * `0` (zero) disables this behavior.\r\n\t *\r\n\t * IMPORTANT: This setting will work only when Series' base axis\r\n\t * is [[CategoryAxis]] or [[DateAxis]]. If base axis is [[ValueAxis]] the\r\n\t * setting will be ignored, because it would be a huge overhead to measure\r\n\t * distance between each and every bullet.\r\n\t *\r\n\t * @default 0\r\n\t * @param value  Distance (px)\r\n\t */\r\n\tpublic set minBulletDistance(value: number) {\r\n\t\tthis.setPropertyValue(\"minBulletDistance\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Distance (px)\r\n\t */\r\n\tpublic get minBulletDistance(): number {\r\n\t\treturn this.getPropertyValue(\"minBulletDistance\");\r\n\t}\r\n\r\n\t/**\r\n\t * A list of bullets that will be added to each and every items in the\r\n\t * series.\r\n\t *\r\n\t * You can push any object that is a descendant of a [[Sprite]] here. All\r\n\t * items added to this list will be copied and used as a bullet on all data\r\n\t * items, including their properties, events, etc.\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/concepts/bullets/} for more info about the concept of Bullets\r\n\t * @return List of bullets.\r\n\t */\r\n\tpublic get bullets(): ListTemplate<Sprite> {\r\n\t\tif (!this._bullets) {\r\n\t\t\tthis._bullets = new ListTemplate<Sprite>(new Bullet());\r\n\t\t\tthis._bullets.template.virtualParent = this;\r\n\t\t\tthis._bullets.events.on(\"inserted\", this.processBullet, this, false);\r\n\t\t\tthis._bullets.events.on(\"removed\", this.removeBullet, this, false);\r\n\r\n\t\t\tthis._disposers.push(new ListDisposer(this._bullets));\r\n\t\t\tthis._disposers.push(this._bullets.template);\r\n\t\t}\r\n\t\treturn this._bullets;\r\n\t}\r\n\r\n\t/**\r\n\t * Binds related legend data item's visual settings to this series' visual\r\n\t * settings.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param marker  Legend item container\r\n\t */\r\n\tpublic createLegendMarker(marker: Container): void {\r\n\r\n\t\t// This is a placeholder method for extending classes to override.\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Should the series be hidden in legend?\r\n\t *\r\n\t * @param value Hidden in legend?\r\n\t */\r\n\tpublic set hiddenInLegend(value: boolean) {\r\n\t\tif (this.setPropertyValue(\"hiddenInLegend\", value)) {\r\n\t\t\tif (this.chart) {\r\n\t\t\t\tthis.chart.feedLegend();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Hidden in legend?\r\n\t */\r\n\tpublic get hiddenInLegend(): boolean {\r\n\t\treturn this.getPropertyValue(\"hiddenInLegend\");\r\n\t}\r\n\r\n\t/**\r\n\t * Series' name.\r\n\t *\r\n\t * @param value  Name\r\n\t */\r\n\tpublic set name(value: string) {\r\n\t\tthis.setPropertyValue(\"name\", value);\r\n\r\n\t\tlet legendDataItem = this.legendDataItem;\r\n\t\tif (legendDataItem) {\r\n\t\t\tlegendDataItem.component.invalidate();\r\n\t\t\tlegendDataItem.component.invalidateRawData();\r\n\t\t}\r\n\r\n\t\tthis.readerTitle = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Name\r\n\t */\r\n\tpublic get name(): string {\r\n\t\treturn this.getPropertyValue(\"name\");\r\n\t}\r\n\r\n\t/**\r\n\t * Screen reader text to be applied to each individual data item, such\r\n\t * as bullets, columns or slices.\r\n\t *\r\n\t * The template can contain field reference meta codes, i.e. `{dateX}`,\r\n\t * `{valueY}`, etc.\r\n\t *\r\n\t * Any text formatting options, e.g. `[bold]` will be ignored.\r\n\t *\r\n\t * @param value Screen reader text template\r\n\t */\r\n\tpublic set itemReaderText(value: string) {\r\n\t\tthis._itemReaderText = value;\r\n\t\tthis._itemReaderTextChanged = true;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Screen reader text template\r\n\t */\r\n\tpublic get itemReaderText(): string {\r\n\r\n\t\t// Get explicitly set reader text\r\n\t\tlet readerText = this._itemReaderText;\r\n\r\n\t\t// Not set? Let's try something else\r\n\t\tif (!readerText) {\r\n\r\n\t\t\t// Tooltip text?\r\n\t\t\tif (this.tooltipText) {\r\n\t\t\t\treaderText = $utils.plainText(this.tooltipText);\r\n\t\t\t}\r\n\t\t\telse if (this.tooltipHTML) {\r\n\t\t\t\treaderText = $utils.plainText(this.tooltipHTML);\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif (!this._adapterO) {\r\n\t\t\treturn readerText;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this._adapterO.apply(\"itemReaderText\", readerText);\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns if number of data items in the series are beyond non-focusable\r\n\t * count and should not be available for TAB-through.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return Items focusable?\r\n\t */\r\n\tpublic itemsFocusable(): boolean {\r\n\t\treturn this.dataItems.length >= this.skipFocusThreshold ? false : true;\r\n\t}\r\n\r\n\t/**\r\n\t * Legend data item that corresponds to this series.\r\n\t *\r\n\t * @param value  Data item\r\n\t */\r\n\tpublic set legendDataItem(value: LegendDataItem) {\r\n\t\tthis._legendDataItem = value;\r\n\t\tthis._legendDataItem.itemContainer.deepInvalidate();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Data item\r\n\t */\r\n\tpublic get legendDataItem(): LegendDataItem {\r\n\t\treturn this._legendDataItem;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates corresponding legend data item with current values.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic updateLegendValue(dataItem?: this[\"_dataItem\"], notRange?: boolean) {\r\n\t\t// if this series has legend item\r\n\t\tif (this.legendDataItem) {\r\n\r\n\t\t\tlet legendSettings: LegendSettings = this.legendSettings;\r\n\t\t\tlet legendDataItem = this.legendDataItem;\r\n\t\t\tlet label: Label = legendDataItem.label;\r\n\t\t\tlet valueLabel: Label = legendDataItem.valueLabel;\r\n\r\n\t\t\t// update legend\r\n\t\t\tif ((dataItem && !dataItem.isDisposed())|| notRange) {\r\n\t\t\t\tif (valueLabel) {\r\n\t\t\t\t\tif (legendSettings.itemValueText) {\r\n\t\t\t\t\t\tvalueLabel.text = legendSettings.itemValueText;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tvalueLabel.dataItem = dataItem;\r\n\t\t\t\t}\r\n\t\t\t\tif (label) {\r\n\t\t\t\t\tif (legendSettings.itemLabelText) {\r\n\t\t\t\t\t\tlabel.text = legendSettings.itemLabelText;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tlabel.dataItem = dataItem;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif (label) {\r\n\t\t\t\t\t// if itemLabelText is set, means we have to reset label even if labelText is not set\r\n\t\t\t\t\tif (legendSettings.labelText || legendSettings.itemLabelText != undefined) {\r\n\t\t\t\t\t\tlabel.text = legendSettings.labelText;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tlabel.dataItem = this.dataItem;\r\n\t\t\t\t}\r\n\t\t\t\tif (valueLabel) {\r\n\t\t\t\t\tif (legendSettings.valueText || legendSettings.itemValueText != undefined) {\r\n\t\t\t\t\t\tvalueLabel.text = legendSettings.valueText;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tvalueLabel.dataItem = this.dataItem;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all properties from another instance of [[Series]].\r\n\t *\r\n\t * @param source  Source series\r\n\t */\r\n\tpublic copyFrom(source: this) {\r\n\t\tthis.bullets.copyFrom(source.bullets);\r\n\t\tthis.bulletsContainer.copyFrom(source.bulletsContainer);\r\n\t\tthis.calculatePercent = source.calculatePercent;\r\n\t\tthis.usePercentHack = source.usePercentHack;\r\n\t\tthis.simplifiedProcessing = source.simplifiedProcessing;\r\n\t\tsuper.copyFrom(source);\r\n\t}\r\n\r\n\t/**\r\n\t * Displays a modal or console message with error, and halts any further\r\n\t * processing of this element.\r\n\t *\r\n\t * @param e Error\r\n\t */\r\n\tpublic raiseCriticalError(e: Error) {\r\n\t\tif (this._chart && this._chart.modal) {\r\n\t\t\tthis._chart.modal.content = this._chart.adapter.apply(\"criticalError\", e).message;\r\n\t\t\tthis._chart.modal.closable = false;\r\n\t\t\tif (!options.suppressErrors) {\r\n\t\t\t\tthis._chart.modal.open();\r\n\t\t\t}\r\n\t\t\tthis._chart.disabled = true;\r\n\t\t}\r\n\r\n\t\tif (options.verbose) {\r\n\t\t\tconsole.log(e);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Applies filters to the element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected applyFilters() {\r\n\t\tsuper.applyFilters();\r\n\t\tthis.bulletsContainer.filters.clear();\r\n\r\n\t\t// copyFrom of a list copies, does not clone\r\n\t\t$iter.each(this.filters.iterator(), (filter) => {\r\n\t\t\tthis.bulletsContainer.filters.push(filter.clone());\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * A list of heat rules to apply to series' elements based on the value\r\n\t * of the data item.\r\n\t *\r\n\t * Heat rules can be any \"numeric\" (including `Color`) property, and can also\r\n\t * be applied to child objects of series, like columns, bullets, etc.\r\n\t *\r\n\t * E.g.:\r\n\t *\r\n\t * ```TypeScript\r\n\t * series.heatRules.push({\r\n\t *  \"target\": series.columns.template,\r\n\t *  \"property\": \"fill\",\r\n\t *  \"min\": am4core.color(\"#F5DBCB\"),\r\n\t *  \"max\": am4core.color(\"#ED7B84\"),\r\n\t *  \"dataField\": \"valueY\"\r\n\t *});\r\n\t *```\r\n\t * ```Javacript\r\n\t * series.heatRules.push({\r\n\t *  \"target\": series.columns.template,\r\n\t *  \"property\": \"fill\",\r\n\t *  \"min\": am4core.color(\"#F5DBCB\"),\r\n\t *  \"max\": am4core.color(\"#ED7B84\"),\r\n\t *  \"dataField\": \"valueY\"\r\n\t *});\r\n\t *```\r\n\t *```JSON\r\n\t *{\r\n\t *  // ...\r\n\t *  \"series\": [{\r\n\t *    \"type\": \"ColumnSeries\",\r\n\t *    \"heatRules\": [{\r\n\t *      \"target\": \"columns.template\",\r\n\t *      \"property\": \"fill\",\r\n\t *      \"min\": \"#F5DBCB\",\r\n\t *      \"max\": \"#ED7B84\",\r\n\t *      \"dataField\": \"valueY\"\r\n\t *    }]\r\n\t *  }]\r\n\t *}\r\n\t *```\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/concepts/series/#Heat_maps} for more about heat rules\r\n\t * @return  Heat rules\r\n\t */\r\n\r\n\tpublic get heatRules(): List<IHeatRule> {\r\n\t\tif (!this._heatRules) {\r\n\t\t\tthis._heatRules = new List<IHeatRule>();\r\n\t\t\tthis._heatRules.events.on(\"inserted\", (event) => {\r\n\t\t\t\tlet heatRule = event.newValue;\r\n\t\t\t\tlet target = heatRule.target;\r\n\r\n\t\t\t\tif (target) {\r\n\t\t\t\t\tlet dataField = heatRule.dataField;\r\n\r\n\t\t\t\t\tif (!$type.hasValue(dataField)) {\r\n\t\t\t\t\t\tdataField = \"value\";\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tlet seriesDataItem = this.dataItem;\r\n\t\t\t\t\tlet property = heatRule.property;\r\n\r\n\t\t\t\t\tlet minValue = $type.toNumber(heatRule.minValue);\r\n\t\t\t\t\tlet maxValue = $type.toNumber(heatRule.maxValue);\r\n\r\n\t\t\t\t\tif (!$type.isNumber(minValue) && !$type.isNumber(maxValue)) {\r\n\t\t\t\t\t\tthis.dataItem.events.on(\"calculatedvaluechanged\", (event) => {\r\n\t\t\t\t\t\t\tif (event.property == dataField) {\r\n\t\t\t\t\t\t\t\t$iter.each(this.dataItems.iterator(), (dataItem) => {\r\n\t\t\t\t\t\t\t\t\tlet foundSprite = false;\r\n\t\t\t\t\t\t\t\t\t$array.each(dataItem.sprites, (sprite) => {\r\n\t\t\t\t\t\t\t\t\t\tif (sprite.clonedFrom == target) {\r\n\t\t\t\t\t\t\t\t\t\t\tlet anySprite = <any>sprite;\r\n\t\t\t\t\t\t\t\t\t\t\tanySprite[property] = anySprite[property];\r\n\t\t\t\t\t\t\t\t\t\t\tfoundSprite = true;\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\t\t\t\tif (!foundSprite) {\r\n\t\t\t\t\t\t\t\t\t\t$array.each(dataItem.sprites, (sprite) => {\r\n\t\t\t\t\t\t\t\t\t\t\tif (sprite instanceof Container) {\r\n\t\t\t\t\t\t\t\t\t\t\t\t$iter.each(sprite.children.iterator(), (child) => {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tif (child.className == target.className) {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tlet anyChild = <any>child;\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tanyChild[property] = anyChild[property];\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t// giveup here\r\n\t\t\t\t\t\t\t\t\t\t\t\t\telse if (child instanceof Container) {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tchild.deepInvalidate();\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tthis.dataItems.template.events.on(\"workingvaluechanged\", (event) => {\r\n\t\t\t\t\t\tif (event.property == dataField) {\r\n\t\t\t\t\t\t\tlet dataItem = event.target;\r\n\t\t\t\t\t\t\tlet foundSprite = false;\r\n\t\t\t\t\t\t\t$array.each(dataItem.sprites, (sprite) => {\r\n\t\t\t\t\t\t\t\tif (sprite.clonedFrom == target) {\r\n\t\t\t\t\t\t\t\t\tlet anySprite = <any>sprite;\r\n\t\t\t\t\t\t\t\t\tanySprite[property] = anySprite[property];\r\n\t\t\t\t\t\t\t\t\tfoundSprite = true;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\t\tif (!foundSprite) {\r\n\t\t\t\t\t\t\t\t$array.each(dataItem.sprites, (sprite) => {\r\n\t\t\t\t\t\t\t\t\tif (sprite instanceof Container) {\r\n\t\t\t\t\t\t\t\t\t\t$iter.each(sprite.children.iterator(), (child) => {\r\n\t\t\t\t\t\t\t\t\t\t\tif (child.className == target.className) {\r\n\t\t\t\t\t\t\t\t\t\t\t\tlet anyChild = <any>child;\r\n\t\t\t\t\t\t\t\t\t\t\t\tanyChild[property] = anyChild[property];\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t// givup here\r\n\t\t\t\t\t\t\t\t\t\t\telse if (child instanceof Container) {\r\n\t\t\t\t\t\t\t\t\t\t\t\tchild.deepInvalidate();\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t})\r\n\r\n\r\n\t\t\t\t\ttarget.adapter.add(<any>property, (value, ruleTarget, property) => {\r\n\r\n\t\t\t\t\t\tlet minValue = $type.toNumber(heatRule.minValue);\r\n\t\t\t\t\t\tlet maxValue = $type.toNumber(heatRule.maxValue);\r\n\r\n\t\t\t\t\t\tlet min = heatRule.min;\r\n\t\t\t\t\t\tlet max = heatRule.max;\r\n\r\n\t\t\t\t\t\tif (ruleTarget instanceof Sprite) {\r\n\t\t\t\t\t\t\tlet anySprite = <any>ruleTarget;\r\n\t\t\t\t\t\t\tlet propertyField = anySprite.propertyFields[property];\r\n\t\t\t\t\t\t\tif (propertyField && ruleTarget.dataItem) {\r\n\t\t\t\t\t\t\t\tlet dataContext = <any>ruleTarget.dataItem.dataContext;\r\n\t\t\t\t\t\t\t\tif (dataContext && $type.hasValue(dataContext[propertyField])) {\r\n\t\t\t\t\t\t\t\t\treturn value;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tlet dataItem: SeriesDataItem = <SeriesDataItem>ruleTarget.dataItem;\r\n\r\n\t\t\t\t\t\tif (!$type.isNumber(minValue)) {\r\n\t\t\t\t\t\t\tminValue = seriesDataItem.values[dataField].low;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (!$type.isNumber(maxValue)) {\r\n\t\t\t\t\t\t\tmaxValue = seriesDataItem.values[dataField].high;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (dataItem) {\r\n\t\t\t\t\t\t\tlet fieldValues = dataItem.values[dataField];\r\n\t\t\t\t\t\t\tif (fieldValues) {\r\n\t\t\t\t\t\t\t\tlet workingValue = dataItem.getActualWorkingValue(dataField);\r\n\t\t\t\t\t\t\t\tif ($type.hasValue(min) && $type.hasValue(max) && $type.isNumber(minValue) && $type.isNumber(maxValue) && $type.isNumber(workingValue)) {\r\n\r\n\t\t\t\t\t\t\t\t\tlet percent: number;\r\n\t\t\t\t\t\t\t\t\tif (heatRule.logarithmic) {\r\n\t\t\t\t\t\t\t\t\t\tpercent = (Math.log(workingValue) * Math.LOG10E - Math.log(minValue) * Math.LOG10E) / ((Math.log(maxValue) * Math.LOG10E - Math.log(minValue) * Math.LOG10E));\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\t\tpercent = (workingValue - minValue) / (maxValue - minValue);\r\n\t\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t\tif ($type.isNumber(workingValue) && (!$type.isNumber(percent) || Math.abs(percent) == Infinity)) {\r\n\t\t\t\t\t\t\t\t\t\tpercent = 0.5;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t// fixes problems if all values are the same\r\n\t\t\t\t\t\t\t\t\tif ($type.isNumber(min)) {\r\n\t\t\t\t\t\t\t\t\t\treturn min + (max - min) * percent;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\telse if (min instanceof Color) {\r\n\t\t\t\t\t\t\t\t\t\treturn new Color($colors.interpolate(min.rgb, max.rgb, percent));\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn value;\r\n\t\t\t\t\t})\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t\treturn this._heatRules;\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tlet heatRules;\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Set up bullets\r\n\t\t\tif ($type.hasValue(config.bullets) && $type.isArray(config.bullets)) {\r\n\t\t\t\tfor (let i = 0, len = config.bullets.length; i < len; i++) {\r\n\t\t\t\t\tlet bullets = config.bullets[i];\r\n\t\t\t\t\tif (!$type.hasValue(bullets.type)) {\r\n\t\t\t\t\t\tbullets.type = \"Bullet\";\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Let's take heatRules out of the config, so that we can process\r\n\t\t\t// them later, when bullets are already there\r\n\t\t\tif ($type.hasValue(config.heatRules) && $type.isArray(config.heatRules)) {\r\n\t\t\t\theatRules = config.heatRules;\r\n\t\t\t\tdelete config.heatRules;\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\r\n\t\t// Process heat rules again, when all other elements are ready\r\n\t\tif (heatRules) {\r\n\t\t\tfor (let i = 0, len = heatRules.length; i < len; i++) {\r\n\t\t\t\tlet rule = heatRules[i];\r\n\r\n\t\t\t\t// Resolve target\r\n\t\t\t\tlet target: any = this;\r\n\t\t\t\tif ($type.hasValue(rule.target) && $type.isString(rule.target)) {\r\n\r\n\r\n\t\t\t\t\t// Check if we can find this element by id\r\n\t\t\t\t\tif (this.map.hasKey(rule.target)) {\r\n\t\t\t\t\t\ttarget = this.map.getKey(rule.target);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tlet parts = rule.target.split(\".\");\r\n\t\t\t\t\t\tfor (let x = 0; x < parts.length; x++) {\r\n\t\t\t\t\t\t\tif (target instanceof List) {\r\n\t\t\t\t\t\t\t\tlet listitem = target.getIndex($type.toNumber(parts[x]));\r\n\t\t\t\t\t\t\t\tif (!listitem) {\r\n\t\t\t\t\t\t\t\t\ttarget = (<any>target)[parts[x]];\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\ttarget = listitem;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\tconst maybeIndex = parts[x].match(/^(.*)\\[([0-9]+)\\]/);\r\n\t\t\t\t\t\t\t\tif (maybeIndex) {\r\n\t\t\t\t\t\t\t\t\tif (target[maybeIndex[1]] instanceof List) {\r\n\t\t\t\t\t\t\t\t\t\ttarget = target[maybeIndex[1]].getIndex($type.toNumber(maybeIndex[2]));\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\t\ttarget = target[maybeIndex[1]][$type.toNumber(maybeIndex[2])];\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\ttarget = target[parts[x]];\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\trule.target = target;\r\n\r\n\t\t\t\t// Resolve colors and percents\r\n\t\t\t\tif ($type.hasValue(rule.min)) {\r\n\t\t\t\t\trule.min = this.maybeColorOrPercent(rule.min);\r\n\t\t\t\t}\r\n\t\t\t\tif ($type.hasValue(rule.max)) {\r\n\t\t\t\t\trule.max = this.maybeColorOrPercent(rule.max);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tsuper.processConfig({\r\n\t\t\t\theatRules: heatRules\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns visibility value\r\n\t * @ignore\r\n\t */\r\n\t/*\r\n\t\tprotected getVisibility(): boolean {\r\n\t\t\tlet hidden = this.getPropertyValue(\"hidden\");\r\n\t\t\tif (hidden) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\treturn super.getVisibility();\r\n\t\t\t}\r\n\t\t}*/\r\n\r\n\t/**\r\n\t * This function is used to sort element's JSON config properties, so that\r\n\t * some properties that absolutely need to be processed last, can be put at\r\n\t * the end.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param a  Element 1\r\n\t * @param b  Element 2\r\n\t * @return Sorting number\r\n\t */\r\n\tprotected configOrder(a: string, b: string): Ordering {\r\n\t\tif (a == b) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\t// Must come last\r\n\t\telse if (a == \"heatRules\") {\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t\telse if (b == \"heatRules\") {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn super.configOrder(a, b);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets `visibility` property:\r\n\t *\r\n\t * * `true` - visible\r\n\t * * `false` - hidden\r\n\t *\r\n\t * @param value  true - visible, false - hidden\r\n\t * @return Current visibility\r\n\t */\r\n\tpublic setVisibility(value: boolean) {\r\n\t\tsuper.setVisibility(value);\r\n\t\tthis.bulletsContainer.visible = value;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Series\"] = Series;\r\nregistry.registeredClasses[\"SeriesDataItem\"] = SeriesDataItem;\r\n","/**\r\n * Serial chart module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Chart, IChartProperties, IChartDataFields, IChartAdapters, IChartEvents, ChartDataItem } from \"../Chart\";\r\nimport { IListEvents, ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { Series } from \"../series/Series\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport { ColorSet } from \"../../core/utils/ColorSet\";\r\nimport { PatternSet } from \"../../core/utils/PatternSet\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $array from \"../../core/utils/Array\";\r\nimport { Disposer, IDisposer } from \"../../core/utils/Disposer\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[SerialChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class SerialChartDataItem extends ChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: SerialChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"SerialChartDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[SerialChart]].\r\n */\r\nexport interface ISerialChartDataFields extends IChartDataFields { }\r\n\r\n/**\r\n * Defines properties for [[SerialChart]]\r\n */\r\nexport interface ISerialChartProperties extends IChartProperties {\r\n\r\n\t/**\r\n\t * A set of colors to be used for chart elements, like Series, Slices, etc.\r\n\t */\r\n\tcolors?: ColorSet;\r\n\r\n\t/**\r\n\t * A set of patterns to use for fills, like Series, Slices, etc.\r\n\t *\r\n\t * @since 4.7.5\r\n\t */\r\n\tpatterns?: PatternSet;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[SerialChart]].\r\n */\r\nexport interface ISerialChartEvents extends IChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[SerialChart]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ISerialChartAdapters extends IChartAdapters, ISerialChartProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A base class for all series-based charts, like XY, Pie, etc.\r\n *\r\n * Is not useful on its own.\r\n *\r\n * @see {@link ISerialChartEvents} for a list of available Events\r\n * @see {@link ISerialChartAdapters} for a list of available Adapters\r\n */\r\nexport class SerialChart extends Chart {\r\n\r\n\t/**\r\n\t * Defines data fields.\r\n\t */\r\n\tpublic _dataFields: ISerialChartDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ISerialChartProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ISerialChartAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ISerialChartEvents;\r\n\r\n\t/**\r\n\t * Defines a type of series that this chart uses.\r\n\t */\r\n\tpublic _seriesType: Series;\r\n\r\n\t/**\r\n\t * Holds a list of [[Series]] displayed on the chart.\r\n\t */\r\n\tprotected _series: ListTemplate<this[\"_seriesType\"]>\r\n\r\n\t/**\r\n\t * Holds the reference to the container actual series are drawn in.\r\n\t */\r\n\tpublic readonly seriesContainer: Container;\r\n\r\n\t/**\r\n\t * Holds a reference to the container series' bullets are drawn in.\r\n\t */\r\n\tpublic readonly bulletsContainer: Container;\r\n\r\n\tprotected _exitDP: { [index: string]: IDisposer } = {};\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"SerialChart\";\r\n\r\n\t\tthis.colors = new ColorSet();\r\n\r\n\t\tthis._usesData = false;\r\n\r\n\t\t// Create a container for series\r\n\t\tlet seriesContainer: Container = this.chartContainer.createChild(Container);\r\n\t\tseriesContainer.shouldClone = false;\r\n\t\tseriesContainer.width = percent(100);\r\n\t\tseriesContainer.height = percent(100);\r\n\t\tseriesContainer.isMeasured = false;\r\n\t\tseriesContainer.layout = \"none\";\r\n\t\tseriesContainer.zIndex = 2;\r\n\t\tthis.seriesContainer = seriesContainer;\r\n\r\n\t\t// Create a container for bullets\r\n\t\tlet bulletsContainer: Container = this.chartContainer.createChild(Container);\r\n\t\tbulletsContainer.shouldClone = false;\r\n\t\tbulletsContainer.width = percent(100);\r\n\t\tbulletsContainer.height = percent(100);\r\n\t\tbulletsContainer.isMeasured = false;\r\n\t\tbulletsContainer.zIndex = 3;\r\n\t\tbulletsContainer.layout = \"none\";\r\n\t\tthis.bulletsContainer = bulletsContainer;\r\n\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\tpublic dispose(): void {\r\n\t\tsuper.dispose();\r\n\r\n\t\tif (this.colors) {\r\n\t\t\tthis.colors.dispose();\r\n\t\t}\r\n\r\n\t\tif (this.patterns) {\r\n\t\t\tthis.patterns.dispose();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Serial chart\");\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * A list of chart's series.\r\n\t *\r\n\t * @return Chart's series\r\n\t */\r\n\tpublic get series(): ListTemplate<this[\"_seriesType\"]> {\r\n\t\tif (!this._series) {\r\n\t\t\tthis._series = new ListTemplate<this[\"_seriesType\"]>(this.createSeries());\r\n\t\t\tthis._series.events.on(\"inserted\", this.handleSeriesAdded, this, false);\r\n\t\t\tthis._series.events.on(\"removed\", this.handleSeriesRemoved, this, false);\r\n\t\t\tthis._disposers.push(new ListDisposer(this._series, false));\r\n\t\t\tthis._disposers.push(this._series.template);\r\n\t\t}\r\n\t\treturn this._series;\r\n\t}\r\n\r\n\tprotected handleSeriesRemoved(event: IListEvents<Series>[\"removed\"]) {\r\n\t\tlet series = event.oldValue;\r\n\t\tthis.dataUsers.removeValue(series);\r\n\t\tthis.dataUsers.each((dataUser) => {\r\n\t\t\tdataUser.invalidateDataItems();\r\n\t\t})\r\n\r\n\t\tif (this._exitDP[series.uid]) {\r\n\t\t\tthis._exitDP[series.uid].dispose();\r\n\t\t\tdelete this._exitDP[series.uid];\r\n\t\t}\r\n\r\n\t\tif (series.autoDispose) {\r\n\t\t\tseries.dispose();\r\n\t\t}\r\n\t\telse {\r\n\t\t\tseries.parent = undefined;\r\n\t\t\tseries.bulletsContainer.parent = undefined;\r\n\t\t}\r\n\t\t//this.feedLegend();\r\n\t\tlet legend = this.legend;\r\n\t\tif (legend) {\r\n\t\t\tlet dataItems = this.legend.dataItems;\r\n\t\t\tfor (let i = dataItems.length - 1; i >= 0; i--) {\r\n\t\t\t\tlet dataItem = dataItems.getIndex(i);\r\n\t\t\t\tif (dataItem && dataItem.dataContext == series) {\r\n\t\t\t\t\tlegend.dataItems.remove(dataItem);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tfor (let i = legend.data.length - 1; i >= 0; i--) {\r\n\t\t\t\tlet di = legend.data[i];\r\n\t\t\t\tif (di && di == series) {\r\n\t\t\t\t\t$array.remove(legend.data, di);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Decorates a new [[Series]] object with required parameters when it is\r\n\t * added to the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param event  Event\r\n\t */\r\n\tpublic handleSeriesAdded(event: IListEvents<Series>[\"inserted\"]): void {\r\n\t\tlet series: Series = event.newValue;\r\n\t\tif (series.isDisposed()) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tseries.chart = this;\r\n\t\tseries.parent = this.seriesContainer;\r\n\r\n\t\tseries.bulletsContainer.parent = this.bulletsContainer;\r\n\r\n\t\tthis._dataUsers.moveValue(series);\r\n\t\tseries.addDisposer(new Disposer(() => {\r\n\t\t\tthis.dataUsers.removeValue(series);\r\n\t\t}))\r\n\r\n\t\tthis.handleSeriesAdded2(series);\r\n\t\tthis.handleLegendSeriesAdded(series);\r\n\t}\r\n\r\n\tprotected handleLegendSeriesAdded(series: Series) {\r\n\t\tif (!series.hiddenInLegend) {\r\n\t\t\tif (this.legend) {\r\n\t\t\t\tthis.legend.addData(series);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tprotected handleSeriesAdded2(series: Series) {\r\n\t\tif (!this.dataInvalid) {\r\n\t\t\tthis._exitDP[series.uid] = registry.events.once(\"exitframe\", () => {\r\n\t\t\t\tif (!series.data || series.data.length == 0) {\r\n\t\t\t\t\tseries.data = this.data;\r\n\t\t\t\t\tif (series.showOnInit) {\r\n\t\t\t\t\t\tseries.reinit()\r\n\t\t\t\t\t\tseries.setPropertyValue(\"showOnInit\", false);\r\n\t\t\t\t\t\tseries.showOnInit = true;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (!series.isDisposed()) {\r\n\t\t\t\t\t\tseries.events.once(\"datavalidated\", () => {\r\n\t\t\t\t\t\t\tif (series.data == this.data) {\r\n\t\t\t\t\t\t\t\t(<any>series)._data = [];\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\tthis._disposers.push(this._exitDP[series.uid]);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Setups the legend to use the chart's data.\r\n\t * @ignore\r\n\t */\r\n\tpublic feedLegend(): void {\r\n\t\tlet legend = this.legend;\r\n\t\tif (legend) {\r\n\t\t\tlet legendData: Array<this[\"_seriesType\"]> = [];\r\n\r\n\t\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\t\tif (!series.hiddenInLegend) {\r\n\t\t\t\t\tlegendData.push(series);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tlegend.dataFields.name = \"name\";\r\n\r\n\t\t\tlegend.data = legendData;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new Series, suitable for this chart type.\r\n\t *\r\n\t * @return New series\r\n\t */\r\n\tprotected createSeries(): this[\"_seriesType\"] {\r\n\t\treturn new Series();\r\n\t}\r\n\r\n\t/**\r\n\t * Chart's color list.\r\n\t *\r\n\t * This list can be used by a number of serial items, like applying a new\r\n\t * color for each Series added. Or, applying a new color for each slice\r\n\t * of a Pie chart.\r\n\t *\r\n\t * Please see [[ColorSet]] for information on how you can set up to generate\r\n\t * unique colors.\r\n\t *\r\n\t * A theme you are using may override default pre-defined colors.\r\n\t *\r\n\t * @param value Color list\r\n\t */\r\n\tpublic set colors(value: ColorSet) {\r\n\t\tthis.setPropertyValue(\"colors\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Color list\r\n\t */\r\n\tpublic get colors(): ColorSet {\r\n\t\treturn this.getPropertyValue(\"colors\");\r\n\t}\r\n\r\n\t/**\r\n\t * A [[PatternSet]] to use when creating patterned fills for slices.\r\n\t *\r\n\t * @since 4.7.5\r\n\t * @param value  Pattern set\r\n\t */\r\n\tpublic set patterns(value: PatternSet) {\r\n\t\tthis.setPropertyValue(\"patterns\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Pattern set\r\n\t */\r\n\tpublic get patterns(): PatternSet {\r\n\t\treturn this.getPropertyValue(\"patterns\");\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all parameters from another [[SerialChart]].\r\n\t *\r\n\t * @param source Source SerialChart\r\n\t */\r\n\tpublic copyFrom(source: this) {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.series.copyFrom(source.series);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Hides the chart instantly and then shows it. If defaultState.transitionDuration > 0, this will result an animation in which properties of hidden state will animate to properties of visible state.\r\n\t */\r\n\tpublic appear() {\r\n\t\tsuper.appear();\r\n\r\n\t\tthis.series.each((series) => {\r\n\t\t\tif (series.showOnInit && series.inited) {\r\n\t\t\t\tseries.appear();\r\n\t\t\t}\r\n\t\t})\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"SerialChart\"] = SerialChart;\r\n","/**\r\n * Defines WordCloud series.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Series, SeriesDataItem, ISeriesProperties, ISeriesDataFields, ISeriesAdapters, ISeriesEvents } from \"../../charts/series/Series\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { Label } from \"../../core/elements/Label\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { Animation } from \"../../core/utils/Animation\";\r\nimport { color } from \"../../core/utils/Color\";\r\nimport { ColorSet } from \"../../core/utils/ColorSet\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { WordCloud } from \"./WordCloud\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $dom from \"../../core/utils/DOM\";\r\nimport { Percent, percent } from \"../../core/utils/Percent\";\r\nimport { IDisposer, Disposer } from \"../../core/utils/Disposer\";\r\nimport { AMEvent } from \"../../core/utils/EventDispatcher\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n//@todo: sequenced?\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[WordCloudSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class WordCloudSeriesDataItem extends SeriesDataItem {\r\n\r\n\t/**\r\n\t * A reference to a word label element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _label: Label;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: WordCloudSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"WordCloudSeriesDataItem\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Hide the data item (and corresponding visual elements).\r\n\t *\r\n\t * @param  duration  Duration (ms)\r\n\t * @param  delay     Delay hiding (ms)\r\n\t * @param  toValue   Target value for animation\r\n\t * @param  fields    Fields to animate while hiding\r\n\t */\r\n\tpublic hide(duration?: number, delay?: number, toValue?: number, fields?: string[]): $type.Optional<Animation> {\r\n\t\tif (!fields) {\r\n\t\t\tfields = [\"value\"];\r\n\t\t}\r\n\t\treturn super.hide(duration, delay, 0, fields);\r\n\t}\r\n\r\n\t/**\r\n\t * Sets visibility of the Data Item.\r\n\t *\r\n\t * @param value Data Item\r\n\t */\r\n\tpublic setVisibility(value: boolean, noChangeValues?: boolean): void {\r\n\t\tif (!noChangeValues) {\r\n\t\t\tif (value) {\r\n\t\t\t\tthis.setWorkingValue(\"value\", this.values[\"value\"].value, 0, 0);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.setWorkingValue(\"value\", 0, 0, 0);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tsuper.setVisibility(value, noChangeValues);\r\n\t}\r\n\r\n\t/**\r\n\t * Show hidden data item (and corresponding visual elements).\r\n\t *\r\n\t * @param duration  Duration (ms)\r\n\t * @param delay     Delay hiding (ms)\r\n\t * @param fields    Fields to animate while hiding\r\n\t */\r\n\tpublic show(duration?: number, delay?: number, fields?: string[]): $type.Optional<Animation> {\r\n\t\tif (!fields) {\r\n\t\t\tfields = [\"value\"];\r\n\t\t}\r\n\t\treturn super.show(duration, delay, fields);\r\n\t}\r\n\r\n\t/**\r\n\t * The word.\r\n\t *\r\n\t * @param  value  Word\r\n\t */\r\n\tpublic set word(value: string) {\r\n\t\tthis.setProperty(\"word\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Word\r\n\t */\r\n\tpublic get word(): string {\r\n\t\treturn this.properties.word;\r\n\t}\r\n\r\n\t/**\r\n\t * A [Label] element, related to this data item (word).\r\n\t *\r\n\t * @readonly\r\n\t * @return Label element\r\n\t */\r\n\tpublic get label(): this[\"_label\"] {\r\n\t\tif (!this._label) {\r\n\t\t\tlet label = this.component.labels.create();\r\n\t\t\tthis._label = label;\r\n\r\n\t\t\tthis._disposers.push(label);\r\n\t\t\tlabel.parent = this.component.labelsContainer;\r\n\t\t\tlabel.isMeasured = false;\r\n\t\t\tlabel.x = percent(50);\r\n\t\t\tlabel.y = percent(50);\r\n\t\t\tlabel.fontSize = 0;\r\n\r\n\t\t\tif (this.component.colors) {\r\n\t\t\t\tlabel.fill = this.component.colors.next();\r\n\t\t\t}\r\n\r\n\t\t\tthis._disposers.push(new Disposer(() => {\r\n\t\t\t\tif (this.component) {\r\n\t\t\t\t\tthis.component.labels.removeValue(label);\r\n\t\t\t\t}\r\n\t\t\t}));\r\n\r\n\t\t\tthis.addSprite(label);\r\n\t\t\tlabel.visible = this.visible;\r\n\t\t}\r\n\t\treturn this._label;\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[WordCloudSeries]].\r\n */\r\nexport interface IWordCloudSeriesDataFields extends ISeriesDataFields {\r\n\r\n\t/**\r\n\t * Name of the field in data that holds word.\r\n\t */\r\n\tword?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[WordCloudSeries]].\r\n */\r\nexport interface IWordCloudSeriesProperties extends ISeriesProperties {\r\n\r\n\t/**\r\n\t * A color set to be used for words.\r\n\t */\r\n\tcolors?: ColorSet;\r\n\r\n\t/**\r\n\t * Source text from which words are extracted.\r\n\t */\r\n\ttext?: string;\r\n\r\n\t/**\r\n\t * Absolute or relative font size for the smallest words.\r\n\t */\r\n\tminFontSize?: number | Percent;\r\n\r\n\t/**\r\n\t * Absolute or relative font size for the biggest words.\r\n\t */\r\n\tmaxFontSize?: number | Percent;\r\n\r\n\t/**\r\n\t * Minimum occurances for a word to be included into cloud.\r\n\t */\r\n\tminValue?: number;\r\n\r\n\t/**\r\n\t * Maximum number of words to show.\r\n\t */\r\n\tmaxCount?: number;\r\n\r\n\t/**\r\n\t * Array of words  exclude from cloud.\r\n\t */\r\n\texcludeWords?: string[];\r\n\r\n\t/**\r\n\t * Randomness of word placement (0-1).\r\n\t */\r\n\trandomness?: number;\r\n\r\n\t/**\r\n\t * Minimum number of characters for a word to be included in the cloud.\r\n\t */\r\n\tminWordLength?: number;\r\n\r\n\t/**\r\n\t * An array of possible rotation angles for words.\r\n\t */\r\n\tangles?: number[];\r\n\r\n\t/**\r\n\t * If word's relative height is bigger than this, it won't be rotated.\r\n\t */\r\n\trotationThreshold?: number;\r\n\r\n\t/**\r\n\t * Step for next word placement.\r\n\t */\r\n\tstep?: number;\r\n\r\n\t/**\r\n\t * Accuracy of overlapping check.\r\n\t */\r\n\taccuracy?: number;\r\n}\r\n\r\n/**\r\n * Defines events for [[WordCloudSeries]].\r\n */\r\nexport interface IWordCloudSeriesEvents extends ISeriesEvents {\r\n\r\n\t/**\r\n\t * Invokes when word arranging starts.\r\n\t */\r\n\tarrangestarted: {}\r\n\r\n\t/**\r\n\t * Invoked when progress has been made in arranging the words.\r\n\t */\r\n\tarrangeprogress: {\r\n\r\n\t\t/**\r\n\t\t * Progress\r\n\t\t */\r\n\t\tprogress: number\r\n\t}\r\n\r\n\t/**\r\n\t * Invoked when word arranging is finished.\r\n\t */\r\n\tarrangeended: {}\r\n}\r\n\r\n/**\r\n * Defines adapters for [[WordCloudSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IWordCloudSeriesAdapters extends ISeriesAdapters, IWordCloudSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[WordCloudSeries]] which is a base class for [[PieSeries]],\r\n * [[FunnelSeries]], and [[PyramidSeries]].\r\n *\r\n * @see {@link IWordCloudSeriesEvents} for a list of available Events\r\n * @see {@link IWordCloudSeriesAdapters} for a list of available Adapters\r\n */\r\nexport class WordCloudSeries extends Series {\r\n\t/**\r\n\t * Defines type of the label elements for the series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _label: Label;\r\n\r\n\t/**\r\n\t * A reference to chart this series is for.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _chart: WordCloud;\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t */\r\n\tpublic _dataFields: IWordCloudSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IWordCloudSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IWordCloudSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IWordCloudSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t */\r\n\tpublic _dataItem: WordCloudSeriesDataItem;\r\n\r\n\t/**\r\n\t * List of label elements.\r\n\t */\r\n\tprotected _labels: ListTemplate<this[\"_label\"]>;\r\n\r\n\tprotected _ctx: CanvasRenderingContext2D;\r\n\r\n\tprotected _canvas: HTMLCanvasElement;\r\n\r\n\tprotected _spiral: Sprite;\r\n\r\n\tprotected _points: IPoint[];\r\n\r\n\tprotected _adjustedFont: number = 1;\r\n\r\n\tprotected _processTimeout: IDisposer;\r\n\r\n\tprotected _currentIndex: number;\r\n\r\n\t/**\r\n\t * Holds a Sprite that acts as an intelligent mask for the serries.\r\n\t */\r\n\tprotected _maskSprite: Sprite;\r\n\r\n\t/**\r\n\t * Container label elements are put in.\r\n\t */\r\n\tpublic labelsContainer: Container;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"WordCloudSeries\";\r\n\r\n\t\t// Disabled\r\n\t\t// this.colors = new ColorSet();\r\n\t\t// this.colors.step = 1;\r\n\t\t// this.colors.passOptions = {}; // makes it loop\r\n\r\n\t\tthis.accuracy = 5;\r\n\r\n\t\tthis.isMeasured = true;\r\n\r\n\t\tthis.minFontSize = percent(2);\r\n\t\tthis.maxFontSize = percent(20);\r\n\r\n\t\tthis.excludeWords = [];\r\n\r\n\t\tthis.layout = \"absolute\";\r\n\r\n\t\tthis.angles = [0, 0, 90];\r\n\r\n\t\t//this.maxCount = 100;\r\n\t\tthis.rotationThreshold = 0.7;\r\n\t\tthis.minWordLength = 1;\r\n\r\n\t\tthis.width = percent(100);\r\n\t\tthis.height = percent(100);\r\n\r\n\t\tthis.step = 15;\r\n\r\n\t\tthis.randomness = 0.2;\r\n\r\n\t\tthis.labels.template.horizontalCenter = \"middle\";\r\n\t\tthis.labels.template.verticalCenter = \"middle\";\r\n\r\n\t\t// Accessibility\r\n\t\tthis.itemReaderText = \"{word}: {value}\";\r\n\r\n\t\tthis.applyTheme();\r\n\r\n\t\tlet canvas = document.createElement(\"canvas\");\r\n\t\tcanvas.style.position = \"absolute\";\r\n\t\tcanvas.style.top = \"0px\";\r\n\t\tcanvas.style.left = \"0px\";\r\n\t\tcanvas.style.opacity = \"0.5\";\r\n\t\t//document.body.appendChild(canvas);\r\n\t\tthis._canvas = canvas;\r\n\r\n\t\tthis._ctx = canvas.getContext(\"2d\");\r\n\r\n\t\tthis._maskSprite = this.createChild(Sprite);\r\n\r\n\t\tlet labelsContainer = this.createChild(Container);\r\n\t\tlabelsContainer.shouldClone = false;\r\n\t\tlabelsContainer.isMeasured = false;\r\n\t\tlabelsContainer.layout = \"none\";\r\n\t\tthis.labelsContainer = labelsContainer;\r\n\r\n\t\tthis._spiral = labelsContainer.createChild(Sprite);\r\n\t\tthis._spiral.fillOpacity = 0.1;\r\n\t\tthis._spiral.strokeOpacity = 1;\r\n\t\tthis._spiral.stroke = color(\"#000\");\r\n\r\n\r\n\t\t//this._maskSprite.visible = false;\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data range.\r\n\t *\r\n\t * @ignore\r\n\t */\r\n\tpublic validateDataRange(): void {\r\n\t\tsuper.validateDataRange();\r\n\t\tthis.dataItems.each((dataItem) => {\r\n\t\t\t$utils.used(dataItem.label);\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * Validates element.\r\n\t *\r\n\t * @ignore\r\n\t */\r\n\tpublic validate(): void {\r\n\r\n\t\tsuper.validate();\r\n\r\n\t\tthis._currentIndex = 0;\r\n\r\n\t\tthis.dataItems.values.sort(function(a, b) {\r\n\t\t\tif (a.value == b.value) {\r\n\t\t\t\treturn 0;\r\n\t\t\t}\r\n\t\t\telse if (a.value > b.value) {\r\n\t\t\t\treturn -1;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\treturn 1;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tif (this._processTimeout) {\r\n\t\t\tthis._processTimeout.dispose();\r\n\t\t}\r\n\r\n\t\tlet w = this.innerWidth;\r\n\t\tlet h = this.innerHeight;\r\n\t\tif (w > 0 && h > 0) {\r\n\r\n\t\t\tlet context = this._ctx;\r\n\r\n\t\t\tthis._canvas.width = w;\r\n\t\t\tthis._canvas.height = h;\r\n\r\n\t\t\tcontext.fillStyle = \"white\";\r\n\t\t\tcontext.fillRect(0, 0, w, h);\r\n\r\n\t\t\tthis._points = $path.spiralPoints(0, 0, w, h, 0, this.step, this.step);\r\n\r\n\t\t\tlet angle = this.labelsContainer.rotation;\r\n\r\n\t\t\tfor (let i = this._points.length - 1; i >= 0; i--) {\r\n\t\t\t\tlet point = this._points[i];\r\n\r\n\t\t\t\tif (point.x < -w / 2 || point.x > w / 2 || point.y < -h / 2 || point.y > h / 2) {\r\n\t\t\t\t\tthis._points.splice(i, 1);\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (angle != 0) {\r\n\t\t\t\t\tlet point2 = $utils.spritePointToSprite({ x: point.x + w / 2, y: point.y + h / 2 }, this, this.labelsContainer);\r\n\t\t\t\t\tpoint.x = point2.x;\r\n\t\t\t\t\tpoint.y = point2.y;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t//this._spiral.path = $path.pointsToPath(this._points);\r\n\r\n\r\n\t\t\tlet maskSprite = this._maskSprite;\r\n\r\n\t\t\tif (maskSprite.path) {\r\n\t\t\t\tlet maxWidth = this.maxWidth;\r\n\t\t\t\tlet maxHeight = this.maxHeight;\r\n\r\n\t\t\t\tmaskSprite.isMeasured = true;\r\n\t\t\t\tmaskSprite.validate();\r\n\r\n\t\t\t\tlet pictureWidth = maskSprite.measuredWidth / maskSprite.scale;\r\n\t\t\t\tlet pictureHeight = maskSprite.measuredHeight / maskSprite.scale;\r\n\r\n\t\t\t\tlet scale = $math.min(maxHeight / pictureHeight, maxWidth / pictureWidth);\r\n\r\n\t\t\t\tif (scale == Infinity) {\r\n\t\t\t\t\tscale = 1; // can't return here, won't draw legend properly\r\n\t\t\t\t}\r\n\r\n\t\t\t\tmaskSprite.horizontalCenter = \"none\";\r\n\t\t\t\tmaskSprite.verticalCenter = \"none\";\r\n\t\t\t\tmaskSprite.x = 0;\r\n\t\t\t\tmaskSprite.y = 0;\r\n\t\t\t\tmaskSprite.scale = 1;\r\n\r\n\t\t\t\tscale = $math.max(0.001, scale);\r\n\r\n\t\t\t\tmaskSprite.horizontalCenter = \"middle\";\r\n\t\t\t\tmaskSprite.verticalCenter = \"middle\";\r\n\t\t\t\tmaskSprite.x = w / 2;\r\n\t\t\t\tmaskSprite.y = h / 2;\r\n\t\t\t\tmaskSprite.validatePosition();\r\n\r\n\t\t\t\tthis.mask = maskSprite;\r\n\t\t\t\t/*\r\n\t\t\t\tcontext.fillStyle = \"blue\";\r\n\t\t\t\tcontext.fillRect(0, 0, w, h);\r\n\t\t\t\tcontext.fillStyle = \"white\";\r\n\t\t\t\tcontext.scale(scale, scale);\r\n\r\n\t\t\t\tcontext.translate(maskSprite.maxLeft - maxLeft + w / 2 / scale, maskSprite.maxTop - maxTop + h / 2 / scale);\r\n\t\t\t\t//let commandList = this.svgPathToCommands(maskSprite.path);\r\n\t\t\t\t//this.drawSvgPath(context, commandList);\r\n\t\t\t\tlet p = new Path2D(maskSprite.path);\r\n\t\t\t\tcontext.stroke(p);\r\n\t\t\t\tcontext.fill(p);\r\n\t\t\t\tcontext.translate(-maskSprite.maxLeft + maxLeft - w / 2 / scale, -maskSprite.maxTop + maxTop - h / 2 / scale);\r\n\t\t\t\tcontext.scale(1 / scale, 1 / scale);\r\n\t\t\t\t*/\r\n\r\n\t\t\t\tmaskSprite.scale = scale;\r\n\t\t\t}\r\n\t\t\tif (this.events.isEnabled(\"arrangestarted\")) {\r\n\t\t\t\tthis.dispatchImmediately(\"arrangestarted\");\r\n\t\t\t}\r\n\t\t\tthis.processItem(this.dataItems.getIndex(this._currentIndex));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [processItem description]\r\n\t *\r\n\t * @param   dataItem  Data item\r\n\t */\r\n\tprotected processItem(dataItem: this[\"_dataItem\"]) {\r\n\r\n\t\tif(!dataItem){\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet context = this._ctx;\r\n\r\n\t\tlet w = this.innerWidth;\r\n\t\tlet h = this.innerHeight;\r\n\r\n\t\tif ($dom.isHidden(this.htmlContainer)) {\r\n\t\t\tthis._processTimeout = this.setTimeout(() => {\r\n\t\t\t\tthis._currentIndex++;\r\n\t\t\t\tthis.processItem(this.dataItems.getIndex(this._currentIndex));\r\n\t\t\t}, 500);\r\n\t\t\tthis._disposers.push(this._processTimeout);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tthis.labelsContainer.x = w / 2;\r\n\t\tthis.labelsContainer.y = h / 2;\r\n\r\n\t\tlet label = dataItem.label;\r\n\t\tlet fontFace = $dom.findFont(label.element.node);\r\n\r\n\t\tlet smallerSize = $math.min(this.innerHeight, this.innerWidth);\r\n\t\tlet minFontSize = $utils.relativeToValue(this.minFontSize, smallerSize);\r\n\t\tlet maxFontSize = $utils.relativeToValue(this.maxFontSize, smallerSize);\r\n\r\n\t\tlet low = this.dataItem.values.value.low;\r\n\t\tlet high = this.dataItem.values.value.high;\r\n\r\n\t\tlet percent = (dataItem.value - low) / (high - low);\r\n\r\n\t\tif (low == high) {\r\n\t\t\tlet count = this.dataItems.length;\r\n\t\t\tif (count > 1) {\r\n\t\t\t\tpercent = 1 / this.dataItems.length * 1.5;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tpercent = 1;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet fontSize = minFontSize + (maxFontSize - minFontSize) * percent * this._adjustedFont;\r\n\r\n\t\tlet initialFontSize = label.fontSize;\r\n\t\tlabel.fontSize = fontSize;\r\n\r\n\t\tlet angle = 0;\r\n\t\tif ((fontSize - minFontSize) / (maxFontSize - minFontSize) < this.rotationThreshold) {\r\n\t\t\tangle = this.angles[Math.round(Math.random() * (this.angles.length - 1))];\r\n\t\t}\r\n\r\n\t\tlabel.fontSize = fontSize;\r\n\t\tlabel.rotation = angle;\r\n\t\tlabel.show(0);\r\n\t\tlabel.hardInvalidate();\r\n\t\tlabel.validate();\r\n\r\n\t\tif (label.measuredWidth > w * 0.95 || label.measuredHeight > h * 0.95) {\r\n\t\t\tthis._adjustedFont -= 0.1;\r\n\t\t\tthis.invalidateDataItems()\r\n\t\t\tthis.invalidate();\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet maxL = label.maxLeft;\r\n\t\tlet maxR = label.maxRight;\r\n\t\tlet maxT = label.maxTop;\r\n\t\tlet maxB = label.maxBottom;\r\n\r\n\t\tlet intersects = true;\r\n\r\n\t\tlet p = Math.round(Math.random() * this._points.length * this.randomness);\r\n\r\n\t\tlet initialX = label.pixelX;\r\n\t\tlet initialY = label.pixelY;\r\n\r\n\t\tlet x = 0;\r\n\t\tlet y = 0;\r\n\r\n\t\t// TODO is this needed ?\r\n\t\t$utils.used(this.labelsContainer.rotation);\r\n\t\tif (this._currentIndex > 0) {\r\n\t\t\twhile (intersects) {\r\n\t\t\t\tif (p > this._points.length - 1) {\r\n\t\t\t\t\tintersects = false;\r\n\t\t\t\t\tthis._adjustedFont -= 0.1;\r\n\t\t\t\t\tthis.invalidateDataItems();\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tintersects = false;\r\n\r\n\t\t\t\tx = this._points[p].x;\r\n\t\t\t\ty = this._points[p].y;\r\n\r\n\t\t\t\tlet marginLeft = label.pixelMarginLeft;\r\n\t\t\t\tlet marginRight = label.pixelMarginRight;\r\n\t\t\t\tlet marginTop = label.pixelMarginTop;\r\n\t\t\t\tlet marginBottom = label.pixelMarginBottom;\r\n\r\n\t\t\t\tlet rect1 = { x: x + maxL - marginLeft, y: y + maxT - marginTop, width: maxR - maxL + marginLeft + marginRight, height: maxB - maxT + marginTop + marginBottom };\r\n\r\n\t\t\t\tlet pixel = this._ctx.getImageData(rect1.x + w / 2, rect1.y + h / 2, rect1.width, rect1.height).data;\r\n\t\t\t\tfor (let i = 0; i < pixel.length; i += Math.pow(2, this.accuracy)) {\r\n\t\t\t\t\tif (pixel[i] != 255) {\r\n\t\t\t\t\t\tintersects = true;\r\n\t\t\t\t\t\tif (label.currentText.length > 3) {\r\n\t\t\t\t\t\t\tif (angle == 0) {\r\n\t\t\t\t\t\t\t\tif (maxR - maxL < 60) {\r\n\t\t\t\t\t\t\t\t\tthis._points.splice(p, 1);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif (Math.abs(angle) == 90) {\r\n\t\t\t\t\t\t\t\tif (maxB - maxT < 50) {\r\n\t\t\t\t\t\t\t\t\tthis._points.splice(p, 1);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tp += 5;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (initialFontSize == 0) {\r\n\t\t\tlabel.animate([{ property: \"fontSize\", to: fontSize, from: initialFontSize }], this.interpolationDuration, this.interpolationEasing);\r\n\t\t\tlabel.x = x;\r\n\t\t\tlabel.y = y;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlabel.animate([{ property: \"fontSize\", to: fontSize, from: initialFontSize }, { property: \"x\", to: x, from: initialX }, { property: \"y\", to: y, from: initialY }], this.interpolationDuration, this.interpolationEasing);\r\n\t\t}\r\n\r\n\t\tlet cx = x + w / 2;\r\n\t\tlet cy = y + h / 2;\r\n\r\n\t\tcontext.translate(cx, cy);\r\n\t\tlet radAngle = label.rotation * Math.PI / 180;\r\n\t\tcontext.rotate(radAngle);\r\n\t\tcontext.textAlign = \"center\";\r\n\t\tcontext.textBaseline = \"middle\";\r\n\t\tcontext.fillStyle = \"blue\";\r\n\r\n\t\tlet fontWeight = label.fontWeight || this.fontWeight || this.chart.fontWeight || \"normal\";\r\n\t\tlet font = fontWeight + \" \" + fontSize + \"px \" + fontFace;\r\n\r\n\t\tcontext.font = font\r\n\t\tcontext.fillText(label.currentText, 0, 0);\r\n\t\tcontext.rotate(-radAngle);\r\n\t\tcontext.translate(-cx, -cy);\r\n\r\n\t\tif (label.showOnInit) {\r\n\t\t\tlabel.hide(0);\r\n\t\t\tlabel.show();\r\n\t\t}\r\n\r\n\t\tif (this.events.isEnabled(\"arrangeprogress\")) {\r\n\t\t\tconst event: AMEvent<this, IWordCloudSeriesEvents>[\"arrangeprogress\"] = {\r\n\t\t\t\ttype: \"arrangeprogress\",\r\n\t\t\t\ttarget: this,\r\n\t\t\t\tprogress: (this._currentIndex + 1) / this.dataItems.length\r\n\t\t\t};\r\n\t\t\tthis.events.dispatchImmediately(\"arrangeprogress\", event);\r\n\t\t}\r\n\r\n\t\tif (this._currentIndex < this.dataItems.length - 1) {\r\n\t\t\tthis._processTimeout = this.setTimeout(() => {\r\n\t\t\t\tthis._currentIndex++;\r\n\t\t\t\tthis.processItem(this.dataItems.getIndex(this._currentIndex));\r\n\t\t\t}, 1);\r\n\t\t\tthis._disposers.push(this._processTimeout);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tif (this.events.isEnabled(\"arrangeended\")) {\r\n\t\t\t\tthis.dispatchImmediately(\"arrangeended\");\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sreates label element.\r\n\t *\r\n\t * @return label\r\n\t */\r\n\tprotected createLabel(): this[\"_label\"] {\r\n\t\treturn new Label();\r\n\t}\r\n\r\n\t/**\r\n\t * [[Label]] elements representing each word.\r\n\t *\r\n\t * @return  Label elements\r\n\t */\r\n\tpublic get labels(): ListTemplate<this[\"_label\"]> {\r\n\t\tif (!this._labels) {\r\n\t\t\tlet label = this.createLabel();\r\n\t\t\tlabel.applyOnClones = true;\r\n\t\t\tthis._disposers.push(label);\r\n\r\n\t\t\tlabel.text = \"{word}\";\r\n\t\t\tlabel.margin(2, 3, 2, 3);\r\n\t\t\tlabel.padding(0, 0, 0, 0);\r\n\r\n\t\t\tthis._labels = new ListTemplate(label);\r\n\t\t\tthis._disposers.push(new ListDisposer(this._labels));\r\n\t\t}\r\n\t\treturn this._labels;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new WordCloudSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * A color set to be used for each new word.\r\n\t *\r\n\t * By default it's empty, so all words will be colored the same.\r\n\t *\r\n\t * If you want to automatically color each word differently, set this\r\n\t * to a new instance of a [[ColorSet]].\r\n\t *\r\n\t * ```TypeScript\r\n\t * series.colors = new am4core.ColorSet();\r\n\t * series.colors.step = 1;\r\n\t * series.colors.passOptions = {}; // makes it loop\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * series.colors = new am4core.ColorSet();\r\n\t * series.colors.step = 1;\r\n\t * series.colors.passOptions = {}; // makes it loop\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"series\": [{\r\n\t *     // ...\r\n\t *     \"colors\": {\r\n\t *       \"type\": \"ColorSet\",\r\n\t *       \"step\": 1,\r\n\t *       \"passOptions\": {}\r\n\t *     }\r\n\t *   }]\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @param  value  Color set\r\n\t */\r\n\tpublic set colors(value: ColorSet) {\r\n\t\tthis.setPropertyValue(\"colors\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Color set\r\n\t */\r\n\tpublic get colors(): ColorSet {\r\n\t\treturn this.getPropertyValue(\"colors\");\r\n\t}\r\n\r\n\t/**\r\n\t * [updateData description]\r\n\t */\r\n\tprotected updateData(): void {\r\n\t\tthis.data = this.getWords(this.text);\r\n\t}\r\n\r\n\t/**\r\n\t * A source text to build word cloud from.\r\n\t *\r\n\t * @param  value  Source text\r\n\t */\r\n\tpublic set text(value: string) {\r\n\t\tif (this.setPropertyValue(\"text\", value)) {\r\n\t\t\tthis.updateData();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Source text\r\n\t */\r\n\tpublic get text(): string {\r\n\t\treturn this.getPropertyValue(\"text\");\r\n\t}\r\n\r\n\t/**\r\n\t * Maximum number of words to show.\r\n\t *\r\n\t * If ther are more words in the cloud than `maxCount`, smallest words will\r\n\t * be discarded.\r\n\t *\r\n\t * NOTE: this setting is used only when you set whole text using `text`. If\r\n\t * you set `chart.data` or `series.data` directly, it won't have any effect.\r\n\t *\r\n\t * @param  value  Maximum words to show\r\n\t */\r\n\tpublic set maxCount(value: number) {\r\n\t\tif (this.setPropertyValue(\"maxCount\", value)) {\r\n\t\t\tthis.updateData();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Maximum words to show\r\n\t */\r\n\tpublic get maxCount(): number {\r\n\t\treturn this.getPropertyValue(\"maxCount\");\r\n\t}\r\n\r\n\t/**\r\n\t * Minimum occurances for a word to be included in the cloud.\r\n\t *\r\n\t * NOTE: this setting is used only when you set whole text using `text`. If\r\n\t * you set `chart.data` or `series.data` directly, it won't have any effect.\r\n\t *\r\n\t * @default 1\r\n\t * @param  value  Minimum occurences\r\n\t */\r\n\tpublic set minValue(value: number) {\r\n\t\tif (this.setPropertyValue(\"minValue\", value)) {\r\n\t\t\tthis.updateData();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return  Minimum occurences\r\n\t */\r\n\tpublic get minValue(): number {\r\n\t\treturn this.getPropertyValue(\"minValue\");\r\n\t}\r\n\r\n\t/**\r\n\t * An array of words to exclude from the cloud.\r\n\t *\r\n\t * ```TypeScript\r\n\t * series.excludeWords = [\"the\", \"a\", \"an\"];\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * series.excludeWords = [\"the\", \"a\", \"an\"];\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"series\": [{\r\n\t *     // ...\r\n\t *     \"excludeWords\": [\"the\", \"a\", \"an\"]\r\n\t *   }]\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * NOTE: this setting is used only when you set whole text using `text`. If\r\n\t * you set `chart.data` or `series.data` directly, it won't have any effect.\r\n\t *\r\n\t * @param  value  Words to exclude from the cloud\r\n\t */\r\n\tpublic set excludeWords(value: string[]) {\r\n\t\tif (this.setPropertyValue(\"excludeWords\", value)) {\r\n\t\t\tthis.updateData();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Words to exclude from the cloud\r\n\t */\r\n\tpublic get excludeWords(): string[] {\r\n\t\treturn this.getPropertyValue(\"excludeWords\");\r\n\t}\r\n\r\n\t/**\r\n\t * Font size for the biggest words.\r\n\t *\r\n\t * This can be set either as a numeric pixel size, or as a relative\r\n\t * as `Percent`.\r\n\t *\r\n\t * When setting as percent it will use series' height or width (the one which is smaller) as a basis for\r\n\t * calculating the font size.\r\n\t *\r\n\t * NOTE: this setting might be automatically adjusted if all words do not fit\r\n\t * in the available space.\r\n\t *\r\n\t * @default 20%\r\n\t * @param  value  Font size\r\n\t */\r\n\tpublic set maxFontSize(value: number | Percent) {\r\n\t\tthis.setPropertyValue(\"maxFontSize\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Font size\r\n\t */\r\n\tpublic get maxFontSize(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"maxFontSize\");\r\n\t}\r\n\r\n\t/**\r\n\t * Font size for the smallest words.\r\n\t *\r\n\t * This can be set either as a numeric pixel size, or as a relative\r\n\t * as `Percent`.\r\n\t *\r\n\t * When setting as percent it will use series' height or width (the one which is smaller) as a basis for\r\n\t * calculating the font size.\r\n\t *\r\n\t * @default 2%\r\n\t * @param  value  Font size\r\n\t */\r\n\tpublic set minFontSize(value: number | Percent) {\r\n\t\tthis.setPropertyValue(\"minFontSize\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Font size\r\n\t */\r\n\tpublic get minFontSize(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"minFontSize\");\r\n\t}\r\n\r\n\t/**\r\n\t * Randomness of word placement.\r\n\t *\r\n\t * Available values are from 0 (no randomization) to 1 (completely random).\r\n\t *\r\n\t * The smaller the value the bigger the chance that biggest words will end up\r\n\t * closer to the center.\r\n\t *\r\n\t * @default 0.2\r\n\t * @param value Randomness\r\n\t */\r\n\tpublic set randomness(value: number) {\r\n\t\tthis.setPropertyValue(\"randomness\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Randomness\r\n\t */\r\n\tpublic get randomness(): number {\r\n\t\treturn this.getPropertyValue(\"randomness\");\r\n\t}\r\n\r\n\t/**\r\n\t * Step by which label is moved if its space is already occupied.\r\n\t *\r\n\t * The smaller the number, the more packed labels will be.\r\n\t *\r\n\t * NOTE: smaller numbers make for more packed clouds, but will consume\r\n\t * considerably more CPU power. Use with caution with bigger clouds.\r\n\t *\r\n\t * @default 15\r\n\t * @param  value Step\r\n\t */\r\n\tpublic set step(value: number) {\r\n\t\tthis.setPropertyValue(\"step\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Step\r\n\t */\r\n\tpublic get step(): number {\r\n\t\treturn this.getPropertyValue(\"step\");\r\n\t}\r\n\r\n\t/**\r\n\t * Accuracy setting when checking for overlapping of words.\r\n\t *\r\n\t * The bigger the number, the bigger chance of overlapping, but it's also\r\n\t * better for performance.\r\n\t *\r\n\t * Use smaller numbers if you are using a thin font.\r\n\t *\r\n\t * @default 5\r\n\t * @param  value  Accuracy\r\n\t */\r\n\tpublic set accuracy(value: number) {\r\n\t\tthis.setPropertyValue(\"accuracy\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Accuracy\r\n\t */\r\n\tpublic get accuracy(): number {\r\n\t\treturn this.getPropertyValue(\"accuracy\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Minimum number of characters for a word to be included in the cloud.\r\n\t *\r\n\t * NOTE: this setting is used only when you set whole text using `text`. If\r\n\t * you set `chart.data` or `series.data` directly, it won't have any effect.\r\n\t *\r\n\t * @default 1\r\n\t * @param {number} value Minimum word length\r\n\t */\r\n\tpublic set minWordLength(value: number) {\r\n\t\tif (this.setPropertyValue(\"minWordLength\", value)) {\r\n\t\t\tthis.updateData();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Minimum word length\r\n\t */\r\n\tpublic get minWordLength(): number {\r\n\t\treturn this.getPropertyValue(\"minWordLength\");\r\n\t}\r\n\r\n\t/**\r\n\t * Rotation threshold.\r\n\t *\r\n\t * Big words don't look good good when rotated, hence this setting.\r\n\t *\r\n\t * It works like this: if word's relative height is bigger\r\n\t * than `rotationThreshold`, the word will never be rotated.\r\n\t *\r\n\t * Available values are from 0 (none of the words will be rotated) to 1 (all\r\n\t * words can be rotated).\r\n\t *\r\n\t * @default 0.7\r\n\t * @param  value  Threshold\r\n\t */\r\n\tpublic set rotationThreshold(value: number) {\r\n\t\tthis.setPropertyValue(\"rotationThreshold\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Threshold\r\n\t */\r\n\tpublic get rotationThreshold(): number {\r\n\t\treturn this.getPropertyValue(\"rotationThreshold\");\r\n\t}\r\n\r\n\t/**\r\n\t * An array of available word rotation angles.\r\n\t *\r\n\t * The only supported values are: 0 (horizontal), and 90 (vertical).\r\n\t *\r\n\t * @default [0, 0, 90]\r\n\t * @param  value  Angles\r\n\t */\r\n\tpublic set angles(value: number[]) {\r\n\t\tthis.setPropertyValue(\"angles\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Angles\r\n\t */\r\n\tpublic get angles(): number[] {\r\n\t\treturn this.getPropertyValue(\"angles\");\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t * Not finished yet\r\n\t */\r\n\tpublic get maskSprite(): Sprite {\r\n\t\treturn this._maskSprite;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Copies all properties from another instance of [[WordCloudSeries]].\r\n\t *\r\n\t * @param source  Source series\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.labels.template.copyFrom(source.labels.template);\r\n\t}\r\n\r\n\t/**\r\n\t * Extracts words and number of their appearances from a text.\r\n\t *\r\n\t * @ignore\r\n\t * @param  input  Source text\r\n\t */\r\n\tpublic getWords(input: string): { word: string, value: number }[] {\r\n\t\tif (input) {\r\n\t\t\tthis.dataFields.word = \"word\";\r\n\t\t\tthis.dataFields.value = \"value\";\r\n\r\n\t\t\tconst chars = \"\\u0041-\\u005A\\u0061-\\u007A\\u00AA\\u00B5\\u00BA\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376-\\u0377\\u037A-\\u037D\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u0523\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0621-\\u064A\\u066E-\\u066F\\u0671-\\u06D3\\u06D5\\u06E5-\\u06E6\\u06EE-\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4-\\u07F5\\u07FA\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0972\\u097B-\\u097F\\u0985-\\u098C\\u098F-\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC-\\u09DD\\u09DF-\\u09E1\\u09F0-\\u09F1\\u0A05-\\u0A0A\\u0A0F-\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32-\\u0A33\\u0A35-\\u0A36\\u0A38-\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2-\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0-\\u0AE1\\u0B05-\\u0B0C\\u0B0F-\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32-\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C-\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99-\\u0B9A\\u0B9C\\u0B9E-\\u0B9F\\u0BA3-\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C33\\u0C35-\\u0C39\\u0C3D\\u0C58-\\u0C59\\u0C60-\\u0C61\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0-\\u0CE1\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D28\\u0D2A-\\u0D39\\u0D3D\\u0D60-\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32-\\u0E33\\u0E40-\\u0E46\\u0E81-\\u0E82\\u0E84\\u0E87-\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA-\\u0EAB\\u0EAD-\\u0EB0\\u0EB2-\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDD\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8B\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065-\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10D0-\\u10FA\\u10FC\\u1100-\\u1159\\u115F-\\u11A2\\u11A8-\\u11F9\\u1200-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F4\\u1401-\\u166C\\u166F-\\u1676\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F0\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1877\\u1880-\\u18A8\\u18AA\\u1900-\\u191C\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19A9\\u19C1-\\u19C7\\u1A00-\\u1A16\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE-\\u1BAF\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u2094\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2C6F\\u2C71-\\u2C7D\\u2C80-\\u2CE4\\u2D00-\\u2D25\\u2D30-\\u2D65\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2E2F\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31B7\\u31F0-\\u31FF\\u3400\\u4DB5\\u4E00\\u9FC3\\uA000-\\uA48C\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A-\\uA62B\\uA640-\\uA65F\\uA662-\\uA66E\\uA67F-\\uA697\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA78C\\uA7FB-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA90A-\\uA925\\uA930-\\uA946\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAC00-\\uD7A3\\uF900-\\uFA2D\\uFA30-\\uFA6A\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40-\\uFB41\\uFB43-\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC0-9@+\";\r\n\t\t\tconst reg = new RegExp(\"([\" + chars + \"]+[\\-\" + chars + \"]*[\" + chars + \"]+)|([\" + chars + \"]+)\", \"ig\");\r\n\t\t\tlet res = input.match(reg);\r\n\t\t\tif (!res) {\r\n\t\t\t\treturn [];\r\n\t\t\t}\r\n\r\n\t\t\tlet words: { word: string, value: number }[] = [];\r\n\t\t\tlet word;\r\n\t\t\twhile (true) {\r\n\t\t\t\tword = res.pop();\r\n\r\n\t\t\t\tif (!word) {\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet item;\r\n\t\t\t\tfor (let i = 0; i < words.length; i++) {\r\n\t\t\t\t\tif (words[i].word.toLowerCase() == word.toLowerCase()) {\r\n\t\t\t\t\t\titem = words[i];\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (item) {\r\n\t\t\t\t\titem.value++;\r\n\t\t\t\t\tif (!this.isCapitalized(word)) {\r\n\t\t\t\t\t\titem.word = word;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\twords.push({\r\n\t\t\t\t\t\tword: word,\r\n\t\t\t\t\t\tvalue: 1\r\n\t\t\t\t\t})\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tlet excludeWords = this.excludeWords;\r\n\t\t\tif (this.minValue > 1 || this.minWordLength > 1 || (excludeWords && excludeWords.length > 0)) {\r\n\t\t\t\tfor (let i = words.length - 1; i >= 0; i--) {\r\n\t\t\t\t\tlet w = words[i];\r\n\t\t\t\t\tif (w.value < this.minValue) {\r\n\t\t\t\t\t\twords.splice(i, 1);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (w.word.length < this.minWordLength) {\r\n\t\t\t\t\t\twords.splice(i, 1);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (excludeWords.indexOf(w.word) !== -1) {\r\n\t\t\t\t\t\twords.splice(i, 1);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\twords.sort(function(a, b) {\r\n\t\t\t\tif (a.value == b.value) {\r\n\t\t\t\t\treturn 0;\r\n\t\t\t\t}\r\n\t\t\t\telse if (a.value > b.value) {\r\n\t\t\t\t\treturn -1;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\treturn 1;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\r\n\t\t\tif (words.length > this.maxCount) {\r\n\t\t\t\twords = words.slice(0, this.maxCount);\r\n\t\t\t}\r\n\r\n\t\t\treturn words;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if word is capitalized (starts with an uppercase) or not.\r\n\t *\r\n\t * @param   word  Word\r\n\t * @return        Capitalized?\r\n\t */\r\n\tpublic isCapitalized(word: string): boolean {\r\n\t\tlet lword = word.toLowerCase();\r\n\t\treturn word[0] != lword[0]\r\n\t\t\t&& word.substr(1) == lword.substr(1)\r\n\t\t\t&& word != lword;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"WordCloudSeries\"] = WordCloudSeries;\r\nregistry.registeredClasses[\"WordCloudSeriesDataItem\"] = WordCloudSeriesDataItem;\r\n","/**\r\n * WordCloud chart module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { SerialChart, ISerialChartProperties, ISerialChartDataFields, ISerialChartAdapters, ISerialChartEvents, SerialChartDataItem } from \"../../charts/types/SerialChart\";\r\nimport { WordCloudSeries } from \"./WordCloudSeries\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[WordCloud]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class WordCloudDataItem extends SerialChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: WordCloud;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"WordCloudDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[WordCloud]].\r\n */\r\nexport interface IWordCloudDataFields extends ISerialChartDataFields { }\r\n\r\n/**\r\n * Defines properties for [[WordCloud]]\r\n */\r\nexport interface IWordCloudProperties extends ISerialChartProperties { }\r\n\r\n/**\r\n * Defines events for [[WordCloud]].\r\n */\r\nexport interface IWordCloudEvents extends ISerialChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[WordCloud]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IWordCloudAdapters extends ISerialChartAdapters, IWordCloudProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * This is a base class for \"percent-based\" chart types like Pie and Funnel.\r\n *\r\n * @see {@link IWordCloudEvents} for a list of available Events\r\n * @see {@link IWordCloudAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/wordcloud/} for documentation\r\n */\r\nexport class WordCloud extends SerialChart {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t */\r\n\tpublic _dataFields: IWordCloudDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IWordCloudProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IWordCloudAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IWordCloudEvents;\r\n\r\n\t/**\r\n\t * Defines a type of series that this chart uses.\r\n\t */\r\n\tpublic _seriesType: WordCloudSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"WordCloud\";\r\n\r\n\t\tthis.seriesContainer.isMeasured = true;\r\n\t\tthis.seriesContainer.layout = \"absolute\";\r\n\r\n\t\tthis._usesData = true;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a new [[PercentSeries]].\r\n\t *\r\n\t * @return New series\r\n\t */\r\n\tprotected createSeries(): this[\"_seriesType\"] {\r\n\t\treturn new WordCloudSeries();\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @hidden\r\n */\r\nregistry.registeredClasses[\"WordCloud\"] = WordCloud;\r\nregistry.registeredClasses[\"WordCloudDataItem\"] = WordCloudDataItem;\r\n","import { ITheme } from \"./ITheme\";\r\nimport { is } from \"../core/Registry\";\r\nimport { SpriteState } from \"../core/SpriteState\";\r\nimport { Component } from \"../core/Component\";\r\nimport { BaseObject } from \"../core/Base\";\r\nimport { Scrollbar } from \"../core/elements/Scrollbar\";\r\nimport { Tooltip } from \"../core/elements/Tooltip\";\r\nimport { Series } from \"../charts/series/Series\";\r\nimport { PercentSeries } from \"../charts/series/PercentSeries\";\r\nimport { SankeyDiagram } from \"../charts/types/SankeyDiagram\";\r\nimport { FunnelSeries } from \"../charts/series/FunnelSeries\";\r\nimport { MapSeries } from \"../charts/map/MapSeries\";\r\nimport { FunnelSlice } from \"../charts/elements/FunnelSlice\";\r\nimport { Column } from \"../charts/elements/Column\";\r\nimport { Column3D } from \"../charts/elements/Column3D\";\r\nimport { Slice } from \"../core/elements/Slice\";\r\nimport { Preloader } from \"../core/elements/Preloader\";\r\nimport { Chart } from \"../charts/Chart\";\r\n\r\n\r\n\r\nconst theme: ITheme = (object: BaseObject) => {\r\n\tif (is<SpriteState<any, any>>(object, \"SpriteState\")) {\r\n\t\tobject.transitionDuration = 400;\r\n\t}\r\n\r\n\tif (is<Component>(object, \"Component\")) {\r\n\t\tobject.rangeChangeDuration = 500;\r\n\t\tobject.interpolationDuration = 500;\r\n\t\tobject.sequencedInterpolation = false;\r\n\r\n\t\tif (is<SankeyDiagram>(object, \"SankeyDiagram\")) {\r\n\t\t\tobject.sequencedInterpolation = true;\r\n\t\t}\r\n\r\n\t\tif (is<FunnelSeries>(object, \"FunnelSeries\")) {\r\n\t\t\tobject.sequencedInterpolation = true;\r\n\t\t}\r\n\t}\r\n\r\n\tif (is<Chart>(object, \"Chart\")) {\r\n\t\tobject.defaultState.transitionDuration = 2000;\r\n\t\tobject.hiddenState.transitionDuration = 1000;\r\n\t}\r\n\r\n\tif (is<Tooltip>(object, \"Tooltip\")) {\r\n\t\tobject.animationDuration = 400;\r\n\t\tobject.defaultState.transitionDuration = 400;\r\n\t\tobject.hiddenState.transitionDuration = 400;\r\n\t}\r\n\r\n\tif (is<Scrollbar>(object, \"Scrollbar\")) {\r\n\t\tobject.animationDuration = 500;\r\n\t}\r\n\r\n\tif (is<Series>(object, \"Series\")) {\r\n\t\tobject.defaultState.transitionDuration = 1000;\r\n\t\tobject.hiddenState.transitionDuration = 700;\r\n\t\tobject.hiddenState.properties.opacity = 1;\r\n\t\tobject.showOnInit = true;\r\n\t}\r\n\r\n\tif (is<MapSeries>(object, \"MapSeries\")) {\r\n\t\tobject.hiddenState.properties.opacity = 0;\r\n\t}\r\n\r\n\tif (is<PercentSeries>(object, \"PercentSeries\")) {\r\n\t\tobject.hiddenState.properties.opacity = 0;\r\n\t}\r\n\r\n\tif (is<FunnelSlice>(object, \"FunnelSlice\")) {\r\n\t\tobject.defaultState.transitionDuration = 800;\r\n\t\tobject.hiddenState.transitionDuration = 1000;\r\n\t\tobject.hiddenState.properties.opacity = 1;\r\n\t}\r\n\r\n\tif (is<Slice>(object, \"Slice\")) {\r\n\t\tobject.defaultState.transitionDuration = 700;\r\n\t\tobject.hiddenState.transitionDuration = 1000;\r\n\t\tobject.hiddenState.properties.opacity = 1;\r\n\t}\r\n\r\n\tif (is<Preloader>(object, \"Preloader\")) {\r\n\t\tobject.hiddenState.transitionDuration = 2000;\r\n\t}\r\n\r\n\tif (is<Column>(object, \"Column\")) {\r\n\t\tobject.defaultState.transitionDuration = 700;\r\n\t\tobject.hiddenState.transitionDuration = 1000;\r\n\t\tobject.hiddenState.properties.opacity = 1;\r\n\t}\r\n\r\n\tif (is<Column3D>(object, \"Column3D\")) {\r\n\t\tobject.hiddenState.properties.opacity = 0;\r\n\t}\r\n};\r\n\r\nexport default theme;\r\n"],"names":["Grip","_super","_this","call","className","cs","InterfaceColorSet","layout","padding","margin","background","fillOpacity","cornerRadius","icon","Sprite","element","paper","add","path","$path","x","y","strokeWidth","pixelPerfect","stroke","getFor","strokeOpacity","align","valign","label","dispose","undefined","position","autoHideDelay","events","on","ev","_autoHideTimeout","setTimeout","hide","applyTheme","__extends","Object","defineProperty","prototype","this","getPropertyValue","value","setPropertyValue","horizontalCenter","verticalCenter","rotation","width","height","percent","Button","registry","registeredClasses","ChartDataItem","DataItem","Chart","_legend","MutableValueDisposer","constructor","Error","template","Label","titles","ListTemplate","_disposers","push","ListDisposer","chartAndLegendContainer","createChild","Container","shouldClone","chartContainer","showOnInit","processTitle","updateReaderTitleReferences","role","defaultState","transitionDuration","applyInternalDefaults","$type","readerTitle","language","translate","draw","fixLayout","legend","toBack","toFront","isMeasured","feedLegend","event","title","newValue","parent","uidAttr","length","titleIds_1","$iter","iterator","uid","setSVGAttribute","join","removeSVGAttribute","get","setLegend","set","property","addDisposer","Disposer","reset","processConfig","config","type","copyFrom","source","clone","removeChildren","_dragGrip","grip_1","tooltipContainer","touch","interactionsEnabled","show","focusable","Component","defaultRules","relevant","ResponsiveBreakpoints","widthXS","state","target","stateId","states","create","pixelPaddingLeft","properties","paddingLeft","pixelPaddingRight","paddingRight","heightXS","pixelPaddingTop","paddingTop","pixelPaddingBottom","paddingBottom","widthXXS","heightXXS","Bullet","tooltipX","tooltipY","applyOnClones","copyToLegendMarker","dataItem","component","invalidate","isXS","disabled","LegendDataItem","childrenCreated","_label","label_1","labels","addSprite","itemContainer","removeValue","color","setProperty","_valueLabel","valueLabel_1","valueLabels","_itemContainer","component_1","itemContainer_1","itemContainers","togglable","toggleDataItem","focusedItem","dataContext","readerControls","readerLabelledBy","sprite","isDisposed","visibilitychanged","readerChecked","visible","disableType","isActive","enableType","dataItems","remove","_marker","marker_1","markers","LegendSettings","createMarker","Legend","clickable","cursorOverStyle","MouseCursorStyle","pointer","getInteraction","body","keyboard","isKey","isEnabled","dispatchImmediately","interfaceColors","marker","setStateOnChildren","propertyFields","fill","disabledColor","activeState","rectangle","RoundedRectangle","text","truncate","fullWords","valueLabel","textAlign","handleScrollbar","scrollable","updateMasks","_handleWheelReal","createDataItem","validateDataElements","scrollbar","start","end","validateDataElement","container","$utils","legendDataItem","tempMaxWidth","maxWidth","Percent","legendSettings","createLegendMarker","useDefaultMarker","updateLegendValue","invalid","validate","__disabled","itemValueText","valueText","setState","afterDraw","maxLabelWidth","each","measuredWidth","pixelMarginLeft","pixelMarginRight","maxValueLabelWidth","maxMarkerWidth","maxAdjustedLabelWidth","trueMaxWidth","Math","min","measuredHeight","maxHeight","pixelWidth","contentHeight","thumb","handleThumbPosition","contentAlign","maxColumns","Scrollbar","orientation","endGrip","startGrip","marginLeft","_mouseWheelDisposer","handleWheel","shift","ds","delta","$math","dy","pixelY","maskRectangle","invalidatePosition","item","isHiding","isHidden","colorOrig","appeared","hidden","svgContainer","readerAlert","locale","handleDataItemPropertyChange","name","SeriesDataItem","values","_bullets","Dictionary","DictionaryDisposer","bullets","clear","setValue","Series","_ignoreMinMax","_showBullets","_tmin","_tmax","_smin","_smax","dataItemsByAxis","skipFocusThreshold","_itemReaderTextChanged","calculatePercent","usePercentHack","autoDispose","simplifiedProcessing","axisRanges","List","processAxisRange","minBulletDistance","mainContainer","mask","bulletsContainer","_shouldBeReady","virtualParent","tooltip","Tooltip","hiddenState","transitionEasing","$ease","options","autoSetClassName","setClassName","_chart","positionBullet","bullet","processBullet","isTemplate","once","itemsFocusable","removeBullet","oldValue","eachBullet","getKey","validateDataItems","processValues","getFirstValue","key","startIndex","i","getIndex","getActualWorkingValue","getAbsoluteFirstValue","rangeChangeUpdate","working","count_1","sum_1","absoluteSum_1","low_1","high_1","open_1","close_1","previous_1","first_1","absoluteFirst_1","startIndex_1","endIndex","dataItem_1","$object","dataItem_2","abs","setCalculatedValue","prevValue","dataItem_3","ksum","zeroItem_1","dataItem_4","filters","axisRange","pixelX","children","updateTooltipBounds","topParent","rect","setBounds","shouldCreateBullet","bulletTemplate","disabledField","currentDataItem","setKey","readerText_1","itemReaderText","xField","yField","isDynamic","deepInvalidate","populateString","hoverable","itemWidth","itemHeight","handleDataItemWorkingValueChange","dataRangeInvalid","invalidateProcessedData","invalidateDataItems","createMask","rangesContainer","contents","isRange","getAxisField","axis","showTooltipAtPosition","xPosition","yPosition","chart","invalidateRawData","readerText","_itemReaderText","tooltipText","tooltipHTML","_adapterO","apply","_legendDataItem","notRange","itemLabelText","labelText","raiseCriticalError","e","modal","content","adapter","message","closable","suppressErrors","open","verbose","console","log","applyFilters","filter","_heatRules","heatRule","dataField_1","dataField","seriesDataItem_1","property_1","minValue","maxValue","foundSprite","$array","sprites","clonedFrom","anySprite","child","anyChild","foundSprite_1","ruleTarget","max","propertyField","low","high","workingValue","logarithmic","LOG10E","Infinity","Color","$colors","rgb","heatRules","len","rule","map","hasKey","parts","split","listitem","maybeIndex","match","maybeColorOrPercent","configOrder","a","b","setVisibility","SerialChartDataItem","SerialChart","_exitDP","colors","ColorSet","_usesData","seriesContainer","zIndex","patterns","_series","createSeries","handleSeriesAdded","handleSeriesRemoved","series","dataUsers","dataUser","data","di","_dataUsers","moveValue","handleSeriesAdded2","handleLegendSeriesAdded","hiddenInLegend","addData","dataInvalid","reinit","_data","legendData_1","dataFields","appear","inited","WordCloudSeriesDataItem","duration","delay","toValue","fields","noChangeValues","setWorkingValue","word","labelsContainer","fontSize","next","WordCloudSeries","_adjustedFont","accuracy","minFontSize","maxFontSize","excludeWords","angles","rotationThreshold","minWordLength","step","randomness","canvas","document","createElement","style","top","left","opacity","_canvas","_ctx","getContext","_maskSprite","_spiral","validateDataRange","_currentIndex","sort","_processTimeout","w","innerWidth","h","innerHeight","context","fillStyle","fillRect","_points","angle","point","splice","point2","maskSprite","pictureWidth","scale","pictureHeight","validatePosition","processItem","$dom","htmlContainer","fontFace","node","smallerSize","initialFontSize","round","random","hardInvalidate","maxL","maxLeft","maxR","maxRight","maxT","maxTop","maxB","maxBottom","intersects","p","initialX","initialY","marginRight","marginTop","pixelMarginTop","rect1","pixelMarginBottom","pixel","getImageData","pow","currentText","animate","to","from","interpolationDuration","interpolationEasing","cx","cy","radAngle","PI","rotate","textBaseline","font","fontWeight","fillText","event_1","progress","createLabel","_labels","updateData","getWords","input","chars","reg","RegExp","res","words","pop","toLowerCase","isCapitalized","indexOf","maxCount","slice","lword","substr","WordCloudDataItem","WordCloud","object","is","rangeChangeDuration","sequencedInterpolation","animationDuration"],"sourceRoot":""}