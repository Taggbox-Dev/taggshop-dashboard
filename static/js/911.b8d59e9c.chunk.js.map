{"version":3,"file":"static/js/911.b8d59e9c.chunk.js","mappings":"sQAQA,MAAMA,UAAiBC,EAAAA,UACnBC,MAAAA,GACI,MAAM,SAAEC,EAAQ,OAAEC,GAAWC,KAAKC,MAC5BC,EAAQ,CAAC,OAAQ,SAAU,SAAU,SAC3C,OAAOC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,2BAA0BC,SAAA,EAC5CC,EAAAA,EAAAA,KAAA,MAAIF,UAAU,KAAIC,SAAC,uBACnBC,EAAAA,EAAAA,KAACC,EAAAA,EAAG,CAAAF,SACCP,IAAaC,EAASD,EAASU,KAAI,CAACC,EAAMC,KACvC,MAAMC,EAAQF,EAAKE,MAAQC,SAASH,EAAKE,OAAS,EAC5CE,EAAkBJ,EAAKI,gBAAkBD,SAASH,EAAKI,iBAAmB,EAC1EC,EAASH,EAAQE,EAEvB,OAAOP,EAAAA,EAAAA,KAACS,EAAAA,EAAG,CAACC,GAAI,EAAGC,GAAI,EAAEZ,UACrBC,EAAAA,EAAAA,KAACY,EAAAA,GAAI,CAACC,GAAI,aAAad,UACnBC,EAAAA,EAAAA,KAACc,EAAAA,EAAI,CAAChB,UAAW,wBAAwBF,EAAMQ,KAASL,UACpDF,EAAAA,EAAAA,MAACiB,EAAAA,EAAKC,KAAI,CAAAhB,SAAA,EACNF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,YAAWC,SAAA,EACtBC,EAAAA,EAAAA,KAAA,KAAGF,UAAU,iCAAgCC,SACxCI,EAAKa,SAEVhB,EAAAA,EAAAA,KAACiB,EAAAA,EAAc,CAACC,UAAU,MAAMC,SAASnB,EAAAA,EAAAA,KAACoB,EAAAA,EAAO,CAAArB,SAAEI,EAAKkB,WAAoBtB,UACxEC,EAAAA,EAAAA,KAAA,QAAAD,UAAMC,EAAAA,EAAAA,KAACsB,EAAAA,GAAe,CAACC,KAAM,QAASC,KAAM,cAAeC,UAAW,uBAG9E5B,EAAAA,EAAAA,MAAA,OAAKC,UAAU,4BAA2BC,SAAA,EACtCC,EAAAA,EAAAA,KAAA,KAAGF,UAAU,UAASC,UAAE2B,EAAAA,EAAAA,IAAWrB,KAClCA,GAASE,GAAkBV,EAAAA,EAAAA,MAAC8B,EAAAA,EAAK,CAACC,GAAG,GAAG9B,UAAW,eAAeU,EAAS,UAAY,qBAAqBT,SAAA,EACzGC,EAAAA,EAAAA,KAACsB,EAAAA,GAAe,CAACC,KAAM,QAASC,KAAMhB,EAAS,WAAa,aAAciB,UAAW,UACpFI,EAAAA,EAAAA,IAAoBxB,EAAOE,GAAiBuB,QAAQ,GAAG,OACjD,gBAjBA1B,EAsBzB,KAGN2B,EAAAA,EAAAA,IAAoB,GAAG7B,KAAI,CAAC8B,EAAO5B,KAAWJ,EAAAA,EAAAA,KAACS,EAAAA,EAAG,CAACC,GAAI,EAAGC,GAAI,EAAEZ,UAC5DC,EAAAA,EAAAA,KAACc,EAAAA,EAAI,CAAChB,UAAU,WAAUC,UACtBF,EAAAA,EAAAA,MAACiB,EAAAA,EAAKC,KAAI,CAAAhB,SAAA,EACNC,EAAAA,EAAAA,KAAA,KAAGF,UAAU,+CACbE,EAAAA,EAAAA,KAAA,KAAGF,UAAU,8EAJ6CM,SAUtF,EAIJ,MAOA,GAAe6B,EAAAA,EAAAA,KAPSC,IACb,CACH1C,SAAU0C,EAAMC,cAAc3C,SAC9BC,OAAQyC,EAAMC,cAAcC,mBAII,KAAxC,CAA8C/C,E","sources":["app/Layout/Main/Home/Dashboard/Overview.js"],"sourcesContent":["import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Link } from \"react-router-dom\";\r\nimport { calculatePercentage, kFormatter, generateRandomArray } from \"../../../../../utils\";\r\nimport { OverlayTrigger, Tooltip, Row, Col, Card, Badge } from \"react-bootstrap\";\r\nimport { baseUrl, FontAwesomeIcon } from \"../../../../../Assets/AssetsHelper\";\r\n\r\n\r\nclass Overview extends Component {\r\n    render() {\r\n        const { overview, loader } = this.props\r\n        const color = ['blue', 'orange', 'yellow', 'green']\r\n        return <div className=\"businessOverview_section\">\r\n            <h4 className=\"h3\">Business Overview</h4>\r\n            <Row>\r\n                {overview && !loader ? overview.map((Item, Index) => {\r\n                    const total = Item.total ? parseInt(Item.total) : 0\r\n                    const total_last_week = Item.total_last_week ? parseInt(Item.total_last_week) : 0\r\n                    const status = total > total_last_week ? true : false\r\n\r\n                    return <Col lg={3} sm={6} key={Index}>\r\n                        <Link to={`/analytics`}>\r\n                            <Card className={`gutter-b card-shadow ${color[Index]}`}>\r\n                                <Card.Body>\r\n                                    <div className=\"f-between\">\r\n                                        <p className=\"fs-8 fw-medium text-muted mb-2\">\r\n                                            {Item.label}\r\n                                        </p>\r\n                                        <OverlayTrigger placement='top' overlay={<Tooltip>{Item.tool_tip}</Tooltip>} >\r\n                                            <span><FontAwesomeIcon type={'solid'} icon={'circle-info'} iconClass={'text-muted'}/></span>\r\n                                        </OverlayTrigger>\r\n                                    </div>\r\n                                    <div className=\"d-flex align-items-center\">\r\n                                        <p className=\"h1 mb-0\">{kFormatter(total)}</p>\r\n                                        {total && total_last_week ? <Badge bg='' className={`badge-light-${status ? `success` : 'danger'} ms-1 py-1`}>\r\n                                            <FontAwesomeIcon type={'solid'} icon={status ? 'caret-up' : 'caret-down'} iconClass={'me-1'}/>\r\n                                            {calculatePercentage(total, total_last_week).toFixed(0)}%\r\n                                        </Badge> : null}\r\n                                    </div>\r\n                                </Card.Body>\r\n                            </Card>\r\n                        </Link>\r\n                    </Col>\r\n                })\r\n                    :\r\n                    generateRandomArray(4).map((count, Index) => (<Col lg={3} sm={6} key={Index}>\r\n                        <Card className=\"gutter-b\">\r\n                            <Card.Body>\r\n                                <p className=\"mb-6 sk_line sk_line_50 sk_line_height_10\"></p>\r\n                                <p className=\"fs-8 fw-medium text-muted mb-3 sk_line sk_line_30 sk_line_height_20\"></p>\r\n                            </Card.Body>\r\n                        </Card>\r\n                    </Col>))}\r\n            </Row>\r\n        </div>\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        overview: state.dashboardData.overview,\r\n        loader: state.dashboardData.overview_loader\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, null)(Overview)"],"names":["Overview","Component","render","overview","loader","this","props","color","_jsxs","className","children","_jsx","Row","map","Item","Index","total","parseInt","total_last_week","status","Col","lg","sm","Link","to","Card","Body","label","OverlayTrigger","placement","overlay","Tooltip","tool_tip","FontAwesomeIcon","type","icon","iconClass","kFormatter","Badge","bg","calculatePercentage","toFixed","generateRandomArray","count","connect","state","dashboardData","overview_loader"],"sourceRoot":""}